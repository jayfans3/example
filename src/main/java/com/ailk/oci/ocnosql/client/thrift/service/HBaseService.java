/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.oci.ocnosql.client.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HBaseService {

  public interface Iface {

    public List<List<String>> queryByRowkeyFir(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyFirCrList(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeySec(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeySecCrList(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyThr(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyThrCrList(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyPrefixFir(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyPrefixFirCrList(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyPrefixSec(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyPrefixSecCrList(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyFou(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyFouCrList(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyFiv(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeyFivCrList(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeySix(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

    public List<List<String>> queryByRowkeySixCrList(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryByRowkeyFir(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyFirCrList(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeySec(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeySecCrList(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyThr(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyThrCrList(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyPrefixFir(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyPrefixFirCrList(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyPrefixSec(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyPrefixSecCrList(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyFou(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyFouCrList(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyFiv(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeyFivCrList(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeySix(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByRowkeySixCrList(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<List<String>> queryByRowkeyFir(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyFir(rowkey, tableNames, columnValueFilter, param);
      return recv_queryByRowkeyFir();
    }

    public void send_queryByRowkeyFir(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws org.apache.thrift.TException
    {
      queryByRowkeyFir_args args = new queryByRowkeyFir_args();
      args.setRowkey(rowkey);
      args.setTableNames(tableNames);
      args.setColumnValueFilter(columnValueFilter);
      args.setParam(param);
      sendBase("queryByRowkeyFir", args);
    }

    public List<List<String>> recv_queryByRowkeyFir() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyFir_result result = new queryByRowkeyFir_result();
      receiveBase(result, "queryByRowkeyFir");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyFir failed: unknown result");
    }

    public List<List<String>> queryByRowkeyFirCrList(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyFirCrList(rowkey, tableNames, columnValueFilterList, logicalOpt, param);
      return recv_queryByRowkeyFirCrList();
    }

    public void send_queryByRowkeyFirCrList(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws org.apache.thrift.TException
    {
      queryByRowkeyFirCrList_args args = new queryByRowkeyFirCrList_args();
      args.setRowkey(rowkey);
      args.setTableNames(tableNames);
      args.setColumnValueFilterList(columnValueFilterList);
      args.setLogicalOpt(logicalOpt);
      args.setParam(param);
      sendBase("queryByRowkeyFirCrList", args);
    }

    public List<List<String>> recv_queryByRowkeyFirCrList() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyFirCrList_result result = new queryByRowkeyFirCrList_result();
      receiveBase(result, "queryByRowkeyFirCrList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyFirCrList failed: unknown result");
    }

    public List<List<String>> queryByRowkeySec(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeySec(rowkey, tableNames, columnValueFilter, param, columnFilter);
      return recv_queryByRowkeySec();
    }

    public void send_queryByRowkeySec(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws org.apache.thrift.TException
    {
      queryByRowkeySec_args args = new queryByRowkeySec_args();
      args.setRowkey(rowkey);
      args.setTableNames(tableNames);
      args.setColumnValueFilter(columnValueFilter);
      args.setParam(param);
      args.setColumnFilter(columnFilter);
      sendBase("queryByRowkeySec", args);
    }

    public List<List<String>> recv_queryByRowkeySec() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeySec_result result = new queryByRowkeySec_result();
      receiveBase(result, "queryByRowkeySec");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeySec failed: unknown result");
    }

    public List<List<String>> queryByRowkeySecCrList(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeySecCrList(rowkey, tableNames, columnValueFilterList, logicalOpt, param, columnFilter);
      return recv_queryByRowkeySecCrList();
    }

    public void send_queryByRowkeySecCrList(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws org.apache.thrift.TException
    {
      queryByRowkeySecCrList_args args = new queryByRowkeySecCrList_args();
      args.setRowkey(rowkey);
      args.setTableNames(tableNames);
      args.setColumnValueFilterList(columnValueFilterList);
      args.setLogicalOpt(logicalOpt);
      args.setParam(param);
      args.setColumnFilter(columnFilter);
      sendBase("queryByRowkeySecCrList", args);
    }

    public List<List<String>> recv_queryByRowkeySecCrList() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeySecCrList_result result = new queryByRowkeySecCrList_result();
      receiveBase(result, "queryByRowkeySecCrList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeySecCrList failed: unknown result");
    }

    public List<List<String>> queryByRowkeyThr(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyThr(rowkey, tableNames, columnValueFilter, param);
      return recv_queryByRowkeyThr();
    }

    public void send_queryByRowkeyThr(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws org.apache.thrift.TException
    {
      queryByRowkeyThr_args args = new queryByRowkeyThr_args();
      args.setRowkey(rowkey);
      args.setTableNames(tableNames);
      args.setColumnValueFilter(columnValueFilter);
      args.setParam(param);
      sendBase("queryByRowkeyThr", args);
    }

    public List<List<String>> recv_queryByRowkeyThr() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyThr_result result = new queryByRowkeyThr_result();
      receiveBase(result, "queryByRowkeyThr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyThr failed: unknown result");
    }

    public List<List<String>> queryByRowkeyThrCrList(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyThrCrList(rowkey, tableNames, columnValueFilterList, logicalOpt, param);
      return recv_queryByRowkeyThrCrList();
    }

    public void send_queryByRowkeyThrCrList(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws org.apache.thrift.TException
    {
      queryByRowkeyThrCrList_args args = new queryByRowkeyThrCrList_args();
      args.setRowkey(rowkey);
      args.setTableNames(tableNames);
      args.setColumnValueFilterList(columnValueFilterList);
      args.setLogicalOpt(logicalOpt);
      args.setParam(param);
      sendBase("queryByRowkeyThrCrList", args);
    }

    public List<List<String>> recv_queryByRowkeyThrCrList() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyThrCrList_result result = new queryByRowkeyThrCrList_result();
      receiveBase(result, "queryByRowkeyThrCrList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyThrCrList failed: unknown result");
    }

    public List<List<String>> queryByRowkeyPrefixFir(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyPrefixFir(rowkeyPrefix, tableNames, columnValueFilter, param);
      return recv_queryByRowkeyPrefixFir();
    }

    public void send_queryByRowkeyPrefixFir(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws org.apache.thrift.TException
    {
      queryByRowkeyPrefixFir_args args = new queryByRowkeyPrefixFir_args();
      args.setRowkeyPrefix(rowkeyPrefix);
      args.setTableNames(tableNames);
      args.setColumnValueFilter(columnValueFilter);
      args.setParam(param);
      sendBase("queryByRowkeyPrefixFir", args);
    }

    public List<List<String>> recv_queryByRowkeyPrefixFir() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyPrefixFir_result result = new queryByRowkeyPrefixFir_result();
      receiveBase(result, "queryByRowkeyPrefixFir");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyPrefixFir failed: unknown result");
    }

    public List<List<String>> queryByRowkeyPrefixFirCrList(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyPrefixFirCrList(rowkeyPrefix, tableNames, columnValueFilterList, logicalOpt, param);
      return recv_queryByRowkeyPrefixFirCrList();
    }

    public void send_queryByRowkeyPrefixFirCrList(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws org.apache.thrift.TException
    {
      queryByRowkeyPrefixFirCrList_args args = new queryByRowkeyPrefixFirCrList_args();
      args.setRowkeyPrefix(rowkeyPrefix);
      args.setTableNames(tableNames);
      args.setColumnValueFilterList(columnValueFilterList);
      args.setLogicalOpt(logicalOpt);
      args.setParam(param);
      sendBase("queryByRowkeyPrefixFirCrList", args);
    }

    public List<List<String>> recv_queryByRowkeyPrefixFirCrList() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyPrefixFirCrList_result result = new queryByRowkeyPrefixFirCrList_result();
      receiveBase(result, "queryByRowkeyPrefixFirCrList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyPrefixFirCrList failed: unknown result");
    }

    public List<List<String>> queryByRowkeyPrefixSec(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyPrefixSec(rowkeyPrefix, tableNames, columnValueFilter, param, columnFilter);
      return recv_queryByRowkeyPrefixSec();
    }

    public void send_queryByRowkeyPrefixSec(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws org.apache.thrift.TException
    {
      queryByRowkeyPrefixSec_args args = new queryByRowkeyPrefixSec_args();
      args.setRowkeyPrefix(rowkeyPrefix);
      args.setTableNames(tableNames);
      args.setColumnValueFilter(columnValueFilter);
      args.setParam(param);
      args.setColumnFilter(columnFilter);
      sendBase("queryByRowkeyPrefixSec", args);
    }

    public List<List<String>> recv_queryByRowkeyPrefixSec() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyPrefixSec_result result = new queryByRowkeyPrefixSec_result();
      receiveBase(result, "queryByRowkeyPrefixSec");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyPrefixSec failed: unknown result");
    }

    public List<List<String>> queryByRowkeyPrefixSecCrList(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyPrefixSecCrList(rowkeyPrefix, tableNames, columnValueFilterList, logicalOpt, param, columnFilter);
      return recv_queryByRowkeyPrefixSecCrList();
    }

    public void send_queryByRowkeyPrefixSecCrList(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws org.apache.thrift.TException
    {
      queryByRowkeyPrefixSecCrList_args args = new queryByRowkeyPrefixSecCrList_args();
      args.setRowkeyPrefix(rowkeyPrefix);
      args.setTableNames(tableNames);
      args.setColumnValueFilterList(columnValueFilterList);
      args.setLogicalOpt(logicalOpt);
      args.setParam(param);
      args.setColumnFilter(columnFilter);
      sendBase("queryByRowkeyPrefixSecCrList", args);
    }

    public List<List<String>> recv_queryByRowkeyPrefixSecCrList() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyPrefixSecCrList_result result = new queryByRowkeyPrefixSecCrList_result();
      receiveBase(result, "queryByRowkeyPrefixSecCrList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyPrefixSecCrList failed: unknown result");
    }

    public List<List<String>> queryByRowkeyFou(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyFou(rowkey, tableNames, columnValueFilter, param, columnFilter);
      return recv_queryByRowkeyFou();
    }

    public void send_queryByRowkeyFou(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws org.apache.thrift.TException
    {
      queryByRowkeyFou_args args = new queryByRowkeyFou_args();
      args.setRowkey(rowkey);
      args.setTableNames(tableNames);
      args.setColumnValueFilter(columnValueFilter);
      args.setParam(param);
      args.setColumnFilter(columnFilter);
      sendBase("queryByRowkeyFou", args);
    }

    public List<List<String>> recv_queryByRowkeyFou() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyFou_result result = new queryByRowkeyFou_result();
      receiveBase(result, "queryByRowkeyFou");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyFou failed: unknown result");
    }

    public List<List<String>> queryByRowkeyFouCrList(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyFouCrList(rowkey, tableNames, columnValueFilterList, logicalOpt, param, columnFilter);
      return recv_queryByRowkeyFouCrList();
    }

    public void send_queryByRowkeyFouCrList(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws org.apache.thrift.TException
    {
      queryByRowkeyFouCrList_args args = new queryByRowkeyFouCrList_args();
      args.setRowkey(rowkey);
      args.setTableNames(tableNames);
      args.setColumnValueFilterList(columnValueFilterList);
      args.setLogicalOpt(logicalOpt);
      args.setParam(param);
      args.setColumnFilter(columnFilter);
      sendBase("queryByRowkeyFouCrList", args);
    }

    public List<List<String>> recv_queryByRowkeyFouCrList() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyFouCrList_result result = new queryByRowkeyFouCrList_result();
      receiveBase(result, "queryByRowkeyFouCrList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyFouCrList failed: unknown result");
    }

    public List<List<String>> queryByRowkeyFiv(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyFiv(startKey, stopKey, tableNames, columnValueFilter, param);
      return recv_queryByRowkeyFiv();
    }

    public void send_queryByRowkeyFiv(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param) throws org.apache.thrift.TException
    {
      queryByRowkeyFiv_args args = new queryByRowkeyFiv_args();
      args.setStartKey(startKey);
      args.setStopKey(stopKey);
      args.setTableNames(tableNames);
      args.setColumnValueFilter(columnValueFilter);
      args.setParam(param);
      sendBase("queryByRowkeyFiv", args);
    }

    public List<List<String>> recv_queryByRowkeyFiv() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyFiv_result result = new queryByRowkeyFiv_result();
      receiveBase(result, "queryByRowkeyFiv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyFiv failed: unknown result");
    }

    public List<List<String>> queryByRowkeyFivCrList(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeyFivCrList(startKey, stopKey, tableNames, columnValueFilterList, logicalOpt, param);
      return recv_queryByRowkeyFivCrList();
    }

    public void send_queryByRowkeyFivCrList(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param) throws org.apache.thrift.TException
    {
      queryByRowkeyFivCrList_args args = new queryByRowkeyFivCrList_args();
      args.setStartKey(startKey);
      args.setStopKey(stopKey);
      args.setTableNames(tableNames);
      args.setColumnValueFilterList(columnValueFilterList);
      args.setLogicalOpt(logicalOpt);
      args.setParam(param);
      sendBase("queryByRowkeyFivCrList", args);
    }

    public List<List<String>> recv_queryByRowkeyFivCrList() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeyFivCrList_result result = new queryByRowkeyFivCrList_result();
      receiveBase(result, "queryByRowkeyFivCrList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeyFivCrList failed: unknown result");
    }

    public List<List<String>> queryByRowkeySix(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeySix(startKey, stopKey, tableNames, columnValueFilter, param, columnFilter);
      return recv_queryByRowkeySix();
    }

    public void send_queryByRowkeySix(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter) throws org.apache.thrift.TException
    {
      queryByRowkeySix_args args = new queryByRowkeySix_args();
      args.setStartKey(startKey);
      args.setStopKey(stopKey);
      args.setTableNames(tableNames);
      args.setColumnValueFilter(columnValueFilter);
      args.setParam(param);
      args.setColumnFilter(columnFilter);
      sendBase("queryByRowkeySix", args);
    }

    public List<List<String>> recv_queryByRowkeySix() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeySix_result result = new queryByRowkeySix_result();
      receiveBase(result, "queryByRowkeySix");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeySix failed: unknown result");
    }

    public List<List<String>> queryByRowkeySixCrList(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      send_queryByRowkeySixCrList(startKey, stopKey, tableNames, columnValueFilterList, logicalOpt, param, columnFilter);
      return recv_queryByRowkeySixCrList();
    }

    public void send_queryByRowkeySixCrList(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter) throws org.apache.thrift.TException
    {
      queryByRowkeySixCrList_args args = new queryByRowkeySixCrList_args();
      args.setStartKey(startKey);
      args.setStopKey(stopKey);
      args.setTableNames(tableNames);
      args.setColumnValueFilterList(columnValueFilterList);
      args.setLogicalOpt(logicalOpt);
      args.setParam(param);
      args.setColumnFilter(columnFilter);
      sendBase("queryByRowkeySixCrList", args);
    }

    public List<List<String>> recv_queryByRowkeySixCrList() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException
    {
      queryByRowkeySixCrList_result result = new queryByRowkeySixCrList_result();
      receiveBase(result, "queryByRowkeySixCrList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientExp != null) {
        throw result.clientExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByRowkeySixCrList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryByRowkeyFir(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyFir_call method_call = new queryByRowkeyFir_call(rowkey, tableNames, columnValueFilter, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyFir_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkey;
      private List<String> tableNames;
      private String columnValueFilter;
      private Map<String,String> param;
      public queryByRowkeyFir_call(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
        this.tableNames = tableNames;
        this.columnValueFilter = columnValueFilter;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyFir", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyFir_args args = new queryByRowkeyFir_args();
        args.setRowkey(rowkey);
        args.setTableNames(tableNames);
        args.setColumnValueFilter(columnValueFilter);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyFir();
      }
    }

    public void queryByRowkeyFirCrList(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyFirCrList_call method_call = new queryByRowkeyFirCrList_call(rowkey, tableNames, columnValueFilterList, logicalOpt, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyFirCrList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkey;
      private List<String> tableNames;
      private List<String> columnValueFilterList;
      private String logicalOpt;
      private Map<String,String> param;
      public queryByRowkeyFirCrList_call(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
        this.tableNames = tableNames;
        this.columnValueFilterList = columnValueFilterList;
        this.logicalOpt = logicalOpt;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyFirCrList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyFirCrList_args args = new queryByRowkeyFirCrList_args();
        args.setRowkey(rowkey);
        args.setTableNames(tableNames);
        args.setColumnValueFilterList(columnValueFilterList);
        args.setLogicalOpt(logicalOpt);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyFirCrList();
      }
    }

    public void queryByRowkeySec(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeySec_call method_call = new queryByRowkeySec_call(rowkey, tableNames, columnValueFilter, param, columnFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeySec_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkey;
      private List<String> tableNames;
      private String columnValueFilter;
      private Map<String,String> param;
      private Map<String,List<String>> columnFilter;
      public queryByRowkeySec_call(String rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
        this.tableNames = tableNames;
        this.columnValueFilter = columnValueFilter;
        this.param = param;
        this.columnFilter = columnFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeySec", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeySec_args args = new queryByRowkeySec_args();
        args.setRowkey(rowkey);
        args.setTableNames(tableNames);
        args.setColumnValueFilter(columnValueFilter);
        args.setParam(param);
        args.setColumnFilter(columnFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeySec();
      }
    }

    public void queryByRowkeySecCrList(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeySecCrList_call method_call = new queryByRowkeySecCrList_call(rowkey, tableNames, columnValueFilterList, logicalOpt, param, columnFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeySecCrList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkey;
      private List<String> tableNames;
      private List<String> columnValueFilterList;
      private String logicalOpt;
      private Map<String,String> param;
      private Map<String,List<String>> columnFilter;
      public queryByRowkeySecCrList_call(String rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
        this.tableNames = tableNames;
        this.columnValueFilterList = columnValueFilterList;
        this.logicalOpt = logicalOpt;
        this.param = param;
        this.columnFilter = columnFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeySecCrList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeySecCrList_args args = new queryByRowkeySecCrList_args();
        args.setRowkey(rowkey);
        args.setTableNames(tableNames);
        args.setColumnValueFilterList(columnValueFilterList);
        args.setLogicalOpt(logicalOpt);
        args.setParam(param);
        args.setColumnFilter(columnFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeySecCrList();
      }
    }

    public void queryByRowkeyThr(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyThr_call method_call = new queryByRowkeyThr_call(rowkey, tableNames, columnValueFilter, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyThr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> rowkey;
      private List<String> tableNames;
      private String columnValueFilter;
      private Map<String,String> param;
      public queryByRowkeyThr_call(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
        this.tableNames = tableNames;
        this.columnValueFilter = columnValueFilter;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyThr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyThr_args args = new queryByRowkeyThr_args();
        args.setRowkey(rowkey);
        args.setTableNames(tableNames);
        args.setColumnValueFilter(columnValueFilter);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyThr();
      }
    }

    public void queryByRowkeyThrCrList(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyThrCrList_call method_call = new queryByRowkeyThrCrList_call(rowkey, tableNames, columnValueFilterList, logicalOpt, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyThrCrList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> rowkey;
      private List<String> tableNames;
      private List<String> columnValueFilterList;
      private String logicalOpt;
      private Map<String,String> param;
      public queryByRowkeyThrCrList_call(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
        this.tableNames = tableNames;
        this.columnValueFilterList = columnValueFilterList;
        this.logicalOpt = logicalOpt;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyThrCrList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyThrCrList_args args = new queryByRowkeyThrCrList_args();
        args.setRowkey(rowkey);
        args.setTableNames(tableNames);
        args.setColumnValueFilterList(columnValueFilterList);
        args.setLogicalOpt(logicalOpt);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyThrCrList();
      }
    }

    public void queryByRowkeyPrefixFir(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyPrefixFir_call method_call = new queryByRowkeyPrefixFir_call(rowkeyPrefix, tableNames, columnValueFilter, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyPrefixFir_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkeyPrefix;
      private List<String> tableNames;
      private String columnValueFilter;
      private Map<String,String> param;
      public queryByRowkeyPrefixFir_call(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkeyPrefix = rowkeyPrefix;
        this.tableNames = tableNames;
        this.columnValueFilter = columnValueFilter;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyPrefixFir", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyPrefixFir_args args = new queryByRowkeyPrefixFir_args();
        args.setRowkeyPrefix(rowkeyPrefix);
        args.setTableNames(tableNames);
        args.setColumnValueFilter(columnValueFilter);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyPrefixFir();
      }
    }

    public void queryByRowkeyPrefixFirCrList(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyPrefixFirCrList_call method_call = new queryByRowkeyPrefixFirCrList_call(rowkeyPrefix, tableNames, columnValueFilterList, logicalOpt, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyPrefixFirCrList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkeyPrefix;
      private List<String> tableNames;
      private List<String> columnValueFilterList;
      private String logicalOpt;
      private Map<String,String> param;
      public queryByRowkeyPrefixFirCrList_call(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkeyPrefix = rowkeyPrefix;
        this.tableNames = tableNames;
        this.columnValueFilterList = columnValueFilterList;
        this.logicalOpt = logicalOpt;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyPrefixFirCrList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyPrefixFirCrList_args args = new queryByRowkeyPrefixFirCrList_args();
        args.setRowkeyPrefix(rowkeyPrefix);
        args.setTableNames(tableNames);
        args.setColumnValueFilterList(columnValueFilterList);
        args.setLogicalOpt(logicalOpt);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyPrefixFirCrList();
      }
    }

    public void queryByRowkeyPrefixSec(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyPrefixSec_call method_call = new queryByRowkeyPrefixSec_call(rowkeyPrefix, tableNames, columnValueFilter, param, columnFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyPrefixSec_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkeyPrefix;
      private List<String> tableNames;
      private String columnValueFilter;
      private Map<String,String> param;
      private Map<String,List<String>> columnFilter;
      public queryByRowkeyPrefixSec_call(String rowkeyPrefix, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkeyPrefix = rowkeyPrefix;
        this.tableNames = tableNames;
        this.columnValueFilter = columnValueFilter;
        this.param = param;
        this.columnFilter = columnFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyPrefixSec", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyPrefixSec_args args = new queryByRowkeyPrefixSec_args();
        args.setRowkeyPrefix(rowkeyPrefix);
        args.setTableNames(tableNames);
        args.setColumnValueFilter(columnValueFilter);
        args.setParam(param);
        args.setColumnFilter(columnFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyPrefixSec();
      }
    }

    public void queryByRowkeyPrefixSecCrList(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyPrefixSecCrList_call method_call = new queryByRowkeyPrefixSecCrList_call(rowkeyPrefix, tableNames, columnValueFilterList, logicalOpt, param, columnFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyPrefixSecCrList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkeyPrefix;
      private List<String> tableNames;
      private List<String> columnValueFilterList;
      private String logicalOpt;
      private Map<String,String> param;
      private Map<String,List<String>> columnFilter;
      public queryByRowkeyPrefixSecCrList_call(String rowkeyPrefix, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkeyPrefix = rowkeyPrefix;
        this.tableNames = tableNames;
        this.columnValueFilterList = columnValueFilterList;
        this.logicalOpt = logicalOpt;
        this.param = param;
        this.columnFilter = columnFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyPrefixSecCrList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyPrefixSecCrList_args args = new queryByRowkeyPrefixSecCrList_args();
        args.setRowkeyPrefix(rowkeyPrefix);
        args.setTableNames(tableNames);
        args.setColumnValueFilterList(columnValueFilterList);
        args.setLogicalOpt(logicalOpt);
        args.setParam(param);
        args.setColumnFilter(columnFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyPrefixSecCrList();
      }
    }

    public void queryByRowkeyFou(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyFou_call method_call = new queryByRowkeyFou_call(rowkey, tableNames, columnValueFilter, param, columnFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyFou_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> rowkey;
      private List<String> tableNames;
      private String columnValueFilter;
      private Map<String,String> param;
      private Map<String,List<String>> columnFilter;
      public queryByRowkeyFou_call(List<String> rowkey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
        this.tableNames = tableNames;
        this.columnValueFilter = columnValueFilter;
        this.param = param;
        this.columnFilter = columnFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyFou", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyFou_args args = new queryByRowkeyFou_args();
        args.setRowkey(rowkey);
        args.setTableNames(tableNames);
        args.setColumnValueFilter(columnValueFilter);
        args.setParam(param);
        args.setColumnFilter(columnFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyFou();
      }
    }

    public void queryByRowkeyFouCrList(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyFouCrList_call method_call = new queryByRowkeyFouCrList_call(rowkey, tableNames, columnValueFilterList, logicalOpt, param, columnFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyFouCrList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> rowkey;
      private List<String> tableNames;
      private List<String> columnValueFilterList;
      private String logicalOpt;
      private Map<String,String> param;
      private Map<String,List<String>> columnFilter;
      public queryByRowkeyFouCrList_call(List<String> rowkey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
        this.tableNames = tableNames;
        this.columnValueFilterList = columnValueFilterList;
        this.logicalOpt = logicalOpt;
        this.param = param;
        this.columnFilter = columnFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyFouCrList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyFouCrList_args args = new queryByRowkeyFouCrList_args();
        args.setRowkey(rowkey);
        args.setTableNames(tableNames);
        args.setColumnValueFilterList(columnValueFilterList);
        args.setLogicalOpt(logicalOpt);
        args.setParam(param);
        args.setColumnFilter(columnFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyFouCrList();
      }
    }

    public void queryByRowkeyFiv(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyFiv_call method_call = new queryByRowkeyFiv_call(startKey, stopKey, tableNames, columnValueFilter, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyFiv_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startKey;
      private String stopKey;
      private List<String> tableNames;
      private String columnValueFilter;
      private Map<String,String> param;
      public queryByRowkeyFiv_call(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startKey = startKey;
        this.stopKey = stopKey;
        this.tableNames = tableNames;
        this.columnValueFilter = columnValueFilter;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyFiv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyFiv_args args = new queryByRowkeyFiv_args();
        args.setStartKey(startKey);
        args.setStopKey(stopKey);
        args.setTableNames(tableNames);
        args.setColumnValueFilter(columnValueFilter);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyFiv();
      }
    }

    public void queryByRowkeyFivCrList(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeyFivCrList_call method_call = new queryByRowkeyFivCrList_call(startKey, stopKey, tableNames, columnValueFilterList, logicalOpt, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeyFivCrList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startKey;
      private String stopKey;
      private List<String> tableNames;
      private List<String> columnValueFilterList;
      private String logicalOpt;
      private Map<String,String> param;
      public queryByRowkeyFivCrList_call(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startKey = startKey;
        this.stopKey = stopKey;
        this.tableNames = tableNames;
        this.columnValueFilterList = columnValueFilterList;
        this.logicalOpt = logicalOpt;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeyFivCrList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeyFivCrList_args args = new queryByRowkeyFivCrList_args();
        args.setStartKey(startKey);
        args.setStopKey(stopKey);
        args.setTableNames(tableNames);
        args.setColumnValueFilterList(columnValueFilterList);
        args.setLogicalOpt(logicalOpt);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeyFivCrList();
      }
    }

    public void queryByRowkeySix(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeySix_call method_call = new queryByRowkeySix_call(startKey, stopKey, tableNames, columnValueFilter, param, columnFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeySix_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startKey;
      private String stopKey;
      private List<String> tableNames;
      private String columnValueFilter;
      private Map<String,String> param;
      private Map<String,List<String>> columnFilter;
      public queryByRowkeySix_call(String startKey, String stopKey, List<String> tableNames, String columnValueFilter, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startKey = startKey;
        this.stopKey = stopKey;
        this.tableNames = tableNames;
        this.columnValueFilter = columnValueFilter;
        this.param = param;
        this.columnFilter = columnFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeySix", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeySix_args args = new queryByRowkeySix_args();
        args.setStartKey(startKey);
        args.setStopKey(stopKey);
        args.setTableNames(tableNames);
        args.setColumnValueFilter(columnValueFilter);
        args.setParam(param);
        args.setColumnFilter(columnFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeySix();
      }
    }

    public void queryByRowkeySixCrList(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByRowkeySixCrList_call method_call = new queryByRowkeySixCrList_call(startKey, stopKey, tableNames, columnValueFilterList, logicalOpt, param, columnFilter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByRowkeySixCrList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startKey;
      private String stopKey;
      private List<String> tableNames;
      private List<String> columnValueFilterList;
      private String logicalOpt;
      private Map<String,String> param;
      private Map<String,List<String>> columnFilter;
      public queryByRowkeySixCrList_call(String startKey, String stopKey, List<String> tableNames, List<String> columnValueFilterList, String logicalOpt, Map<String,String> param, Map<String,List<String>> columnFilter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startKey = startKey;
        this.stopKey = stopKey;
        this.tableNames = tableNames;
        this.columnValueFilterList = columnValueFilterList;
        this.logicalOpt = logicalOpt;
        this.param = param;
        this.columnFilter = columnFilter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByRowkeySixCrList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByRowkeySixCrList_args args = new queryByRowkeySixCrList_args();
        args.setStartKey(startKey);
        args.setStopKey(stopKey);
        args.setTableNames(tableNames);
        args.setColumnValueFilterList(columnValueFilterList);
        args.setLogicalOpt(logicalOpt);
        args.setParam(param);
        args.setColumnFilter(columnFilter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByRowkeySixCrList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryByRowkeyFir", new queryByRowkeyFir());
      processMap.put("queryByRowkeyFirCrList", new queryByRowkeyFirCrList());
      processMap.put("queryByRowkeySec", new queryByRowkeySec());
      processMap.put("queryByRowkeySecCrList", new queryByRowkeySecCrList());
      processMap.put("queryByRowkeyThr", new queryByRowkeyThr());
      processMap.put("queryByRowkeyThrCrList", new queryByRowkeyThrCrList());
      processMap.put("queryByRowkeyPrefixFir", new queryByRowkeyPrefixFir());
      processMap.put("queryByRowkeyPrefixFirCrList", new queryByRowkeyPrefixFirCrList());
      processMap.put("queryByRowkeyPrefixSec", new queryByRowkeyPrefixSec());
      processMap.put("queryByRowkeyPrefixSecCrList", new queryByRowkeyPrefixSecCrList());
      processMap.put("queryByRowkeyFou", new queryByRowkeyFou());
      processMap.put("queryByRowkeyFouCrList", new queryByRowkeyFouCrList());
      processMap.put("queryByRowkeyFiv", new queryByRowkeyFiv());
      processMap.put("queryByRowkeyFivCrList", new queryByRowkeyFivCrList());
      processMap.put("queryByRowkeySix", new queryByRowkeySix());
      processMap.put("queryByRowkeySixCrList", new queryByRowkeySixCrList());
      return processMap;
    }

    public static class queryByRowkeyFir<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyFir_args> {
      public queryByRowkeyFir() {
        super("queryByRowkeyFir");
      }

      public queryByRowkeyFir_args getEmptyArgsInstance() {
        return new queryByRowkeyFir_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyFir_result getResult(I iface, queryByRowkeyFir_args args) throws org.apache.thrift.TException {
        queryByRowkeyFir_result result = new queryByRowkeyFir_result();
        try {
          result.success = iface.queryByRowkeyFir(args.rowkey, args.tableNames, args.columnValueFilter, args.param);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyFirCrList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyFirCrList_args> {
      public queryByRowkeyFirCrList() {
        super("queryByRowkeyFirCrList");
      }

      public queryByRowkeyFirCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyFirCrList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyFirCrList_result getResult(I iface, queryByRowkeyFirCrList_args args) throws org.apache.thrift.TException {
        queryByRowkeyFirCrList_result result = new queryByRowkeyFirCrList_result();
        try {
          result.success = iface.queryByRowkeyFirCrList(args.rowkey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeySec<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeySec_args> {
      public queryByRowkeySec() {
        super("queryByRowkeySec");
      }

      public queryByRowkeySec_args getEmptyArgsInstance() {
        return new queryByRowkeySec_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeySec_result getResult(I iface, queryByRowkeySec_args args) throws org.apache.thrift.TException {
        queryByRowkeySec_result result = new queryByRowkeySec_result();
        try {
          result.success = iface.queryByRowkeySec(args.rowkey, args.tableNames, args.columnValueFilter, args.param, args.columnFilter);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeySecCrList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeySecCrList_args> {
      public queryByRowkeySecCrList() {
        super("queryByRowkeySecCrList");
      }

      public queryByRowkeySecCrList_args getEmptyArgsInstance() {
        return new queryByRowkeySecCrList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeySecCrList_result getResult(I iface, queryByRowkeySecCrList_args args) throws org.apache.thrift.TException {
        queryByRowkeySecCrList_result result = new queryByRowkeySecCrList_result();
        try {
          result.success = iface.queryByRowkeySecCrList(args.rowkey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param, args.columnFilter);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyThr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyThr_args> {
      public queryByRowkeyThr() {
        super("queryByRowkeyThr");
      }

      public queryByRowkeyThr_args getEmptyArgsInstance() {
        return new queryByRowkeyThr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyThr_result getResult(I iface, queryByRowkeyThr_args args) throws org.apache.thrift.TException {
        queryByRowkeyThr_result result = new queryByRowkeyThr_result();
        try {
          result.success = iface.queryByRowkeyThr(args.rowkey, args.tableNames, args.columnValueFilter, args.param);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyThrCrList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyThrCrList_args> {
      public queryByRowkeyThrCrList() {
        super("queryByRowkeyThrCrList");
      }

      public queryByRowkeyThrCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyThrCrList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyThrCrList_result getResult(I iface, queryByRowkeyThrCrList_args args) throws org.apache.thrift.TException {
        queryByRowkeyThrCrList_result result = new queryByRowkeyThrCrList_result();
        try {
          result.success = iface.queryByRowkeyThrCrList(args.rowkey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyPrefixFir<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyPrefixFir_args> {
      public queryByRowkeyPrefixFir() {
        super("queryByRowkeyPrefixFir");
      }

      public queryByRowkeyPrefixFir_args getEmptyArgsInstance() {
        return new queryByRowkeyPrefixFir_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyPrefixFir_result getResult(I iface, queryByRowkeyPrefixFir_args args) throws org.apache.thrift.TException {
        queryByRowkeyPrefixFir_result result = new queryByRowkeyPrefixFir_result();
        try {
          result.success = iface.queryByRowkeyPrefixFir(args.rowkeyPrefix, args.tableNames, args.columnValueFilter, args.param);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyPrefixFirCrList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyPrefixFirCrList_args> {
      public queryByRowkeyPrefixFirCrList() {
        super("queryByRowkeyPrefixFirCrList");
      }

      public queryByRowkeyPrefixFirCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyPrefixFirCrList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyPrefixFirCrList_result getResult(I iface, queryByRowkeyPrefixFirCrList_args args) throws org.apache.thrift.TException {
        queryByRowkeyPrefixFirCrList_result result = new queryByRowkeyPrefixFirCrList_result();
        try {
          result.success = iface.queryByRowkeyPrefixFirCrList(args.rowkeyPrefix, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyPrefixSec<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyPrefixSec_args> {
      public queryByRowkeyPrefixSec() {
        super("queryByRowkeyPrefixSec");
      }

      public queryByRowkeyPrefixSec_args getEmptyArgsInstance() {
        return new queryByRowkeyPrefixSec_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyPrefixSec_result getResult(I iface, queryByRowkeyPrefixSec_args args) throws org.apache.thrift.TException {
        queryByRowkeyPrefixSec_result result = new queryByRowkeyPrefixSec_result();
        try {
          result.success = iface.queryByRowkeyPrefixSec(args.rowkeyPrefix, args.tableNames, args.columnValueFilter, args.param, args.columnFilter);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyPrefixSecCrList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyPrefixSecCrList_args> {
      public queryByRowkeyPrefixSecCrList() {
        super("queryByRowkeyPrefixSecCrList");
      }

      public queryByRowkeyPrefixSecCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyPrefixSecCrList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyPrefixSecCrList_result getResult(I iface, queryByRowkeyPrefixSecCrList_args args) throws org.apache.thrift.TException {
        queryByRowkeyPrefixSecCrList_result result = new queryByRowkeyPrefixSecCrList_result();
        try {
          result.success = iface.queryByRowkeyPrefixSecCrList(args.rowkeyPrefix, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param, args.columnFilter);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyFou<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyFou_args> {
      public queryByRowkeyFou() {
        super("queryByRowkeyFou");
      }

      public queryByRowkeyFou_args getEmptyArgsInstance() {
        return new queryByRowkeyFou_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyFou_result getResult(I iface, queryByRowkeyFou_args args) throws org.apache.thrift.TException {
        queryByRowkeyFou_result result = new queryByRowkeyFou_result();
        try {
          result.success = iface.queryByRowkeyFou(args.rowkey, args.tableNames, args.columnValueFilter, args.param, args.columnFilter);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyFouCrList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyFouCrList_args> {
      public queryByRowkeyFouCrList() {
        super("queryByRowkeyFouCrList");
      }

      public queryByRowkeyFouCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyFouCrList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyFouCrList_result getResult(I iface, queryByRowkeyFouCrList_args args) throws org.apache.thrift.TException {
        queryByRowkeyFouCrList_result result = new queryByRowkeyFouCrList_result();
        try {
          result.success = iface.queryByRowkeyFouCrList(args.rowkey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param, args.columnFilter);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyFiv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyFiv_args> {
      public queryByRowkeyFiv() {
        super("queryByRowkeyFiv");
      }

      public queryByRowkeyFiv_args getEmptyArgsInstance() {
        return new queryByRowkeyFiv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyFiv_result getResult(I iface, queryByRowkeyFiv_args args) throws org.apache.thrift.TException {
        queryByRowkeyFiv_result result = new queryByRowkeyFiv_result();
        try {
          result.success = iface.queryByRowkeyFiv(args.startKey, args.stopKey, args.tableNames, args.columnValueFilter, args.param);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeyFivCrList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeyFivCrList_args> {
      public queryByRowkeyFivCrList() {
        super("queryByRowkeyFivCrList");
      }

      public queryByRowkeyFivCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyFivCrList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeyFivCrList_result getResult(I iface, queryByRowkeyFivCrList_args args) throws org.apache.thrift.TException {
        queryByRowkeyFivCrList_result result = new queryByRowkeyFivCrList_result();
        try {
          result.success = iface.queryByRowkeyFivCrList(args.startKey, args.stopKey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeySix<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeySix_args> {
      public queryByRowkeySix() {
        super("queryByRowkeySix");
      }

      public queryByRowkeySix_args getEmptyArgsInstance() {
        return new queryByRowkeySix_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeySix_result getResult(I iface, queryByRowkeySix_args args) throws org.apache.thrift.TException {
        queryByRowkeySix_result result = new queryByRowkeySix_result();
        try {
          result.success = iface.queryByRowkeySix(args.startKey, args.stopKey, args.tableNames, args.columnValueFilter, args.param, args.columnFilter);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

    public static class queryByRowkeySixCrList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByRowkeySixCrList_args> {
      public queryByRowkeySixCrList() {
        super("queryByRowkeySixCrList");
      }

      public queryByRowkeySixCrList_args getEmptyArgsInstance() {
        return new queryByRowkeySixCrList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByRowkeySixCrList_result getResult(I iface, queryByRowkeySixCrList_args args) throws org.apache.thrift.TException {
        queryByRowkeySixCrList_result result = new queryByRowkeySixCrList_result();
        try {
          result.success = iface.queryByRowkeySixCrList(args.startKey, args.stopKey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param, args.columnFilter);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
          result.clientExp = clientExp;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryByRowkeyFir", new queryByRowkeyFir());
      processMap.put("queryByRowkeyFirCrList", new queryByRowkeyFirCrList());
      processMap.put("queryByRowkeySec", new queryByRowkeySec());
      processMap.put("queryByRowkeySecCrList", new queryByRowkeySecCrList());
      processMap.put("queryByRowkeyThr", new queryByRowkeyThr());
      processMap.put("queryByRowkeyThrCrList", new queryByRowkeyThrCrList());
      processMap.put("queryByRowkeyPrefixFir", new queryByRowkeyPrefixFir());
      processMap.put("queryByRowkeyPrefixFirCrList", new queryByRowkeyPrefixFirCrList());
      processMap.put("queryByRowkeyPrefixSec", new queryByRowkeyPrefixSec());
      processMap.put("queryByRowkeyPrefixSecCrList", new queryByRowkeyPrefixSecCrList());
      processMap.put("queryByRowkeyFou", new queryByRowkeyFou());
      processMap.put("queryByRowkeyFouCrList", new queryByRowkeyFouCrList());
      processMap.put("queryByRowkeyFiv", new queryByRowkeyFiv());
      processMap.put("queryByRowkeyFivCrList", new queryByRowkeyFivCrList());
      processMap.put("queryByRowkeySix", new queryByRowkeySix());
      processMap.put("queryByRowkeySixCrList", new queryByRowkeySixCrList());
      return processMap;
    }

    public static class queryByRowkeyFir<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyFir_args, List<List<String>>> {
      public queryByRowkeyFir() {
        super("queryByRowkeyFir");
      }

      public queryByRowkeyFir_args getEmptyArgsInstance() {
        return new queryByRowkeyFir_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyFir_result result = new queryByRowkeyFir_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyFir_result result = new queryByRowkeyFir_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyFir_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyFir(args.rowkey, args.tableNames, args.columnValueFilter, args.param,resultHandler);
      }
    }

    public static class queryByRowkeyFirCrList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyFirCrList_args, List<List<String>>> {
      public queryByRowkeyFirCrList() {
        super("queryByRowkeyFirCrList");
      }

      public queryByRowkeyFirCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyFirCrList_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyFirCrList_result result = new queryByRowkeyFirCrList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyFirCrList_result result = new queryByRowkeyFirCrList_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyFirCrList_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyFirCrList(args.rowkey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param,resultHandler);
      }
    }

    public static class queryByRowkeySec<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeySec_args, List<List<String>>> {
      public queryByRowkeySec() {
        super("queryByRowkeySec");
      }

      public queryByRowkeySec_args getEmptyArgsInstance() {
        return new queryByRowkeySec_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeySec_result result = new queryByRowkeySec_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeySec_result result = new queryByRowkeySec_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeySec_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeySec(args.rowkey, args.tableNames, args.columnValueFilter, args.param, args.columnFilter,resultHandler);
      }
    }

    public static class queryByRowkeySecCrList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeySecCrList_args, List<List<String>>> {
      public queryByRowkeySecCrList() {
        super("queryByRowkeySecCrList");
      }

      public queryByRowkeySecCrList_args getEmptyArgsInstance() {
        return new queryByRowkeySecCrList_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeySecCrList_result result = new queryByRowkeySecCrList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeySecCrList_result result = new queryByRowkeySecCrList_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeySecCrList_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeySecCrList(args.rowkey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param, args.columnFilter,resultHandler);
      }
    }

    public static class queryByRowkeyThr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyThr_args, List<List<String>>> {
      public queryByRowkeyThr() {
        super("queryByRowkeyThr");
      }

      public queryByRowkeyThr_args getEmptyArgsInstance() {
        return new queryByRowkeyThr_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyThr_result result = new queryByRowkeyThr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyThr_result result = new queryByRowkeyThr_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyThr_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyThr(args.rowkey, args.tableNames, args.columnValueFilter, args.param,resultHandler);
      }
    }

    public static class queryByRowkeyThrCrList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyThrCrList_args, List<List<String>>> {
      public queryByRowkeyThrCrList() {
        super("queryByRowkeyThrCrList");
      }

      public queryByRowkeyThrCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyThrCrList_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyThrCrList_result result = new queryByRowkeyThrCrList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyThrCrList_result result = new queryByRowkeyThrCrList_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyThrCrList_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyThrCrList(args.rowkey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param,resultHandler);
      }
    }

    public static class queryByRowkeyPrefixFir<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyPrefixFir_args, List<List<String>>> {
      public queryByRowkeyPrefixFir() {
        super("queryByRowkeyPrefixFir");
      }

      public queryByRowkeyPrefixFir_args getEmptyArgsInstance() {
        return new queryByRowkeyPrefixFir_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyPrefixFir_result result = new queryByRowkeyPrefixFir_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyPrefixFir_result result = new queryByRowkeyPrefixFir_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyPrefixFir_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyPrefixFir(args.rowkeyPrefix, args.tableNames, args.columnValueFilter, args.param,resultHandler);
      }
    }

    public static class queryByRowkeyPrefixFirCrList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyPrefixFirCrList_args, List<List<String>>> {
      public queryByRowkeyPrefixFirCrList() {
        super("queryByRowkeyPrefixFirCrList");
      }

      public queryByRowkeyPrefixFirCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyPrefixFirCrList_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyPrefixFirCrList_result result = new queryByRowkeyPrefixFirCrList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyPrefixFirCrList_result result = new queryByRowkeyPrefixFirCrList_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyPrefixFirCrList_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyPrefixFirCrList(args.rowkeyPrefix, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param,resultHandler);
      }
    }

    public static class queryByRowkeyPrefixSec<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyPrefixSec_args, List<List<String>>> {
      public queryByRowkeyPrefixSec() {
        super("queryByRowkeyPrefixSec");
      }

      public queryByRowkeyPrefixSec_args getEmptyArgsInstance() {
        return new queryByRowkeyPrefixSec_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyPrefixSec_result result = new queryByRowkeyPrefixSec_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyPrefixSec_result result = new queryByRowkeyPrefixSec_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyPrefixSec_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyPrefixSec(args.rowkeyPrefix, args.tableNames, args.columnValueFilter, args.param, args.columnFilter,resultHandler);
      }
    }

    public static class queryByRowkeyPrefixSecCrList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyPrefixSecCrList_args, List<List<String>>> {
      public queryByRowkeyPrefixSecCrList() {
        super("queryByRowkeyPrefixSecCrList");
      }

      public queryByRowkeyPrefixSecCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyPrefixSecCrList_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyPrefixSecCrList_result result = new queryByRowkeyPrefixSecCrList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyPrefixSecCrList_result result = new queryByRowkeyPrefixSecCrList_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyPrefixSecCrList_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyPrefixSecCrList(args.rowkeyPrefix, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param, args.columnFilter,resultHandler);
      }
    }

    public static class queryByRowkeyFou<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyFou_args, List<List<String>>> {
      public queryByRowkeyFou() {
        super("queryByRowkeyFou");
      }

      public queryByRowkeyFou_args getEmptyArgsInstance() {
        return new queryByRowkeyFou_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyFou_result result = new queryByRowkeyFou_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyFou_result result = new queryByRowkeyFou_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyFou_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyFou(args.rowkey, args.tableNames, args.columnValueFilter, args.param, args.columnFilter,resultHandler);
      }
    }

    public static class queryByRowkeyFouCrList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyFouCrList_args, List<List<String>>> {
      public queryByRowkeyFouCrList() {
        super("queryByRowkeyFouCrList");
      }

      public queryByRowkeyFouCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyFouCrList_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyFouCrList_result result = new queryByRowkeyFouCrList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyFouCrList_result result = new queryByRowkeyFouCrList_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyFouCrList_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyFouCrList(args.rowkey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param, args.columnFilter,resultHandler);
      }
    }

    public static class queryByRowkeyFiv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyFiv_args, List<List<String>>> {
      public queryByRowkeyFiv() {
        super("queryByRowkeyFiv");
      }

      public queryByRowkeyFiv_args getEmptyArgsInstance() {
        return new queryByRowkeyFiv_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyFiv_result result = new queryByRowkeyFiv_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyFiv_result result = new queryByRowkeyFiv_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyFiv_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyFiv(args.startKey, args.stopKey, args.tableNames, args.columnValueFilter, args.param,resultHandler);
      }
    }

    public static class queryByRowkeyFivCrList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeyFivCrList_args, List<List<String>>> {
      public queryByRowkeyFivCrList() {
        super("queryByRowkeyFivCrList");
      }

      public queryByRowkeyFivCrList_args getEmptyArgsInstance() {
        return new queryByRowkeyFivCrList_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeyFivCrList_result result = new queryByRowkeyFivCrList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeyFivCrList_result result = new queryByRowkeyFivCrList_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeyFivCrList_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeyFivCrList(args.startKey, args.stopKey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param,resultHandler);
      }
    }

    public static class queryByRowkeySix<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeySix_args, List<List<String>>> {
      public queryByRowkeySix() {
        super("queryByRowkeySix");
      }

      public queryByRowkeySix_args getEmptyArgsInstance() {
        return new queryByRowkeySix_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeySix_result result = new queryByRowkeySix_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeySix_result result = new queryByRowkeySix_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeySix_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeySix(args.startKey, args.stopKey, args.tableNames, args.columnValueFilter, args.param, args.columnFilter,resultHandler);
      }
    }

    public static class queryByRowkeySixCrList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByRowkeySixCrList_args, List<List<String>>> {
      public queryByRowkeySixCrList() {
        super("queryByRowkeySixCrList");
      }

      public queryByRowkeySixCrList_args getEmptyArgsInstance() {
        return new queryByRowkeySixCrList_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            queryByRowkeySixCrList_result result = new queryByRowkeySixCrList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByRowkeySixCrList_result result = new queryByRowkeySixCrList_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) {
                        result.clientExp = (com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException) e;
                        result.setClientExpIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByRowkeySixCrList_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.queryByRowkeySixCrList(args.startKey, args.stopKey, args.tableNames, args.columnValueFilterList, args.logicalOpt, args.param, args.columnFilter,resultHandler);
      }
    }

  }

  public static class queryByRowkeyFir_args implements org.apache.thrift.TBase<queryByRowkeyFir_args, queryByRowkeyFir_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFir_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFir_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilter", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFir_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFir_argsTupleSchemeFactory());
    }

    public String rowkey; // required
    public List<String> tableNames; // required
    public String columnValueFilter; // required
    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER((short)3, "columnValueFilter"),
      PARAM((short)4, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER
            return COLUMN_VALUE_FILTER;
          case 4: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFir_args.class, metaDataMap);
    }

    public queryByRowkeyFir_args() {
    }

    public queryByRowkeyFir_args(
      String rowkey,
      List<String> tableNames,
      String columnValueFilter,
      Map<String,String> param)
    {
      this();
      this.rowkey = rowkey;
      this.tableNames = tableNames;
      this.columnValueFilter = columnValueFilter;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFir_args(queryByRowkeyFir_args other) {
      if (other.isSetRowkey()) {
        this.rowkey = other.rowkey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilter()) {
        this.columnValueFilter = other.columnValueFilter;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public queryByRowkeyFir_args deepCopy() {
      return new queryByRowkeyFir_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
      this.tableNames = null;
      this.columnValueFilter = null;
      this.param = null;
    }

    public String getRowkey() {
      return this.rowkey;
    }

    public queryByRowkeyFir_args setRowkey(String rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyFir_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public String getColumnValueFilter() {
      return this.columnValueFilter;
    }

    public queryByRowkeyFir_args setColumnValueFilter(String columnValueFilter) {
      this.columnValueFilter = columnValueFilter;
      return this;
    }

    public void unsetColumnValueFilter() {
      this.columnValueFilter = null;
    }

    /** Returns true if field columnValueFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilter() {
      return this.columnValueFilter != null;
    }

    public void setColumnValueFilterIsSet(boolean value) {
      if (!value) {
        this.columnValueFilter = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyFir_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER:
        if (value == null) {
          unsetColumnValueFilter();
        } else {
          setColumnValueFilter((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER:
        return getColumnValueFilter();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER:
        return isSetColumnValueFilter();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFir_args)
        return this.equals((queryByRowkeyFir_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyFir_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilter = true && this.isSetColumnValueFilter();
      boolean that_present_columnValueFilter = true && that.isSetColumnValueFilter();
      if (this_present_columnValueFilter || that_present_columnValueFilter) {
        if (!(this_present_columnValueFilter && that_present_columnValueFilter))
          return false;
        if (!this.columnValueFilter.equals(that.columnValueFilter))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFir_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(other.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, other.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilter()).compareTo(other.isSetColumnValueFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilter, other.columnValueFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFir_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilter:");
      if (this.columnValueFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFir_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFir_argsStandardScheme getScheme() {
        return new queryByRowkeyFir_argsStandardScheme();
      }
    }

    private static class queryByRowkeyFir_argsStandardScheme extends StandardScheme<queryByRowkeyFir_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkey = iprot.readString();
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2;
                    _elem2 = iprot.readString();
                    struct.tableNames.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.columnValueFilter = iprot.readString();
                struct.setColumnValueFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map3.size);
                  for (int _i4 = 0; _i4 < _map3.size; ++_i4)
                  {
                    String _key5;
                    String _val6;
                    _key5 = iprot.readString();
                    _val6 = iprot.readString();
                    struct.param.put(_key5, _val6);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFir_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          oprot.writeString(struct.rowkey);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter7 : struct.tableNames)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilter != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_FIELD_DESC);
          oprot.writeString(struct.columnValueFilter);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter8 : struct.param.entrySet())
            {
              oprot.writeString(_iter8.getKey());
              oprot.writeString(_iter8.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFir_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFir_argsTupleScheme getScheme() {
        return new queryByRowkeyFir_argsTupleScheme();
      }
    }

    private static class queryByRowkeyFir_argsTupleScheme extends TupleScheme<queryByRowkeyFir_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilter()) {
          optionals.set(2);
        }
        if (struct.isSetParam()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRowkey()) {
          oprot.writeString(struct.rowkey);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter9 : struct.tableNames)
            {
              oprot.writeString(_iter9);
            }
          }
        }
        if (struct.isSetColumnValueFilter()) {
          oprot.writeString(struct.columnValueFilter);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter10 : struct.param.entrySet())
            {
              oprot.writeString(_iter10.getKey());
              oprot.writeString(_iter10.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rowkey = iprot.readString();
          struct.setRowkeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list11.size);
            for (int _i12 = 0; _i12 < _list11.size; ++_i12)
            {
              String _elem13;
              _elem13 = iprot.readString();
              struct.tableNames.add(_elem13);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.columnValueFilter = iprot.readString();
          struct.setColumnValueFilterIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map14.size);
            for (int _i15 = 0; _i15 < _map14.size; ++_i15)
            {
              String _key16;
              String _val17;
              _key16 = iprot.readString();
              _val17 = iprot.readString();
              struct.param.put(_key16, _val17);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFir_result implements org.apache.thrift.TBase<queryByRowkeyFir_result, queryByRowkeyFir_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFir_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFir_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFir_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFir_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFir_result.class, metaDataMap);
    }

    public queryByRowkeyFir_result() {
    }

    public queryByRowkeyFir_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFir_result(queryByRowkeyFir_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyFir_result deepCopy() {
      return new queryByRowkeyFir_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyFir_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyFir_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFir_result)
        return this.equals((queryByRowkeyFir_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyFir_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFir_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFir_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFir_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFir_resultStandardScheme getScheme() {
        return new queryByRowkeyFir_resultStandardScheme();
      }
    }

    private static class queryByRowkeyFir_resultStandardScheme extends StandardScheme<queryByRowkeyFir_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list18.size);
                  for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                  {
                    List<String> _elem20;
                    {
                      org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                      _elem20 = new ArrayList<String>(_list21.size);
                      for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                      {
                        String _elem23;
                        _elem23 = iprot.readString();
                        _elem20.add(_elem23);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem20);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFir_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter24 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter24.size()));
                for (String _iter25 : _iter24)
                {
                  oprot.writeString(_iter25);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFir_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFir_resultTupleScheme getScheme() {
        return new queryByRowkeyFir_resultTupleScheme();
      }
    }

    private static class queryByRowkeyFir_resultTupleScheme extends TupleScheme<queryByRowkeyFir_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter26 : struct.success)
            {
              {
                oprot.writeI32(_iter26.size());
                for (String _iter27 : _iter26)
                {
                  oprot.writeString(_iter27);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list28.size);
            for (int _i29 = 0; _i29 < _list28.size; ++_i29)
            {
              List<String> _elem30;
              {
                org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem30 = new ArrayList<String>(_list31.size);
                for (int _i32 = 0; _i32 < _list31.size; ++_i32)
                {
                  String _elem33;
                  _elem33 = iprot.readString();
                  _elem30.add(_elem33);
                }
              }
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFirCrList_args implements org.apache.thrift.TBase<queryByRowkeyFirCrList_args, queryByRowkeyFirCrList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFirCrList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFirCrList_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilterList", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField LOGICAL_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("logicalOpt", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFirCrList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFirCrList_argsTupleSchemeFactory());
    }

    public String rowkey; // required
    public List<String> tableNames; // required
    public List<String> columnValueFilterList; // required
    public String logicalOpt; // required
    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER_LIST((short)3, "columnValueFilterList"),
      LOGICAL_OPT((short)4, "logicalOpt"),
      PARAM((short)5, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER_LIST
            return COLUMN_VALUE_FILTER_LIST;
          case 4: // LOGICAL_OPT
            return LOGICAL_OPT;
          case 5: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOGICAL_OPT, new org.apache.thrift.meta_data.FieldMetaData("logicalOpt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFirCrList_args.class, metaDataMap);
    }

    public queryByRowkeyFirCrList_args() {
    }

    public queryByRowkeyFirCrList_args(
      String rowkey,
      List<String> tableNames,
      List<String> columnValueFilterList,
      String logicalOpt,
      Map<String,String> param)
    {
      this();
      this.rowkey = rowkey;
      this.tableNames = tableNames;
      this.columnValueFilterList = columnValueFilterList;
      this.logicalOpt = logicalOpt;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFirCrList_args(queryByRowkeyFirCrList_args other) {
      if (other.isSetRowkey()) {
        this.rowkey = other.rowkey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilterList()) {
        List<String> __this__columnValueFilterList = new ArrayList<String>(other.columnValueFilterList);
        this.columnValueFilterList = __this__columnValueFilterList;
      }
      if (other.isSetLogicalOpt()) {
        this.logicalOpt = other.logicalOpt;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public queryByRowkeyFirCrList_args deepCopy() {
      return new queryByRowkeyFirCrList_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
      this.tableNames = null;
      this.columnValueFilterList = null;
      this.logicalOpt = null;
      this.param = null;
    }

    public String getRowkey() {
      return this.rowkey;
    }

    public queryByRowkeyFirCrList_args setRowkey(String rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyFirCrList_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public int getColumnValueFilterListSize() {
      return (this.columnValueFilterList == null) ? 0 : this.columnValueFilterList.size();
    }

    public java.util.Iterator<String> getColumnValueFilterListIterator() {
      return (this.columnValueFilterList == null) ? null : this.columnValueFilterList.iterator();
    }

    public void addToColumnValueFilterList(String elem) {
      if (this.columnValueFilterList == null) {
        this.columnValueFilterList = new ArrayList<String>();
      }
      this.columnValueFilterList.add(elem);
    }

    public List<String> getColumnValueFilterList() {
      return this.columnValueFilterList;
    }

    public queryByRowkeyFirCrList_args setColumnValueFilterList(List<String> columnValueFilterList) {
      this.columnValueFilterList = columnValueFilterList;
      return this;
    }

    public void unsetColumnValueFilterList() {
      this.columnValueFilterList = null;
    }

    /** Returns true if field columnValueFilterList is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilterList() {
      return this.columnValueFilterList != null;
    }

    public void setColumnValueFilterListIsSet(boolean value) {
      if (!value) {
        this.columnValueFilterList = null;
      }
    }

    public String getLogicalOpt() {
      return this.logicalOpt;
    }

    public queryByRowkeyFirCrList_args setLogicalOpt(String logicalOpt) {
      this.logicalOpt = logicalOpt;
      return this;
    }

    public void unsetLogicalOpt() {
      this.logicalOpt = null;
    }

    /** Returns true if field logicalOpt is set (has been assigned a value) and false otherwise */
    public boolean isSetLogicalOpt() {
      return this.logicalOpt != null;
    }

    public void setLogicalOptIsSet(boolean value) {
      if (!value) {
        this.logicalOpt = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyFirCrList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER_LIST:
        if (value == null) {
          unsetColumnValueFilterList();
        } else {
          setColumnValueFilterList((List<String>)value);
        }
        break;

      case LOGICAL_OPT:
        if (value == null) {
          unsetLogicalOpt();
        } else {
          setLogicalOpt((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER_LIST:
        return getColumnValueFilterList();

      case LOGICAL_OPT:
        return getLogicalOpt();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER_LIST:
        return isSetColumnValueFilterList();
      case LOGICAL_OPT:
        return isSetLogicalOpt();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFirCrList_args)
        return this.equals((queryByRowkeyFirCrList_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyFirCrList_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilterList = true && this.isSetColumnValueFilterList();
      boolean that_present_columnValueFilterList = true && that.isSetColumnValueFilterList();
      if (this_present_columnValueFilterList || that_present_columnValueFilterList) {
        if (!(this_present_columnValueFilterList && that_present_columnValueFilterList))
          return false;
        if (!this.columnValueFilterList.equals(that.columnValueFilterList))
          return false;
      }

      boolean this_present_logicalOpt = true && this.isSetLogicalOpt();
      boolean that_present_logicalOpt = true && that.isSetLogicalOpt();
      if (this_present_logicalOpt || that_present_logicalOpt) {
        if (!(this_present_logicalOpt && that_present_logicalOpt))
          return false;
        if (!this.logicalOpt.equals(that.logicalOpt))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFirCrList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(other.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, other.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilterList()).compareTo(other.isSetColumnValueFilterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilterList, other.columnValueFilterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogicalOpt()).compareTo(other.isSetLogicalOpt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogicalOpt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicalOpt, other.logicalOpt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFirCrList_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilterList:");
      if (this.columnValueFilterList == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logicalOpt:");
      if (this.logicalOpt == null) {
        sb.append("null");
      } else {
        sb.append(this.logicalOpt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFirCrList_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFirCrList_argsStandardScheme getScheme() {
        return new queryByRowkeyFirCrList_argsStandardScheme();
      }
    }

    private static class queryByRowkeyFirCrList_argsStandardScheme extends StandardScheme<queryByRowkeyFirCrList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFirCrList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkey = iprot.readString();
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list34.size);
                  for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                  {
                    String _elem36;
                    _elem36 = iprot.readString();
                    struct.tableNames.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                  struct.columnValueFilterList = new ArrayList<String>(_list37.size);
                  for (int _i38 = 0; _i38 < _list37.size; ++_i38)
                  {
                    String _elem39;
                    _elem39 = iprot.readString();
                    struct.columnValueFilterList.add(_elem39);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnValueFilterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOGICAL_OPT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logicalOpt = iprot.readString();
                struct.setLogicalOptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map40.size);
                  for (int _i41 = 0; _i41 < _map40.size; ++_i41)
                  {
                    String _key42;
                    String _val43;
                    _key42 = iprot.readString();
                    _val43 = iprot.readString();
                    struct.param.put(_key42, _val43);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFirCrList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          oprot.writeString(struct.rowkey);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter44 : struct.tableNames)
            {
              oprot.writeString(_iter44);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilterList != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnValueFilterList.size()));
            for (String _iter45 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.logicalOpt != null) {
          oprot.writeFieldBegin(LOGICAL_OPT_FIELD_DESC);
          oprot.writeString(struct.logicalOpt);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter46 : struct.param.entrySet())
            {
              oprot.writeString(_iter46.getKey());
              oprot.writeString(_iter46.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFirCrList_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFirCrList_argsTupleScheme getScheme() {
        return new queryByRowkeyFirCrList_argsTupleScheme();
      }
    }

    private static class queryByRowkeyFirCrList_argsTupleScheme extends TupleScheme<queryByRowkeyFirCrList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFirCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilterList()) {
          optionals.set(2);
        }
        if (struct.isSetLogicalOpt()) {
          optionals.set(3);
        }
        if (struct.isSetParam()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRowkey()) {
          oprot.writeString(struct.rowkey);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter47 : struct.tableNames)
            {
              oprot.writeString(_iter47);
            }
          }
        }
        if (struct.isSetColumnValueFilterList()) {
          {
            oprot.writeI32(struct.columnValueFilterList.size());
            for (String _iter48 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter48);
            }
          }
        }
        if (struct.isSetLogicalOpt()) {
          oprot.writeString(struct.logicalOpt);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter49 : struct.param.entrySet())
            {
              oprot.writeString(_iter49.getKey());
              oprot.writeString(_iter49.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFirCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.rowkey = iprot.readString();
          struct.setRowkeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list50.size);
            for (int _i51 = 0; _i51 < _list50.size; ++_i51)
            {
              String _elem52;
              _elem52 = iprot.readString();
              struct.tableNames.add(_elem52);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columnValueFilterList = new ArrayList<String>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              String _elem55;
              _elem55 = iprot.readString();
              struct.columnValueFilterList.add(_elem55);
            }
          }
          struct.setColumnValueFilterListIsSet(true);
        }
        if (incoming.get(3)) {
          struct.logicalOpt = iprot.readString();
          struct.setLogicalOptIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map56.size);
            for (int _i57 = 0; _i57 < _map56.size; ++_i57)
            {
              String _key58;
              String _val59;
              _key58 = iprot.readString();
              _val59 = iprot.readString();
              struct.param.put(_key58, _val59);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFirCrList_result implements org.apache.thrift.TBase<queryByRowkeyFirCrList_result, queryByRowkeyFirCrList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFirCrList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFirCrList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFirCrList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFirCrList_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFirCrList_result.class, metaDataMap);
    }

    public queryByRowkeyFirCrList_result() {
    }

    public queryByRowkeyFirCrList_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFirCrList_result(queryByRowkeyFirCrList_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyFirCrList_result deepCopy() {
      return new queryByRowkeyFirCrList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyFirCrList_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyFirCrList_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFirCrList_result)
        return this.equals((queryByRowkeyFirCrList_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyFirCrList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFirCrList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFirCrList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFirCrList_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFirCrList_resultStandardScheme getScheme() {
        return new queryByRowkeyFirCrList_resultStandardScheme();
      }
    }

    private static class queryByRowkeyFirCrList_resultStandardScheme extends StandardScheme<queryByRowkeyFirCrList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFirCrList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list60.size);
                  for (int _i61 = 0; _i61 < _list60.size; ++_i61)
                  {
                    List<String> _elem62;
                    {
                      org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
                      _elem62 = new ArrayList<String>(_list63.size);
                      for (int _i64 = 0; _i64 < _list63.size; ++_i64)
                      {
                        String _elem65;
                        _elem65 = iprot.readString();
                        _elem62.add(_elem65);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem62);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFirCrList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter66 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter66.size()));
                for (String _iter67 : _iter66)
                {
                  oprot.writeString(_iter67);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFirCrList_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFirCrList_resultTupleScheme getScheme() {
        return new queryByRowkeyFirCrList_resultTupleScheme();
      }
    }

    private static class queryByRowkeyFirCrList_resultTupleScheme extends TupleScheme<queryByRowkeyFirCrList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFirCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter68 : struct.success)
            {
              {
                oprot.writeI32(_iter68.size());
                for (String _iter69 : _iter68)
                {
                  oprot.writeString(_iter69);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFirCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list70 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list70.size);
            for (int _i71 = 0; _i71 < _list70.size; ++_i71)
            {
              List<String> _elem72;
              {
                org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem72 = new ArrayList<String>(_list73.size);
                for (int _i74 = 0; _i74 < _list73.size; ++_i74)
                {
                  String _elem75;
                  _elem75 = iprot.readString();
                  _elem72.add(_elem75);
                }
              }
              struct.success.add(_elem72);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeySec_args implements org.apache.thrift.TBase<queryByRowkeySec_args, queryByRowkeySec_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeySec_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeySec_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilter", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField COLUMN_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnFilter", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeySec_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeySec_argsTupleSchemeFactory());
    }

    public String rowkey; // required
    public List<String> tableNames; // required
    public String columnValueFilter; // required
    public Map<String,String> param; // required
    public Map<String,List<String>> columnFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER((short)3, "columnValueFilter"),
      PARAM((short)4, "param"),
      COLUMN_FILTER((short)5, "columnFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER
            return COLUMN_VALUE_FILTER;
          case 4: // PARAM
            return PARAM;
          case 5: // COLUMN_FILTER
            return COLUMN_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeySec_args.class, metaDataMap);
    }

    public queryByRowkeySec_args() {
    }

    public queryByRowkeySec_args(
      String rowkey,
      List<String> tableNames,
      String columnValueFilter,
      Map<String,String> param,
      Map<String,List<String>> columnFilter)
    {
      this();
      this.rowkey = rowkey;
      this.tableNames = tableNames;
      this.columnValueFilter = columnValueFilter;
      this.param = param;
      this.columnFilter = columnFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeySec_args(queryByRowkeySec_args other) {
      if (other.isSetRowkey()) {
        this.rowkey = other.rowkey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilter()) {
        this.columnValueFilter = other.columnValueFilter;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
      if (other.isSetColumnFilter()) {
        Map<String,List<String>> __this__columnFilter = new HashMap<String,List<String>>(other.columnFilter.size());
        for (Map.Entry<String, List<String>> other_element : other.columnFilter.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__columnFilter_copy_key = other_element_key;

          List<String> __this__columnFilter_copy_value = new ArrayList<String>(other_element_value);

          __this__columnFilter.put(__this__columnFilter_copy_key, __this__columnFilter_copy_value);
        }
        this.columnFilter = __this__columnFilter;
      }
    }

    public queryByRowkeySec_args deepCopy() {
      return new queryByRowkeySec_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
      this.tableNames = null;
      this.columnValueFilter = null;
      this.param = null;
      this.columnFilter = null;
    }

    public String getRowkey() {
      return this.rowkey;
    }

    public queryByRowkeySec_args setRowkey(String rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeySec_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public String getColumnValueFilter() {
      return this.columnValueFilter;
    }

    public queryByRowkeySec_args setColumnValueFilter(String columnValueFilter) {
      this.columnValueFilter = columnValueFilter;
      return this;
    }

    public void unsetColumnValueFilter() {
      this.columnValueFilter = null;
    }

    /** Returns true if field columnValueFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilter() {
      return this.columnValueFilter != null;
    }

    public void setColumnValueFilterIsSet(boolean value) {
      if (!value) {
        this.columnValueFilter = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeySec_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public int getColumnFilterSize() {
      return (this.columnFilter == null) ? 0 : this.columnFilter.size();
    }

    public void putToColumnFilter(String key, List<String> val) {
      if (this.columnFilter == null) {
        this.columnFilter = new HashMap<String,List<String>>();
      }
      this.columnFilter.put(key, val);
    }

    public Map<String,List<String>> getColumnFilter() {
      return this.columnFilter;
    }

    public queryByRowkeySec_args setColumnFilter(Map<String,List<String>> columnFilter) {
      this.columnFilter = columnFilter;
      return this;
    }

    public void unsetColumnFilter() {
      this.columnFilter = null;
    }

    /** Returns true if field columnFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnFilter() {
      return this.columnFilter != null;
    }

    public void setColumnFilterIsSet(boolean value) {
      if (!value) {
        this.columnFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER:
        if (value == null) {
          unsetColumnValueFilter();
        } else {
          setColumnValueFilter((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      case COLUMN_FILTER:
        if (value == null) {
          unsetColumnFilter();
        } else {
          setColumnFilter((Map<String,List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER:
        return getColumnValueFilter();

      case PARAM:
        return getParam();

      case COLUMN_FILTER:
        return getColumnFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER:
        return isSetColumnValueFilter();
      case PARAM:
        return isSetParam();
      case COLUMN_FILTER:
        return isSetColumnFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeySec_args)
        return this.equals((queryByRowkeySec_args)that);
      return false;
    }

    public boolean equals(queryByRowkeySec_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilter = true && this.isSetColumnValueFilter();
      boolean that_present_columnValueFilter = true && that.isSetColumnValueFilter();
      if (this_present_columnValueFilter || that_present_columnValueFilter) {
        if (!(this_present_columnValueFilter && that_present_columnValueFilter))
          return false;
        if (!this.columnValueFilter.equals(that.columnValueFilter))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      boolean this_present_columnFilter = true && this.isSetColumnFilter();
      boolean that_present_columnFilter = true && that.isSetColumnFilter();
      if (this_present_columnFilter || that_present_columnFilter) {
        if (!(this_present_columnFilter && that_present_columnFilter))
          return false;
        if (!this.columnFilter.equals(that.columnFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeySec_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(other.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, other.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilter()).compareTo(other.isSetColumnValueFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilter, other.columnValueFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnFilter()).compareTo(other.isSetColumnFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFilter, other.columnFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeySec_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilter:");
      if (this.columnValueFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnFilter:");
      if (this.columnFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeySec_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeySec_argsStandardScheme getScheme() {
        return new queryByRowkeySec_argsStandardScheme();
      }
    }

    private static class queryByRowkeySec_argsStandardScheme extends StandardScheme<queryByRowkeySec_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeySec_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkey = iprot.readString();
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list76.size);
                  for (int _i77 = 0; _i77 < _list76.size; ++_i77)
                  {
                    String _elem78;
                    _elem78 = iprot.readString();
                    struct.tableNames.add(_elem78);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.columnValueFilter = iprot.readString();
                struct.setColumnValueFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map79 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map79.size);
                  for (int _i80 = 0; _i80 < _map79.size; ++_i80)
                  {
                    String _key81;
                    String _val82;
                    _key81 = iprot.readString();
                    _val82 = iprot.readString();
                    struct.param.put(_key81, _val82);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COLUMN_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map83 = iprot.readMapBegin();
                  struct.columnFilter = new HashMap<String,List<String>>(2*_map83.size);
                  for (int _i84 = 0; _i84 < _map83.size; ++_i84)
                  {
                    String _key85;
                    List<String> _val86;
                    _key85 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list87 = iprot.readListBegin();
                      _val86 = new ArrayList<String>(_list87.size);
                      for (int _i88 = 0; _i88 < _list87.size; ++_i88)
                      {
                        String _elem89;
                        _elem89 = iprot.readString();
                        _val86.add(_elem89);
                      }
                      iprot.readListEnd();
                    }
                    struct.columnFilter.put(_key85, _val86);
                  }
                  iprot.readMapEnd();
                }
                struct.setColumnFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeySec_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          oprot.writeString(struct.rowkey);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter90 : struct.tableNames)
            {
              oprot.writeString(_iter90);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilter != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_FIELD_DESC);
          oprot.writeString(struct.columnValueFilter);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter91 : struct.param.entrySet())
            {
              oprot.writeString(_iter91.getKey());
              oprot.writeString(_iter91.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnFilter != null) {
          oprot.writeFieldBegin(COLUMN_FILTER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.columnFilter.size()));
            for (Map.Entry<String, List<String>> _iter92 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter92.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter92.getValue().size()));
                for (String _iter93 : _iter92.getValue())
                {
                  oprot.writeString(_iter93);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeySec_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeySec_argsTupleScheme getScheme() {
        return new queryByRowkeySec_argsTupleScheme();
      }
    }

    private static class queryByRowkeySec_argsTupleScheme extends TupleScheme<queryByRowkeySec_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilter()) {
          optionals.set(2);
        }
        if (struct.isSetParam()) {
          optionals.set(3);
        }
        if (struct.isSetColumnFilter()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRowkey()) {
          oprot.writeString(struct.rowkey);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter94 : struct.tableNames)
            {
              oprot.writeString(_iter94);
            }
          }
        }
        if (struct.isSetColumnValueFilter()) {
          oprot.writeString(struct.columnValueFilter);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter95 : struct.param.entrySet())
            {
              oprot.writeString(_iter95.getKey());
              oprot.writeString(_iter95.getValue());
            }
          }
        }
        if (struct.isSetColumnFilter()) {
          {
            oprot.writeI32(struct.columnFilter.size());
            for (Map.Entry<String, List<String>> _iter96 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter96.getKey());
              {
                oprot.writeI32(_iter96.getValue().size());
                for (String _iter97 : _iter96.getValue())
                {
                  oprot.writeString(_iter97);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.rowkey = iprot.readString();
          struct.setRowkeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list98.size);
            for (int _i99 = 0; _i99 < _list98.size; ++_i99)
            {
              String _elem100;
              _elem100 = iprot.readString();
              struct.tableNames.add(_elem100);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.columnValueFilter = iprot.readString();
          struct.setColumnValueFilterIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map101 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map101.size);
            for (int _i102 = 0; _i102 < _map101.size; ++_i102)
            {
              String _key103;
              String _val104;
              _key103 = iprot.readString();
              _val104 = iprot.readString();
              struct.param.put(_key103, _val104);
            }
          }
          struct.setParamIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map105 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.columnFilter = new HashMap<String,List<String>>(2*_map105.size);
            for (int _i106 = 0; _i106 < _map105.size; ++_i106)
            {
              String _key107;
              List<String> _val108;
              _key107 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val108 = new ArrayList<String>(_list109.size);
                for (int _i110 = 0; _i110 < _list109.size; ++_i110)
                {
                  String _elem111;
                  _elem111 = iprot.readString();
                  _val108.add(_elem111);
                }
              }
              struct.columnFilter.put(_key107, _val108);
            }
          }
          struct.setColumnFilterIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeySec_result implements org.apache.thrift.TBase<queryByRowkeySec_result, queryByRowkeySec_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeySec_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeySec_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeySec_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeySec_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeySec_result.class, metaDataMap);
    }

    public queryByRowkeySec_result() {
    }

    public queryByRowkeySec_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeySec_result(queryByRowkeySec_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeySec_result deepCopy() {
      return new queryByRowkeySec_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeySec_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeySec_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeySec_result)
        return this.equals((queryByRowkeySec_result)that);
      return false;
    }

    public boolean equals(queryByRowkeySec_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeySec_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeySec_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeySec_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeySec_resultStandardScheme getScheme() {
        return new queryByRowkeySec_resultStandardScheme();
      }
    }

    private static class queryByRowkeySec_resultStandardScheme extends StandardScheme<queryByRowkeySec_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeySec_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    List<String> _elem114;
                    {
                      org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                      _elem114 = new ArrayList<String>(_list115.size);
                      for (int _i116 = 0; _i116 < _list115.size; ++_i116)
                      {
                        String _elem117;
                        _elem117 = iprot.readString();
                        _elem114.add(_elem117);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeySec_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter118 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter118.size()));
                for (String _iter119 : _iter118)
                {
                  oprot.writeString(_iter119);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeySec_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeySec_resultTupleScheme getScheme() {
        return new queryByRowkeySec_resultTupleScheme();
      }
    }

    private static class queryByRowkeySec_resultTupleScheme extends TupleScheme<queryByRowkeySec_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter120 : struct.success)
            {
              {
                oprot.writeI32(_iter120.size());
                for (String _iter121 : _iter120)
                {
                  oprot.writeString(_iter121);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list122.size);
            for (int _i123 = 0; _i123 < _list122.size; ++_i123)
            {
              List<String> _elem124;
              {
                org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem124 = new ArrayList<String>(_list125.size);
                for (int _i126 = 0; _i126 < _list125.size; ++_i126)
                {
                  String _elem127;
                  _elem127 = iprot.readString();
                  _elem124.add(_elem127);
                }
              }
              struct.success.add(_elem124);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeySecCrList_args implements org.apache.thrift.TBase<queryByRowkeySecCrList_args, queryByRowkeySecCrList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeySecCrList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeySecCrList_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilterList", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField LOGICAL_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("logicalOpt", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)5);
    private static final org.apache.thrift.protocol.TField COLUMN_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnFilter", org.apache.thrift.protocol.TType.MAP, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeySecCrList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeySecCrList_argsTupleSchemeFactory());
    }

    public String rowkey; // required
    public List<String> tableNames; // required
    public List<String> columnValueFilterList; // required
    public String logicalOpt; // required
    public Map<String,String> param; // required
    public Map<String,List<String>> columnFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER_LIST((short)3, "columnValueFilterList"),
      LOGICAL_OPT((short)4, "logicalOpt"),
      PARAM((short)5, "param"),
      COLUMN_FILTER((short)6, "columnFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER_LIST
            return COLUMN_VALUE_FILTER_LIST;
          case 4: // LOGICAL_OPT
            return LOGICAL_OPT;
          case 5: // PARAM
            return PARAM;
          case 6: // COLUMN_FILTER
            return COLUMN_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOGICAL_OPT, new org.apache.thrift.meta_data.FieldMetaData("logicalOpt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeySecCrList_args.class, metaDataMap);
    }

    public queryByRowkeySecCrList_args() {
    }

    public queryByRowkeySecCrList_args(
      String rowkey,
      List<String> tableNames,
      List<String> columnValueFilterList,
      String logicalOpt,
      Map<String,String> param,
      Map<String,List<String>> columnFilter)
    {
      this();
      this.rowkey = rowkey;
      this.tableNames = tableNames;
      this.columnValueFilterList = columnValueFilterList;
      this.logicalOpt = logicalOpt;
      this.param = param;
      this.columnFilter = columnFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeySecCrList_args(queryByRowkeySecCrList_args other) {
      if (other.isSetRowkey()) {
        this.rowkey = other.rowkey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilterList()) {
        List<String> __this__columnValueFilterList = new ArrayList<String>(other.columnValueFilterList);
        this.columnValueFilterList = __this__columnValueFilterList;
      }
      if (other.isSetLogicalOpt()) {
        this.logicalOpt = other.logicalOpt;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
      if (other.isSetColumnFilter()) {
        Map<String,List<String>> __this__columnFilter = new HashMap<String,List<String>>(other.columnFilter.size());
        for (Map.Entry<String, List<String>> other_element : other.columnFilter.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__columnFilter_copy_key = other_element_key;

          List<String> __this__columnFilter_copy_value = new ArrayList<String>(other_element_value);

          __this__columnFilter.put(__this__columnFilter_copy_key, __this__columnFilter_copy_value);
        }
        this.columnFilter = __this__columnFilter;
      }
    }

    public queryByRowkeySecCrList_args deepCopy() {
      return new queryByRowkeySecCrList_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
      this.tableNames = null;
      this.columnValueFilterList = null;
      this.logicalOpt = null;
      this.param = null;
      this.columnFilter = null;
    }

    public String getRowkey() {
      return this.rowkey;
    }

    public queryByRowkeySecCrList_args setRowkey(String rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeySecCrList_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public int getColumnValueFilterListSize() {
      return (this.columnValueFilterList == null) ? 0 : this.columnValueFilterList.size();
    }

    public java.util.Iterator<String> getColumnValueFilterListIterator() {
      return (this.columnValueFilterList == null) ? null : this.columnValueFilterList.iterator();
    }

    public void addToColumnValueFilterList(String elem) {
      if (this.columnValueFilterList == null) {
        this.columnValueFilterList = new ArrayList<String>();
      }
      this.columnValueFilterList.add(elem);
    }

    public List<String> getColumnValueFilterList() {
      return this.columnValueFilterList;
    }

    public queryByRowkeySecCrList_args setColumnValueFilterList(List<String> columnValueFilterList) {
      this.columnValueFilterList = columnValueFilterList;
      return this;
    }

    public void unsetColumnValueFilterList() {
      this.columnValueFilterList = null;
    }

    /** Returns true if field columnValueFilterList is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilterList() {
      return this.columnValueFilterList != null;
    }

    public void setColumnValueFilterListIsSet(boolean value) {
      if (!value) {
        this.columnValueFilterList = null;
      }
    }

    public String getLogicalOpt() {
      return this.logicalOpt;
    }

    public queryByRowkeySecCrList_args setLogicalOpt(String logicalOpt) {
      this.logicalOpt = logicalOpt;
      return this;
    }

    public void unsetLogicalOpt() {
      this.logicalOpt = null;
    }

    /** Returns true if field logicalOpt is set (has been assigned a value) and false otherwise */
    public boolean isSetLogicalOpt() {
      return this.logicalOpt != null;
    }

    public void setLogicalOptIsSet(boolean value) {
      if (!value) {
        this.logicalOpt = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeySecCrList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public int getColumnFilterSize() {
      return (this.columnFilter == null) ? 0 : this.columnFilter.size();
    }

    public void putToColumnFilter(String key, List<String> val) {
      if (this.columnFilter == null) {
        this.columnFilter = new HashMap<String,List<String>>();
      }
      this.columnFilter.put(key, val);
    }

    public Map<String,List<String>> getColumnFilter() {
      return this.columnFilter;
    }

    public queryByRowkeySecCrList_args setColumnFilter(Map<String,List<String>> columnFilter) {
      this.columnFilter = columnFilter;
      return this;
    }

    public void unsetColumnFilter() {
      this.columnFilter = null;
    }

    /** Returns true if field columnFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnFilter() {
      return this.columnFilter != null;
    }

    public void setColumnFilterIsSet(boolean value) {
      if (!value) {
        this.columnFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER_LIST:
        if (value == null) {
          unsetColumnValueFilterList();
        } else {
          setColumnValueFilterList((List<String>)value);
        }
        break;

      case LOGICAL_OPT:
        if (value == null) {
          unsetLogicalOpt();
        } else {
          setLogicalOpt((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      case COLUMN_FILTER:
        if (value == null) {
          unsetColumnFilter();
        } else {
          setColumnFilter((Map<String,List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER_LIST:
        return getColumnValueFilterList();

      case LOGICAL_OPT:
        return getLogicalOpt();

      case PARAM:
        return getParam();

      case COLUMN_FILTER:
        return getColumnFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER_LIST:
        return isSetColumnValueFilterList();
      case LOGICAL_OPT:
        return isSetLogicalOpt();
      case PARAM:
        return isSetParam();
      case COLUMN_FILTER:
        return isSetColumnFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeySecCrList_args)
        return this.equals((queryByRowkeySecCrList_args)that);
      return false;
    }

    public boolean equals(queryByRowkeySecCrList_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilterList = true && this.isSetColumnValueFilterList();
      boolean that_present_columnValueFilterList = true && that.isSetColumnValueFilterList();
      if (this_present_columnValueFilterList || that_present_columnValueFilterList) {
        if (!(this_present_columnValueFilterList && that_present_columnValueFilterList))
          return false;
        if (!this.columnValueFilterList.equals(that.columnValueFilterList))
          return false;
      }

      boolean this_present_logicalOpt = true && this.isSetLogicalOpt();
      boolean that_present_logicalOpt = true && that.isSetLogicalOpt();
      if (this_present_logicalOpt || that_present_logicalOpt) {
        if (!(this_present_logicalOpt && that_present_logicalOpt))
          return false;
        if (!this.logicalOpt.equals(that.logicalOpt))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      boolean this_present_columnFilter = true && this.isSetColumnFilter();
      boolean that_present_columnFilter = true && that.isSetColumnFilter();
      if (this_present_columnFilter || that_present_columnFilter) {
        if (!(this_present_columnFilter && that_present_columnFilter))
          return false;
        if (!this.columnFilter.equals(that.columnFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeySecCrList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(other.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, other.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilterList()).compareTo(other.isSetColumnValueFilterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilterList, other.columnValueFilterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogicalOpt()).compareTo(other.isSetLogicalOpt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogicalOpt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicalOpt, other.logicalOpt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnFilter()).compareTo(other.isSetColumnFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFilter, other.columnFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeySecCrList_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilterList:");
      if (this.columnValueFilterList == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logicalOpt:");
      if (this.logicalOpt == null) {
        sb.append("null");
      } else {
        sb.append(this.logicalOpt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnFilter:");
      if (this.columnFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeySecCrList_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeySecCrList_argsStandardScheme getScheme() {
        return new queryByRowkeySecCrList_argsStandardScheme();
      }
    }

    private static class queryByRowkeySecCrList_argsStandardScheme extends StandardScheme<queryByRowkeySecCrList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeySecCrList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkey = iprot.readString();
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list128.size);
                  for (int _i129 = 0; _i129 < _list128.size; ++_i129)
                  {
                    String _elem130;
                    _elem130 = iprot.readString();
                    struct.tableNames.add(_elem130);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                  struct.columnValueFilterList = new ArrayList<String>(_list131.size);
                  for (int _i132 = 0; _i132 < _list131.size; ++_i132)
                  {
                    String _elem133;
                    _elem133 = iprot.readString();
                    struct.columnValueFilterList.add(_elem133);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnValueFilterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOGICAL_OPT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logicalOpt = iprot.readString();
                struct.setLogicalOptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map134 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map134.size);
                  for (int _i135 = 0; _i135 < _map134.size; ++_i135)
                  {
                    String _key136;
                    String _val137;
                    _key136 = iprot.readString();
                    _val137 = iprot.readString();
                    struct.param.put(_key136, _val137);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COLUMN_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map138 = iprot.readMapBegin();
                  struct.columnFilter = new HashMap<String,List<String>>(2*_map138.size);
                  for (int _i139 = 0; _i139 < _map138.size; ++_i139)
                  {
                    String _key140;
                    List<String> _val141;
                    _key140 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                      _val141 = new ArrayList<String>(_list142.size);
                      for (int _i143 = 0; _i143 < _list142.size; ++_i143)
                      {
                        String _elem144;
                        _elem144 = iprot.readString();
                        _val141.add(_elem144);
                      }
                      iprot.readListEnd();
                    }
                    struct.columnFilter.put(_key140, _val141);
                  }
                  iprot.readMapEnd();
                }
                struct.setColumnFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeySecCrList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          oprot.writeString(struct.rowkey);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter145 : struct.tableNames)
            {
              oprot.writeString(_iter145);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilterList != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnValueFilterList.size()));
            for (String _iter146 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter146);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.logicalOpt != null) {
          oprot.writeFieldBegin(LOGICAL_OPT_FIELD_DESC);
          oprot.writeString(struct.logicalOpt);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter147 : struct.param.entrySet())
            {
              oprot.writeString(_iter147.getKey());
              oprot.writeString(_iter147.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnFilter != null) {
          oprot.writeFieldBegin(COLUMN_FILTER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.columnFilter.size()));
            for (Map.Entry<String, List<String>> _iter148 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter148.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter148.getValue().size()));
                for (String _iter149 : _iter148.getValue())
                {
                  oprot.writeString(_iter149);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeySecCrList_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeySecCrList_argsTupleScheme getScheme() {
        return new queryByRowkeySecCrList_argsTupleScheme();
      }
    }

    private static class queryByRowkeySecCrList_argsTupleScheme extends TupleScheme<queryByRowkeySecCrList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySecCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilterList()) {
          optionals.set(2);
        }
        if (struct.isSetLogicalOpt()) {
          optionals.set(3);
        }
        if (struct.isSetParam()) {
          optionals.set(4);
        }
        if (struct.isSetColumnFilter()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRowkey()) {
          oprot.writeString(struct.rowkey);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter150 : struct.tableNames)
            {
              oprot.writeString(_iter150);
            }
          }
        }
        if (struct.isSetColumnValueFilterList()) {
          {
            oprot.writeI32(struct.columnValueFilterList.size());
            for (String _iter151 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter151);
            }
          }
        }
        if (struct.isSetLogicalOpt()) {
          oprot.writeString(struct.logicalOpt);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter152 : struct.param.entrySet())
            {
              oprot.writeString(_iter152.getKey());
              oprot.writeString(_iter152.getValue());
            }
          }
        }
        if (struct.isSetColumnFilter()) {
          {
            oprot.writeI32(struct.columnFilter.size());
            for (Map.Entry<String, List<String>> _iter153 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter153.getKey());
              {
                oprot.writeI32(_iter153.getValue().size());
                for (String _iter154 : _iter153.getValue())
                {
                  oprot.writeString(_iter154);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySecCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.rowkey = iprot.readString();
          struct.setRowkeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list155 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list155.size);
            for (int _i156 = 0; _i156 < _list155.size; ++_i156)
            {
              String _elem157;
              _elem157 = iprot.readString();
              struct.tableNames.add(_elem157);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list158 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columnValueFilterList = new ArrayList<String>(_list158.size);
            for (int _i159 = 0; _i159 < _list158.size; ++_i159)
            {
              String _elem160;
              _elem160 = iprot.readString();
              struct.columnValueFilterList.add(_elem160);
            }
          }
          struct.setColumnValueFilterListIsSet(true);
        }
        if (incoming.get(3)) {
          struct.logicalOpt = iprot.readString();
          struct.setLogicalOptIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map161 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map161.size);
            for (int _i162 = 0; _i162 < _map161.size; ++_i162)
            {
              String _key163;
              String _val164;
              _key163 = iprot.readString();
              _val164 = iprot.readString();
              struct.param.put(_key163, _val164);
            }
          }
          struct.setParamIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map165 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.columnFilter = new HashMap<String,List<String>>(2*_map165.size);
            for (int _i166 = 0; _i166 < _map165.size; ++_i166)
            {
              String _key167;
              List<String> _val168;
              _key167 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list169 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val168 = new ArrayList<String>(_list169.size);
                for (int _i170 = 0; _i170 < _list169.size; ++_i170)
                {
                  String _elem171;
                  _elem171 = iprot.readString();
                  _val168.add(_elem171);
                }
              }
              struct.columnFilter.put(_key167, _val168);
            }
          }
          struct.setColumnFilterIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeySecCrList_result implements org.apache.thrift.TBase<queryByRowkeySecCrList_result, queryByRowkeySecCrList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeySecCrList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeySecCrList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeySecCrList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeySecCrList_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeySecCrList_result.class, metaDataMap);
    }

    public queryByRowkeySecCrList_result() {
    }

    public queryByRowkeySecCrList_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeySecCrList_result(queryByRowkeySecCrList_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeySecCrList_result deepCopy() {
      return new queryByRowkeySecCrList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeySecCrList_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeySecCrList_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeySecCrList_result)
        return this.equals((queryByRowkeySecCrList_result)that);
      return false;
    }

    public boolean equals(queryByRowkeySecCrList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeySecCrList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeySecCrList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeySecCrList_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeySecCrList_resultStandardScheme getScheme() {
        return new queryByRowkeySecCrList_resultStandardScheme();
      }
    }

    private static class queryByRowkeySecCrList_resultStandardScheme extends StandardScheme<queryByRowkeySecCrList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeySecCrList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list172.size);
                  for (int _i173 = 0; _i173 < _list172.size; ++_i173)
                  {
                    List<String> _elem174;
                    {
                      org.apache.thrift.protocol.TList _list175 = iprot.readListBegin();
                      _elem174 = new ArrayList<String>(_list175.size);
                      for (int _i176 = 0; _i176 < _list175.size; ++_i176)
                      {
                        String _elem177;
                        _elem177 = iprot.readString();
                        _elem174.add(_elem177);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem174);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeySecCrList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter178 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter178.size()));
                for (String _iter179 : _iter178)
                {
                  oprot.writeString(_iter179);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeySecCrList_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeySecCrList_resultTupleScheme getScheme() {
        return new queryByRowkeySecCrList_resultTupleScheme();
      }
    }

    private static class queryByRowkeySecCrList_resultTupleScheme extends TupleScheme<queryByRowkeySecCrList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySecCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter180 : struct.success)
            {
              {
                oprot.writeI32(_iter180.size());
                for (String _iter181 : _iter180)
                {
                  oprot.writeString(_iter181);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySecCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list182 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list182.size);
            for (int _i183 = 0; _i183 < _list182.size; ++_i183)
            {
              List<String> _elem184;
              {
                org.apache.thrift.protocol.TList _list185 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem184 = new ArrayList<String>(_list185.size);
                for (int _i186 = 0; _i186 < _list185.size; ++_i186)
                {
                  String _elem187;
                  _elem187 = iprot.readString();
                  _elem184.add(_elem187);
                }
              }
              struct.success.add(_elem184);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyThr_args implements org.apache.thrift.TBase<queryByRowkeyThr_args, queryByRowkeyThr_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyThr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyThr_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilter", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyThr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyThr_argsTupleSchemeFactory());
    }

    public List<String> rowkey; // required
    public List<String> tableNames; // required
    public String columnValueFilter; // required
    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER((short)3, "columnValueFilter"),
      PARAM((short)4, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER
            return COLUMN_VALUE_FILTER;
          case 4: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyThr_args.class, metaDataMap);
    }

    public queryByRowkeyThr_args() {
    }

    public queryByRowkeyThr_args(
      List<String> rowkey,
      List<String> tableNames,
      String columnValueFilter,
      Map<String,String> param)
    {
      this();
      this.rowkey = rowkey;
      this.tableNames = tableNames;
      this.columnValueFilter = columnValueFilter;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyThr_args(queryByRowkeyThr_args other) {
      if (other.isSetRowkey()) {
        List<String> __this__rowkey = new ArrayList<String>(other.rowkey);
        this.rowkey = __this__rowkey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilter()) {
        this.columnValueFilter = other.columnValueFilter;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public queryByRowkeyThr_args deepCopy() {
      return new queryByRowkeyThr_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
      this.tableNames = null;
      this.columnValueFilter = null;
      this.param = null;
    }

    public int getRowkeySize() {
      return (this.rowkey == null) ? 0 : this.rowkey.size();
    }

    public java.util.Iterator<String> getRowkeyIterator() {
      return (this.rowkey == null) ? null : this.rowkey.iterator();
    }

    public void addToRowkey(String elem) {
      if (this.rowkey == null) {
        this.rowkey = new ArrayList<String>();
      }
      this.rowkey.add(elem);
    }

    public List<String> getRowkey() {
      return this.rowkey;
    }

    public queryByRowkeyThr_args setRowkey(List<String> rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyThr_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public String getColumnValueFilter() {
      return this.columnValueFilter;
    }

    public queryByRowkeyThr_args setColumnValueFilter(String columnValueFilter) {
      this.columnValueFilter = columnValueFilter;
      return this;
    }

    public void unsetColumnValueFilter() {
      this.columnValueFilter = null;
    }

    /** Returns true if field columnValueFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilter() {
      return this.columnValueFilter != null;
    }

    public void setColumnValueFilterIsSet(boolean value) {
      if (!value) {
        this.columnValueFilter = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyThr_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((List<String>)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER:
        if (value == null) {
          unsetColumnValueFilter();
        } else {
          setColumnValueFilter((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER:
        return getColumnValueFilter();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER:
        return isSetColumnValueFilter();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyThr_args)
        return this.equals((queryByRowkeyThr_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyThr_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilter = true && this.isSetColumnValueFilter();
      boolean that_present_columnValueFilter = true && that.isSetColumnValueFilter();
      if (this_present_columnValueFilter || that_present_columnValueFilter) {
        if (!(this_present_columnValueFilter && that_present_columnValueFilter))
          return false;
        if (!this.columnValueFilter.equals(that.columnValueFilter))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyThr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(other.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, other.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilter()).compareTo(other.isSetColumnValueFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilter, other.columnValueFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyThr_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilter:");
      if (this.columnValueFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyThr_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyThr_argsStandardScheme getScheme() {
        return new queryByRowkeyThr_argsStandardScheme();
      }
    }

    private static class queryByRowkeyThr_argsStandardScheme extends StandardScheme<queryByRowkeyThr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyThr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list188 = iprot.readListBegin();
                  struct.rowkey = new ArrayList<String>(_list188.size);
                  for (int _i189 = 0; _i189 < _list188.size; ++_i189)
                  {
                    String _elem190;
                    _elem190 = iprot.readString();
                    struct.rowkey.add(_elem190);
                  }
                  iprot.readListEnd();
                }
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list191 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list191.size);
                  for (int _i192 = 0; _i192 < _list191.size; ++_i192)
                  {
                    String _elem193;
                    _elem193 = iprot.readString();
                    struct.tableNames.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.columnValueFilter = iprot.readString();
                struct.setColumnValueFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map194 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map194.size);
                  for (int _i195 = 0; _i195 < _map194.size; ++_i195)
                  {
                    String _key196;
                    String _val197;
                    _key196 = iprot.readString();
                    _val197 = iprot.readString();
                    struct.param.put(_key196, _val197);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyThr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.rowkey.size()));
            for (String _iter198 : struct.rowkey)
            {
              oprot.writeString(_iter198);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter199 : struct.tableNames)
            {
              oprot.writeString(_iter199);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilter != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_FIELD_DESC);
          oprot.writeString(struct.columnValueFilter);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter200 : struct.param.entrySet())
            {
              oprot.writeString(_iter200.getKey());
              oprot.writeString(_iter200.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyThr_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyThr_argsTupleScheme getScheme() {
        return new queryByRowkeyThr_argsTupleScheme();
      }
    }

    private static class queryByRowkeyThr_argsTupleScheme extends TupleScheme<queryByRowkeyThr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyThr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilter()) {
          optionals.set(2);
        }
        if (struct.isSetParam()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRowkey()) {
          {
            oprot.writeI32(struct.rowkey.size());
            for (String _iter201 : struct.rowkey)
            {
              oprot.writeString(_iter201);
            }
          }
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter202 : struct.tableNames)
            {
              oprot.writeString(_iter202);
            }
          }
        }
        if (struct.isSetColumnValueFilter()) {
          oprot.writeString(struct.columnValueFilter);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter203 : struct.param.entrySet())
            {
              oprot.writeString(_iter203.getKey());
              oprot.writeString(_iter203.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyThr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list204 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.rowkey = new ArrayList<String>(_list204.size);
            for (int _i205 = 0; _i205 < _list204.size; ++_i205)
            {
              String _elem206;
              _elem206 = iprot.readString();
              struct.rowkey.add(_elem206);
            }
          }
          struct.setRowkeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list207 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list207.size);
            for (int _i208 = 0; _i208 < _list207.size; ++_i208)
            {
              String _elem209;
              _elem209 = iprot.readString();
              struct.tableNames.add(_elem209);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.columnValueFilter = iprot.readString();
          struct.setColumnValueFilterIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map210 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map210.size);
            for (int _i211 = 0; _i211 < _map210.size; ++_i211)
            {
              String _key212;
              String _val213;
              _key212 = iprot.readString();
              _val213 = iprot.readString();
              struct.param.put(_key212, _val213);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyThr_result implements org.apache.thrift.TBase<queryByRowkeyThr_result, queryByRowkeyThr_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyThr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyThr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyThr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyThr_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyThr_result.class, metaDataMap);
    }

    public queryByRowkeyThr_result() {
    }

    public queryByRowkeyThr_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyThr_result(queryByRowkeyThr_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyThr_result deepCopy() {
      return new queryByRowkeyThr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyThr_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyThr_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyThr_result)
        return this.equals((queryByRowkeyThr_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyThr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyThr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyThr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyThr_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyThr_resultStandardScheme getScheme() {
        return new queryByRowkeyThr_resultStandardScheme();
      }
    }

    private static class queryByRowkeyThr_resultStandardScheme extends StandardScheme<queryByRowkeyThr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyThr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list214.size);
                  for (int _i215 = 0; _i215 < _list214.size; ++_i215)
                  {
                    List<String> _elem216;
                    {
                      org.apache.thrift.protocol.TList _list217 = iprot.readListBegin();
                      _elem216 = new ArrayList<String>(_list217.size);
                      for (int _i218 = 0; _i218 < _list217.size; ++_i218)
                      {
                        String _elem219;
                        _elem219 = iprot.readString();
                        _elem216.add(_elem219);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem216);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyThr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter220 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter220.size()));
                for (String _iter221 : _iter220)
                {
                  oprot.writeString(_iter221);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyThr_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyThr_resultTupleScheme getScheme() {
        return new queryByRowkeyThr_resultTupleScheme();
      }
    }

    private static class queryByRowkeyThr_resultTupleScheme extends TupleScheme<queryByRowkeyThr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyThr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter222 : struct.success)
            {
              {
                oprot.writeI32(_iter222.size());
                for (String _iter223 : _iter222)
                {
                  oprot.writeString(_iter223);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyThr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list224 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list224.size);
            for (int _i225 = 0; _i225 < _list224.size; ++_i225)
            {
              List<String> _elem226;
              {
                org.apache.thrift.protocol.TList _list227 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem226 = new ArrayList<String>(_list227.size);
                for (int _i228 = 0; _i228 < _list227.size; ++_i228)
                {
                  String _elem229;
                  _elem229 = iprot.readString();
                  _elem226.add(_elem229);
                }
              }
              struct.success.add(_elem226);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyThrCrList_args implements org.apache.thrift.TBase<queryByRowkeyThrCrList_args, queryByRowkeyThrCrList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyThrCrList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyThrCrList_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilterList", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField LOGICAL_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("logicalOpt", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyThrCrList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyThrCrList_argsTupleSchemeFactory());
    }

    public List<String> rowkey; // required
    public List<String> tableNames; // required
    public List<String> columnValueFilterList; // required
    public String logicalOpt; // required
    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER_LIST((short)3, "columnValueFilterList"),
      LOGICAL_OPT((short)4, "logicalOpt"),
      PARAM((short)5, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER_LIST
            return COLUMN_VALUE_FILTER_LIST;
          case 4: // LOGICAL_OPT
            return LOGICAL_OPT;
          case 5: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOGICAL_OPT, new org.apache.thrift.meta_data.FieldMetaData("logicalOpt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyThrCrList_args.class, metaDataMap);
    }

    public queryByRowkeyThrCrList_args() {
    }

    public queryByRowkeyThrCrList_args(
      List<String> rowkey,
      List<String> tableNames,
      List<String> columnValueFilterList,
      String logicalOpt,
      Map<String,String> param)
    {
      this();
      this.rowkey = rowkey;
      this.tableNames = tableNames;
      this.columnValueFilterList = columnValueFilterList;
      this.logicalOpt = logicalOpt;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyThrCrList_args(queryByRowkeyThrCrList_args other) {
      if (other.isSetRowkey()) {
        List<String> __this__rowkey = new ArrayList<String>(other.rowkey);
        this.rowkey = __this__rowkey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilterList()) {
        List<String> __this__columnValueFilterList = new ArrayList<String>(other.columnValueFilterList);
        this.columnValueFilterList = __this__columnValueFilterList;
      }
      if (other.isSetLogicalOpt()) {
        this.logicalOpt = other.logicalOpt;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public queryByRowkeyThrCrList_args deepCopy() {
      return new queryByRowkeyThrCrList_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
      this.tableNames = null;
      this.columnValueFilterList = null;
      this.logicalOpt = null;
      this.param = null;
    }

    public int getRowkeySize() {
      return (this.rowkey == null) ? 0 : this.rowkey.size();
    }

    public java.util.Iterator<String> getRowkeyIterator() {
      return (this.rowkey == null) ? null : this.rowkey.iterator();
    }

    public void addToRowkey(String elem) {
      if (this.rowkey == null) {
        this.rowkey = new ArrayList<String>();
      }
      this.rowkey.add(elem);
    }

    public List<String> getRowkey() {
      return this.rowkey;
    }

    public queryByRowkeyThrCrList_args setRowkey(List<String> rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyThrCrList_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public int getColumnValueFilterListSize() {
      return (this.columnValueFilterList == null) ? 0 : this.columnValueFilterList.size();
    }

    public java.util.Iterator<String> getColumnValueFilterListIterator() {
      return (this.columnValueFilterList == null) ? null : this.columnValueFilterList.iterator();
    }

    public void addToColumnValueFilterList(String elem) {
      if (this.columnValueFilterList == null) {
        this.columnValueFilterList = new ArrayList<String>();
      }
      this.columnValueFilterList.add(elem);
    }

    public List<String> getColumnValueFilterList() {
      return this.columnValueFilterList;
    }

    public queryByRowkeyThrCrList_args setColumnValueFilterList(List<String> columnValueFilterList) {
      this.columnValueFilterList = columnValueFilterList;
      return this;
    }

    public void unsetColumnValueFilterList() {
      this.columnValueFilterList = null;
    }

    /** Returns true if field columnValueFilterList is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilterList() {
      return this.columnValueFilterList != null;
    }

    public void setColumnValueFilterListIsSet(boolean value) {
      if (!value) {
        this.columnValueFilterList = null;
      }
    }

    public String getLogicalOpt() {
      return this.logicalOpt;
    }

    public queryByRowkeyThrCrList_args setLogicalOpt(String logicalOpt) {
      this.logicalOpt = logicalOpt;
      return this;
    }

    public void unsetLogicalOpt() {
      this.logicalOpt = null;
    }

    /** Returns true if field logicalOpt is set (has been assigned a value) and false otherwise */
    public boolean isSetLogicalOpt() {
      return this.logicalOpt != null;
    }

    public void setLogicalOptIsSet(boolean value) {
      if (!value) {
        this.logicalOpt = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyThrCrList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((List<String>)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER_LIST:
        if (value == null) {
          unsetColumnValueFilterList();
        } else {
          setColumnValueFilterList((List<String>)value);
        }
        break;

      case LOGICAL_OPT:
        if (value == null) {
          unsetLogicalOpt();
        } else {
          setLogicalOpt((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER_LIST:
        return getColumnValueFilterList();

      case LOGICAL_OPT:
        return getLogicalOpt();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER_LIST:
        return isSetColumnValueFilterList();
      case LOGICAL_OPT:
        return isSetLogicalOpt();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyThrCrList_args)
        return this.equals((queryByRowkeyThrCrList_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyThrCrList_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilterList = true && this.isSetColumnValueFilterList();
      boolean that_present_columnValueFilterList = true && that.isSetColumnValueFilterList();
      if (this_present_columnValueFilterList || that_present_columnValueFilterList) {
        if (!(this_present_columnValueFilterList && that_present_columnValueFilterList))
          return false;
        if (!this.columnValueFilterList.equals(that.columnValueFilterList))
          return false;
      }

      boolean this_present_logicalOpt = true && this.isSetLogicalOpt();
      boolean that_present_logicalOpt = true && that.isSetLogicalOpt();
      if (this_present_logicalOpt || that_present_logicalOpt) {
        if (!(this_present_logicalOpt && that_present_logicalOpt))
          return false;
        if (!this.logicalOpt.equals(that.logicalOpt))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyThrCrList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(other.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, other.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilterList()).compareTo(other.isSetColumnValueFilterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilterList, other.columnValueFilterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogicalOpt()).compareTo(other.isSetLogicalOpt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogicalOpt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicalOpt, other.logicalOpt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyThrCrList_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilterList:");
      if (this.columnValueFilterList == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logicalOpt:");
      if (this.logicalOpt == null) {
        sb.append("null");
      } else {
        sb.append(this.logicalOpt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyThrCrList_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyThrCrList_argsStandardScheme getScheme() {
        return new queryByRowkeyThrCrList_argsStandardScheme();
      }
    }

    private static class queryByRowkeyThrCrList_argsStandardScheme extends StandardScheme<queryByRowkeyThrCrList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyThrCrList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list230 = iprot.readListBegin();
                  struct.rowkey = new ArrayList<String>(_list230.size);
                  for (int _i231 = 0; _i231 < _list230.size; ++_i231)
                  {
                    String _elem232;
                    _elem232 = iprot.readString();
                    struct.rowkey.add(_elem232);
                  }
                  iprot.readListEnd();
                }
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list233 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list233.size);
                  for (int _i234 = 0; _i234 < _list233.size; ++_i234)
                  {
                    String _elem235;
                    _elem235 = iprot.readString();
                    struct.tableNames.add(_elem235);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list236 = iprot.readListBegin();
                  struct.columnValueFilterList = new ArrayList<String>(_list236.size);
                  for (int _i237 = 0; _i237 < _list236.size; ++_i237)
                  {
                    String _elem238;
                    _elem238 = iprot.readString();
                    struct.columnValueFilterList.add(_elem238);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnValueFilterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOGICAL_OPT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logicalOpt = iprot.readString();
                struct.setLogicalOptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map239 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map239.size);
                  for (int _i240 = 0; _i240 < _map239.size; ++_i240)
                  {
                    String _key241;
                    String _val242;
                    _key241 = iprot.readString();
                    _val242 = iprot.readString();
                    struct.param.put(_key241, _val242);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyThrCrList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.rowkey.size()));
            for (String _iter243 : struct.rowkey)
            {
              oprot.writeString(_iter243);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter244 : struct.tableNames)
            {
              oprot.writeString(_iter244);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilterList != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnValueFilterList.size()));
            for (String _iter245 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter245);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.logicalOpt != null) {
          oprot.writeFieldBegin(LOGICAL_OPT_FIELD_DESC);
          oprot.writeString(struct.logicalOpt);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter246 : struct.param.entrySet())
            {
              oprot.writeString(_iter246.getKey());
              oprot.writeString(_iter246.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyThrCrList_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyThrCrList_argsTupleScheme getScheme() {
        return new queryByRowkeyThrCrList_argsTupleScheme();
      }
    }

    private static class queryByRowkeyThrCrList_argsTupleScheme extends TupleScheme<queryByRowkeyThrCrList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyThrCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilterList()) {
          optionals.set(2);
        }
        if (struct.isSetLogicalOpt()) {
          optionals.set(3);
        }
        if (struct.isSetParam()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRowkey()) {
          {
            oprot.writeI32(struct.rowkey.size());
            for (String _iter247 : struct.rowkey)
            {
              oprot.writeString(_iter247);
            }
          }
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter248 : struct.tableNames)
            {
              oprot.writeString(_iter248);
            }
          }
        }
        if (struct.isSetColumnValueFilterList()) {
          {
            oprot.writeI32(struct.columnValueFilterList.size());
            for (String _iter249 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter249);
            }
          }
        }
        if (struct.isSetLogicalOpt()) {
          oprot.writeString(struct.logicalOpt);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter250 : struct.param.entrySet())
            {
              oprot.writeString(_iter250.getKey());
              oprot.writeString(_iter250.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyThrCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list251 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.rowkey = new ArrayList<String>(_list251.size);
            for (int _i252 = 0; _i252 < _list251.size; ++_i252)
            {
              String _elem253;
              _elem253 = iprot.readString();
              struct.rowkey.add(_elem253);
            }
          }
          struct.setRowkeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list254 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list254.size);
            for (int _i255 = 0; _i255 < _list254.size; ++_i255)
            {
              String _elem256;
              _elem256 = iprot.readString();
              struct.tableNames.add(_elem256);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list257 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columnValueFilterList = new ArrayList<String>(_list257.size);
            for (int _i258 = 0; _i258 < _list257.size; ++_i258)
            {
              String _elem259;
              _elem259 = iprot.readString();
              struct.columnValueFilterList.add(_elem259);
            }
          }
          struct.setColumnValueFilterListIsSet(true);
        }
        if (incoming.get(3)) {
          struct.logicalOpt = iprot.readString();
          struct.setLogicalOptIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map260 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map260.size);
            for (int _i261 = 0; _i261 < _map260.size; ++_i261)
            {
              String _key262;
              String _val263;
              _key262 = iprot.readString();
              _val263 = iprot.readString();
              struct.param.put(_key262, _val263);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyThrCrList_result implements org.apache.thrift.TBase<queryByRowkeyThrCrList_result, queryByRowkeyThrCrList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyThrCrList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyThrCrList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyThrCrList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyThrCrList_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyThrCrList_result.class, metaDataMap);
    }

    public queryByRowkeyThrCrList_result() {
    }

    public queryByRowkeyThrCrList_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyThrCrList_result(queryByRowkeyThrCrList_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyThrCrList_result deepCopy() {
      return new queryByRowkeyThrCrList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyThrCrList_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyThrCrList_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyThrCrList_result)
        return this.equals((queryByRowkeyThrCrList_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyThrCrList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyThrCrList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyThrCrList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyThrCrList_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyThrCrList_resultStandardScheme getScheme() {
        return new queryByRowkeyThrCrList_resultStandardScheme();
      }
    }

    private static class queryByRowkeyThrCrList_resultStandardScheme extends StandardScheme<queryByRowkeyThrCrList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyThrCrList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list264.size);
                  for (int _i265 = 0; _i265 < _list264.size; ++_i265)
                  {
                    List<String> _elem266;
                    {
                      org.apache.thrift.protocol.TList _list267 = iprot.readListBegin();
                      _elem266 = new ArrayList<String>(_list267.size);
                      for (int _i268 = 0; _i268 < _list267.size; ++_i268)
                      {
                        String _elem269;
                        _elem269 = iprot.readString();
                        _elem266.add(_elem269);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem266);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyThrCrList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter270 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter270.size()));
                for (String _iter271 : _iter270)
                {
                  oprot.writeString(_iter271);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyThrCrList_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyThrCrList_resultTupleScheme getScheme() {
        return new queryByRowkeyThrCrList_resultTupleScheme();
      }
    }

    private static class queryByRowkeyThrCrList_resultTupleScheme extends TupleScheme<queryByRowkeyThrCrList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyThrCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter272 : struct.success)
            {
              {
                oprot.writeI32(_iter272.size());
                for (String _iter273 : _iter272)
                {
                  oprot.writeString(_iter273);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyThrCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list274 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list274.size);
            for (int _i275 = 0; _i275 < _list274.size; ++_i275)
            {
              List<String> _elem276;
              {
                org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem276 = new ArrayList<String>(_list277.size);
                for (int _i278 = 0; _i278 < _list277.size; ++_i278)
                {
                  String _elem279;
                  _elem279 = iprot.readString();
                  _elem276.add(_elem279);
                }
              }
              struct.success.add(_elem276);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyPrefixFir_args implements org.apache.thrift.TBase<queryByRowkeyPrefixFir_args, queryByRowkeyPrefixFir_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyPrefixFir_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyPrefixFir_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkeyPrefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilter", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyPrefixFir_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyPrefixFir_argsTupleSchemeFactory());
    }

    public String rowkeyPrefix; // required
    public List<String> tableNames; // required
    public String columnValueFilter; // required
    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY_PREFIX((short)1, "rowkeyPrefix"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER((short)3, "columnValueFilter"),
      PARAM((short)4, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY_PREFIX
            return ROWKEY_PREFIX;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER
            return COLUMN_VALUE_FILTER;
          case 4: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("rowkeyPrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyPrefixFir_args.class, metaDataMap);
    }

    public queryByRowkeyPrefixFir_args() {
    }

    public queryByRowkeyPrefixFir_args(
      String rowkeyPrefix,
      List<String> tableNames,
      String columnValueFilter,
      Map<String,String> param)
    {
      this();
      this.rowkeyPrefix = rowkeyPrefix;
      this.tableNames = tableNames;
      this.columnValueFilter = columnValueFilter;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyPrefixFir_args(queryByRowkeyPrefixFir_args other) {
      if (other.isSetRowkeyPrefix()) {
        this.rowkeyPrefix = other.rowkeyPrefix;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilter()) {
        this.columnValueFilter = other.columnValueFilter;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public queryByRowkeyPrefixFir_args deepCopy() {
      return new queryByRowkeyPrefixFir_args(this);
    }

    @Override
    public void clear() {
      this.rowkeyPrefix = null;
      this.tableNames = null;
      this.columnValueFilter = null;
      this.param = null;
    }

    public String getRowkeyPrefix() {
      return this.rowkeyPrefix;
    }

    public queryByRowkeyPrefixFir_args setRowkeyPrefix(String rowkeyPrefix) {
      this.rowkeyPrefix = rowkeyPrefix;
      return this;
    }

    public void unsetRowkeyPrefix() {
      this.rowkeyPrefix = null;
    }

    /** Returns true if field rowkeyPrefix is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkeyPrefix() {
      return this.rowkeyPrefix != null;
    }

    public void setRowkeyPrefixIsSet(boolean value) {
      if (!value) {
        this.rowkeyPrefix = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyPrefixFir_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public String getColumnValueFilter() {
      return this.columnValueFilter;
    }

    public queryByRowkeyPrefixFir_args setColumnValueFilter(String columnValueFilter) {
      this.columnValueFilter = columnValueFilter;
      return this;
    }

    public void unsetColumnValueFilter() {
      this.columnValueFilter = null;
    }

    /** Returns true if field columnValueFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilter() {
      return this.columnValueFilter != null;
    }

    public void setColumnValueFilterIsSet(boolean value) {
      if (!value) {
        this.columnValueFilter = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyPrefixFir_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY_PREFIX:
        if (value == null) {
          unsetRowkeyPrefix();
        } else {
          setRowkeyPrefix((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER:
        if (value == null) {
          unsetColumnValueFilter();
        } else {
          setColumnValueFilter((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY_PREFIX:
        return getRowkeyPrefix();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER:
        return getColumnValueFilter();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY_PREFIX:
        return isSetRowkeyPrefix();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER:
        return isSetColumnValueFilter();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyPrefixFir_args)
        return this.equals((queryByRowkeyPrefixFir_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyPrefixFir_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkeyPrefix = true && this.isSetRowkeyPrefix();
      boolean that_present_rowkeyPrefix = true && that.isSetRowkeyPrefix();
      if (this_present_rowkeyPrefix || that_present_rowkeyPrefix) {
        if (!(this_present_rowkeyPrefix && that_present_rowkeyPrefix))
          return false;
        if (!this.rowkeyPrefix.equals(that.rowkeyPrefix))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilter = true && this.isSetColumnValueFilter();
      boolean that_present_columnValueFilter = true && that.isSetColumnValueFilter();
      if (this_present_columnValueFilter || that_present_columnValueFilter) {
        if (!(this_present_columnValueFilter && that_present_columnValueFilter))
          return false;
        if (!this.columnValueFilter.equals(that.columnValueFilter))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyPrefixFir_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkeyPrefix()).compareTo(other.isSetRowkeyPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkeyPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkeyPrefix, other.rowkeyPrefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilter()).compareTo(other.isSetColumnValueFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilter, other.columnValueFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyPrefixFir_args(");
      boolean first = true;

      sb.append("rowkeyPrefix:");
      if (this.rowkeyPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkeyPrefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilter:");
      if (this.columnValueFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyPrefixFir_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixFir_argsStandardScheme getScheme() {
        return new queryByRowkeyPrefixFir_argsStandardScheme();
      }
    }

    private static class queryByRowkeyPrefixFir_argsStandardScheme extends StandardScheme<queryByRowkeyPrefixFir_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyPrefixFir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkeyPrefix = iprot.readString();
                struct.setRowkeyPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list280.size);
                  for (int _i281 = 0; _i281 < _list280.size; ++_i281)
                  {
                    String _elem282;
                    _elem282 = iprot.readString();
                    struct.tableNames.add(_elem282);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.columnValueFilter = iprot.readString();
                struct.setColumnValueFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map283 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map283.size);
                  for (int _i284 = 0; _i284 < _map283.size; ++_i284)
                  {
                    String _key285;
                    String _val286;
                    _key285 = iprot.readString();
                    _val286 = iprot.readString();
                    struct.param.put(_key285, _val286);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyPrefixFir_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkeyPrefix != null) {
          oprot.writeFieldBegin(ROWKEY_PREFIX_FIELD_DESC);
          oprot.writeString(struct.rowkeyPrefix);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter287 : struct.tableNames)
            {
              oprot.writeString(_iter287);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilter != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_FIELD_DESC);
          oprot.writeString(struct.columnValueFilter);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter288 : struct.param.entrySet())
            {
              oprot.writeString(_iter288.getKey());
              oprot.writeString(_iter288.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyPrefixFir_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixFir_argsTupleScheme getScheme() {
        return new queryByRowkeyPrefixFir_argsTupleScheme();
      }
    }

    private static class queryByRowkeyPrefixFir_argsTupleScheme extends TupleScheme<queryByRowkeyPrefixFir_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixFir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkeyPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilter()) {
          optionals.set(2);
        }
        if (struct.isSetParam()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRowkeyPrefix()) {
          oprot.writeString(struct.rowkeyPrefix);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter289 : struct.tableNames)
            {
              oprot.writeString(_iter289);
            }
          }
        }
        if (struct.isSetColumnValueFilter()) {
          oprot.writeString(struct.columnValueFilter);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter290 : struct.param.entrySet())
            {
              oprot.writeString(_iter290.getKey());
              oprot.writeString(_iter290.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixFir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rowkeyPrefix = iprot.readString();
          struct.setRowkeyPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list291 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list291.size);
            for (int _i292 = 0; _i292 < _list291.size; ++_i292)
            {
              String _elem293;
              _elem293 = iprot.readString();
              struct.tableNames.add(_elem293);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.columnValueFilter = iprot.readString();
          struct.setColumnValueFilterIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map294 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map294.size);
            for (int _i295 = 0; _i295 < _map294.size; ++_i295)
            {
              String _key296;
              String _val297;
              _key296 = iprot.readString();
              _val297 = iprot.readString();
              struct.param.put(_key296, _val297);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyPrefixFir_result implements org.apache.thrift.TBase<queryByRowkeyPrefixFir_result, queryByRowkeyPrefixFir_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyPrefixFir_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyPrefixFir_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyPrefixFir_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyPrefixFir_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyPrefixFir_result.class, metaDataMap);
    }

    public queryByRowkeyPrefixFir_result() {
    }

    public queryByRowkeyPrefixFir_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyPrefixFir_result(queryByRowkeyPrefixFir_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyPrefixFir_result deepCopy() {
      return new queryByRowkeyPrefixFir_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyPrefixFir_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyPrefixFir_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyPrefixFir_result)
        return this.equals((queryByRowkeyPrefixFir_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyPrefixFir_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyPrefixFir_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyPrefixFir_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyPrefixFir_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixFir_resultStandardScheme getScheme() {
        return new queryByRowkeyPrefixFir_resultStandardScheme();
      }
    }

    private static class queryByRowkeyPrefixFir_resultStandardScheme extends StandardScheme<queryByRowkeyPrefixFir_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyPrefixFir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list298 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list298.size);
                  for (int _i299 = 0; _i299 < _list298.size; ++_i299)
                  {
                    List<String> _elem300;
                    {
                      org.apache.thrift.protocol.TList _list301 = iprot.readListBegin();
                      _elem300 = new ArrayList<String>(_list301.size);
                      for (int _i302 = 0; _i302 < _list301.size; ++_i302)
                      {
                        String _elem303;
                        _elem303 = iprot.readString();
                        _elem300.add(_elem303);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem300);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyPrefixFir_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter304 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter304.size()));
                for (String _iter305 : _iter304)
                {
                  oprot.writeString(_iter305);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyPrefixFir_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixFir_resultTupleScheme getScheme() {
        return new queryByRowkeyPrefixFir_resultTupleScheme();
      }
    }

    private static class queryByRowkeyPrefixFir_resultTupleScheme extends TupleScheme<queryByRowkeyPrefixFir_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixFir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter306 : struct.success)
            {
              {
                oprot.writeI32(_iter306.size());
                for (String _iter307 : _iter306)
                {
                  oprot.writeString(_iter307);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixFir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list308 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list308.size);
            for (int _i309 = 0; _i309 < _list308.size; ++_i309)
            {
              List<String> _elem310;
              {
                org.apache.thrift.protocol.TList _list311 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem310 = new ArrayList<String>(_list311.size);
                for (int _i312 = 0; _i312 < _list311.size; ++_i312)
                {
                  String _elem313;
                  _elem313 = iprot.readString();
                  _elem310.add(_elem313);
                }
              }
              struct.success.add(_elem310);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyPrefixFirCrList_args implements org.apache.thrift.TBase<queryByRowkeyPrefixFirCrList_args, queryByRowkeyPrefixFirCrList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyPrefixFirCrList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyPrefixFirCrList_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkeyPrefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilterList", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField LOGICAL_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("logicalOpt", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyPrefixFirCrList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyPrefixFirCrList_argsTupleSchemeFactory());
    }

    public String rowkeyPrefix; // required
    public List<String> tableNames; // required
    public List<String> columnValueFilterList; // required
    public String logicalOpt; // required
    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY_PREFIX((short)1, "rowkeyPrefix"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER_LIST((short)3, "columnValueFilterList"),
      LOGICAL_OPT((short)4, "logicalOpt"),
      PARAM((short)5, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY_PREFIX
            return ROWKEY_PREFIX;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER_LIST
            return COLUMN_VALUE_FILTER_LIST;
          case 4: // LOGICAL_OPT
            return LOGICAL_OPT;
          case 5: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("rowkeyPrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOGICAL_OPT, new org.apache.thrift.meta_data.FieldMetaData("logicalOpt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyPrefixFirCrList_args.class, metaDataMap);
    }

    public queryByRowkeyPrefixFirCrList_args() {
    }

    public queryByRowkeyPrefixFirCrList_args(
      String rowkeyPrefix,
      List<String> tableNames,
      List<String> columnValueFilterList,
      String logicalOpt,
      Map<String,String> param)
    {
      this();
      this.rowkeyPrefix = rowkeyPrefix;
      this.tableNames = tableNames;
      this.columnValueFilterList = columnValueFilterList;
      this.logicalOpt = logicalOpt;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyPrefixFirCrList_args(queryByRowkeyPrefixFirCrList_args other) {
      if (other.isSetRowkeyPrefix()) {
        this.rowkeyPrefix = other.rowkeyPrefix;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilterList()) {
        List<String> __this__columnValueFilterList = new ArrayList<String>(other.columnValueFilterList);
        this.columnValueFilterList = __this__columnValueFilterList;
      }
      if (other.isSetLogicalOpt()) {
        this.logicalOpt = other.logicalOpt;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public queryByRowkeyPrefixFirCrList_args deepCopy() {
      return new queryByRowkeyPrefixFirCrList_args(this);
    }

    @Override
    public void clear() {
      this.rowkeyPrefix = null;
      this.tableNames = null;
      this.columnValueFilterList = null;
      this.logicalOpt = null;
      this.param = null;
    }

    public String getRowkeyPrefix() {
      return this.rowkeyPrefix;
    }

    public queryByRowkeyPrefixFirCrList_args setRowkeyPrefix(String rowkeyPrefix) {
      this.rowkeyPrefix = rowkeyPrefix;
      return this;
    }

    public void unsetRowkeyPrefix() {
      this.rowkeyPrefix = null;
    }

    /** Returns true if field rowkeyPrefix is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkeyPrefix() {
      return this.rowkeyPrefix != null;
    }

    public void setRowkeyPrefixIsSet(boolean value) {
      if (!value) {
        this.rowkeyPrefix = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyPrefixFirCrList_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public int getColumnValueFilterListSize() {
      return (this.columnValueFilterList == null) ? 0 : this.columnValueFilterList.size();
    }

    public java.util.Iterator<String> getColumnValueFilterListIterator() {
      return (this.columnValueFilterList == null) ? null : this.columnValueFilterList.iterator();
    }

    public void addToColumnValueFilterList(String elem) {
      if (this.columnValueFilterList == null) {
        this.columnValueFilterList = new ArrayList<String>();
      }
      this.columnValueFilterList.add(elem);
    }

    public List<String> getColumnValueFilterList() {
      return this.columnValueFilterList;
    }

    public queryByRowkeyPrefixFirCrList_args setColumnValueFilterList(List<String> columnValueFilterList) {
      this.columnValueFilterList = columnValueFilterList;
      return this;
    }

    public void unsetColumnValueFilterList() {
      this.columnValueFilterList = null;
    }

    /** Returns true if field columnValueFilterList is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilterList() {
      return this.columnValueFilterList != null;
    }

    public void setColumnValueFilterListIsSet(boolean value) {
      if (!value) {
        this.columnValueFilterList = null;
      }
    }

    public String getLogicalOpt() {
      return this.logicalOpt;
    }

    public queryByRowkeyPrefixFirCrList_args setLogicalOpt(String logicalOpt) {
      this.logicalOpt = logicalOpt;
      return this;
    }

    public void unsetLogicalOpt() {
      this.logicalOpt = null;
    }

    /** Returns true if field logicalOpt is set (has been assigned a value) and false otherwise */
    public boolean isSetLogicalOpt() {
      return this.logicalOpt != null;
    }

    public void setLogicalOptIsSet(boolean value) {
      if (!value) {
        this.logicalOpt = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyPrefixFirCrList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY_PREFIX:
        if (value == null) {
          unsetRowkeyPrefix();
        } else {
          setRowkeyPrefix((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER_LIST:
        if (value == null) {
          unsetColumnValueFilterList();
        } else {
          setColumnValueFilterList((List<String>)value);
        }
        break;

      case LOGICAL_OPT:
        if (value == null) {
          unsetLogicalOpt();
        } else {
          setLogicalOpt((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY_PREFIX:
        return getRowkeyPrefix();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER_LIST:
        return getColumnValueFilterList();

      case LOGICAL_OPT:
        return getLogicalOpt();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY_PREFIX:
        return isSetRowkeyPrefix();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER_LIST:
        return isSetColumnValueFilterList();
      case LOGICAL_OPT:
        return isSetLogicalOpt();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyPrefixFirCrList_args)
        return this.equals((queryByRowkeyPrefixFirCrList_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyPrefixFirCrList_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkeyPrefix = true && this.isSetRowkeyPrefix();
      boolean that_present_rowkeyPrefix = true && that.isSetRowkeyPrefix();
      if (this_present_rowkeyPrefix || that_present_rowkeyPrefix) {
        if (!(this_present_rowkeyPrefix && that_present_rowkeyPrefix))
          return false;
        if (!this.rowkeyPrefix.equals(that.rowkeyPrefix))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilterList = true && this.isSetColumnValueFilterList();
      boolean that_present_columnValueFilterList = true && that.isSetColumnValueFilterList();
      if (this_present_columnValueFilterList || that_present_columnValueFilterList) {
        if (!(this_present_columnValueFilterList && that_present_columnValueFilterList))
          return false;
        if (!this.columnValueFilterList.equals(that.columnValueFilterList))
          return false;
      }

      boolean this_present_logicalOpt = true && this.isSetLogicalOpt();
      boolean that_present_logicalOpt = true && that.isSetLogicalOpt();
      if (this_present_logicalOpt || that_present_logicalOpt) {
        if (!(this_present_logicalOpt && that_present_logicalOpt))
          return false;
        if (!this.logicalOpt.equals(that.logicalOpt))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyPrefixFirCrList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkeyPrefix()).compareTo(other.isSetRowkeyPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkeyPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkeyPrefix, other.rowkeyPrefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilterList()).compareTo(other.isSetColumnValueFilterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilterList, other.columnValueFilterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogicalOpt()).compareTo(other.isSetLogicalOpt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogicalOpt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicalOpt, other.logicalOpt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyPrefixFirCrList_args(");
      boolean first = true;

      sb.append("rowkeyPrefix:");
      if (this.rowkeyPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkeyPrefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilterList:");
      if (this.columnValueFilterList == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logicalOpt:");
      if (this.logicalOpt == null) {
        sb.append("null");
      } else {
        sb.append(this.logicalOpt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyPrefixFirCrList_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixFirCrList_argsStandardScheme getScheme() {
        return new queryByRowkeyPrefixFirCrList_argsStandardScheme();
      }
    }

    private static class queryByRowkeyPrefixFirCrList_argsStandardScheme extends StandardScheme<queryByRowkeyPrefixFirCrList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyPrefixFirCrList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkeyPrefix = iprot.readString();
                struct.setRowkeyPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list314 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list314.size);
                  for (int _i315 = 0; _i315 < _list314.size; ++_i315)
                  {
                    String _elem316;
                    _elem316 = iprot.readString();
                    struct.tableNames.add(_elem316);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list317 = iprot.readListBegin();
                  struct.columnValueFilterList = new ArrayList<String>(_list317.size);
                  for (int _i318 = 0; _i318 < _list317.size; ++_i318)
                  {
                    String _elem319;
                    _elem319 = iprot.readString();
                    struct.columnValueFilterList.add(_elem319);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnValueFilterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOGICAL_OPT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logicalOpt = iprot.readString();
                struct.setLogicalOptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map320 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map320.size);
                  for (int _i321 = 0; _i321 < _map320.size; ++_i321)
                  {
                    String _key322;
                    String _val323;
                    _key322 = iprot.readString();
                    _val323 = iprot.readString();
                    struct.param.put(_key322, _val323);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyPrefixFirCrList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkeyPrefix != null) {
          oprot.writeFieldBegin(ROWKEY_PREFIX_FIELD_DESC);
          oprot.writeString(struct.rowkeyPrefix);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter324 : struct.tableNames)
            {
              oprot.writeString(_iter324);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilterList != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnValueFilterList.size()));
            for (String _iter325 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter325);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.logicalOpt != null) {
          oprot.writeFieldBegin(LOGICAL_OPT_FIELD_DESC);
          oprot.writeString(struct.logicalOpt);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter326 : struct.param.entrySet())
            {
              oprot.writeString(_iter326.getKey());
              oprot.writeString(_iter326.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyPrefixFirCrList_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixFirCrList_argsTupleScheme getScheme() {
        return new queryByRowkeyPrefixFirCrList_argsTupleScheme();
      }
    }

    private static class queryByRowkeyPrefixFirCrList_argsTupleScheme extends TupleScheme<queryByRowkeyPrefixFirCrList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixFirCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkeyPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilterList()) {
          optionals.set(2);
        }
        if (struct.isSetLogicalOpt()) {
          optionals.set(3);
        }
        if (struct.isSetParam()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRowkeyPrefix()) {
          oprot.writeString(struct.rowkeyPrefix);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter327 : struct.tableNames)
            {
              oprot.writeString(_iter327);
            }
          }
        }
        if (struct.isSetColumnValueFilterList()) {
          {
            oprot.writeI32(struct.columnValueFilterList.size());
            for (String _iter328 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter328);
            }
          }
        }
        if (struct.isSetLogicalOpt()) {
          oprot.writeString(struct.logicalOpt);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter329 : struct.param.entrySet())
            {
              oprot.writeString(_iter329.getKey());
              oprot.writeString(_iter329.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixFirCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.rowkeyPrefix = iprot.readString();
          struct.setRowkeyPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list330 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list330.size);
            for (int _i331 = 0; _i331 < _list330.size; ++_i331)
            {
              String _elem332;
              _elem332 = iprot.readString();
              struct.tableNames.add(_elem332);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list333 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columnValueFilterList = new ArrayList<String>(_list333.size);
            for (int _i334 = 0; _i334 < _list333.size; ++_i334)
            {
              String _elem335;
              _elem335 = iprot.readString();
              struct.columnValueFilterList.add(_elem335);
            }
          }
          struct.setColumnValueFilterListIsSet(true);
        }
        if (incoming.get(3)) {
          struct.logicalOpt = iprot.readString();
          struct.setLogicalOptIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map336 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map336.size);
            for (int _i337 = 0; _i337 < _map336.size; ++_i337)
            {
              String _key338;
              String _val339;
              _key338 = iprot.readString();
              _val339 = iprot.readString();
              struct.param.put(_key338, _val339);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyPrefixFirCrList_result implements org.apache.thrift.TBase<queryByRowkeyPrefixFirCrList_result, queryByRowkeyPrefixFirCrList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyPrefixFirCrList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyPrefixFirCrList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyPrefixFirCrList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyPrefixFirCrList_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyPrefixFirCrList_result.class, metaDataMap);
    }

    public queryByRowkeyPrefixFirCrList_result() {
    }

    public queryByRowkeyPrefixFirCrList_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyPrefixFirCrList_result(queryByRowkeyPrefixFirCrList_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyPrefixFirCrList_result deepCopy() {
      return new queryByRowkeyPrefixFirCrList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyPrefixFirCrList_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyPrefixFirCrList_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyPrefixFirCrList_result)
        return this.equals((queryByRowkeyPrefixFirCrList_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyPrefixFirCrList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyPrefixFirCrList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyPrefixFirCrList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyPrefixFirCrList_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixFirCrList_resultStandardScheme getScheme() {
        return new queryByRowkeyPrefixFirCrList_resultStandardScheme();
      }
    }

    private static class queryByRowkeyPrefixFirCrList_resultStandardScheme extends StandardScheme<queryByRowkeyPrefixFirCrList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyPrefixFirCrList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list340 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list340.size);
                  for (int _i341 = 0; _i341 < _list340.size; ++_i341)
                  {
                    List<String> _elem342;
                    {
                      org.apache.thrift.protocol.TList _list343 = iprot.readListBegin();
                      _elem342 = new ArrayList<String>(_list343.size);
                      for (int _i344 = 0; _i344 < _list343.size; ++_i344)
                      {
                        String _elem345;
                        _elem345 = iprot.readString();
                        _elem342.add(_elem345);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem342);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyPrefixFirCrList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter346 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter346.size()));
                for (String _iter347 : _iter346)
                {
                  oprot.writeString(_iter347);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyPrefixFirCrList_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixFirCrList_resultTupleScheme getScheme() {
        return new queryByRowkeyPrefixFirCrList_resultTupleScheme();
      }
    }

    private static class queryByRowkeyPrefixFirCrList_resultTupleScheme extends TupleScheme<queryByRowkeyPrefixFirCrList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixFirCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter348 : struct.success)
            {
              {
                oprot.writeI32(_iter348.size());
                for (String _iter349 : _iter348)
                {
                  oprot.writeString(_iter349);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixFirCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list350 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list350.size);
            for (int _i351 = 0; _i351 < _list350.size; ++_i351)
            {
              List<String> _elem352;
              {
                org.apache.thrift.protocol.TList _list353 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem352 = new ArrayList<String>(_list353.size);
                for (int _i354 = 0; _i354 < _list353.size; ++_i354)
                {
                  String _elem355;
                  _elem355 = iprot.readString();
                  _elem352.add(_elem355);
                }
              }
              struct.success.add(_elem352);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyPrefixSec_args implements org.apache.thrift.TBase<queryByRowkeyPrefixSec_args, queryByRowkeyPrefixSec_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyPrefixSec_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyPrefixSec_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkeyPrefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilter", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField COLUMN_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnFilter", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyPrefixSec_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyPrefixSec_argsTupleSchemeFactory());
    }

    public String rowkeyPrefix; // required
    public List<String> tableNames; // required
    public String columnValueFilter; // required
    public Map<String,String> param; // required
    public Map<String,List<String>> columnFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY_PREFIX((short)1, "rowkeyPrefix"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER((short)3, "columnValueFilter"),
      PARAM((short)4, "param"),
      COLUMN_FILTER((short)5, "columnFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY_PREFIX
            return ROWKEY_PREFIX;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER
            return COLUMN_VALUE_FILTER;
          case 4: // PARAM
            return PARAM;
          case 5: // COLUMN_FILTER
            return COLUMN_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("rowkeyPrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyPrefixSec_args.class, metaDataMap);
    }

    public queryByRowkeyPrefixSec_args() {
    }

    public queryByRowkeyPrefixSec_args(
      String rowkeyPrefix,
      List<String> tableNames,
      String columnValueFilter,
      Map<String,String> param,
      Map<String,List<String>> columnFilter)
    {
      this();
      this.rowkeyPrefix = rowkeyPrefix;
      this.tableNames = tableNames;
      this.columnValueFilter = columnValueFilter;
      this.param = param;
      this.columnFilter = columnFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyPrefixSec_args(queryByRowkeyPrefixSec_args other) {
      if (other.isSetRowkeyPrefix()) {
        this.rowkeyPrefix = other.rowkeyPrefix;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilter()) {
        this.columnValueFilter = other.columnValueFilter;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
      if (other.isSetColumnFilter()) {
        Map<String,List<String>> __this__columnFilter = new HashMap<String,List<String>>(other.columnFilter.size());
        for (Map.Entry<String, List<String>> other_element : other.columnFilter.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__columnFilter_copy_key = other_element_key;

          List<String> __this__columnFilter_copy_value = new ArrayList<String>(other_element_value);

          __this__columnFilter.put(__this__columnFilter_copy_key, __this__columnFilter_copy_value);
        }
        this.columnFilter = __this__columnFilter;
      }
    }

    public queryByRowkeyPrefixSec_args deepCopy() {
      return new queryByRowkeyPrefixSec_args(this);
    }

    @Override
    public void clear() {
      this.rowkeyPrefix = null;
      this.tableNames = null;
      this.columnValueFilter = null;
      this.param = null;
      this.columnFilter = null;
    }

    public String getRowkeyPrefix() {
      return this.rowkeyPrefix;
    }

    public queryByRowkeyPrefixSec_args setRowkeyPrefix(String rowkeyPrefix) {
      this.rowkeyPrefix = rowkeyPrefix;
      return this;
    }

    public void unsetRowkeyPrefix() {
      this.rowkeyPrefix = null;
    }

    /** Returns true if field rowkeyPrefix is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkeyPrefix() {
      return this.rowkeyPrefix != null;
    }

    public void setRowkeyPrefixIsSet(boolean value) {
      if (!value) {
        this.rowkeyPrefix = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyPrefixSec_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public String getColumnValueFilter() {
      return this.columnValueFilter;
    }

    public queryByRowkeyPrefixSec_args setColumnValueFilter(String columnValueFilter) {
      this.columnValueFilter = columnValueFilter;
      return this;
    }

    public void unsetColumnValueFilter() {
      this.columnValueFilter = null;
    }

    /** Returns true if field columnValueFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilter() {
      return this.columnValueFilter != null;
    }

    public void setColumnValueFilterIsSet(boolean value) {
      if (!value) {
        this.columnValueFilter = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyPrefixSec_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public int getColumnFilterSize() {
      return (this.columnFilter == null) ? 0 : this.columnFilter.size();
    }

    public void putToColumnFilter(String key, List<String> val) {
      if (this.columnFilter == null) {
        this.columnFilter = new HashMap<String,List<String>>();
      }
      this.columnFilter.put(key, val);
    }

    public Map<String,List<String>> getColumnFilter() {
      return this.columnFilter;
    }

    public queryByRowkeyPrefixSec_args setColumnFilter(Map<String,List<String>> columnFilter) {
      this.columnFilter = columnFilter;
      return this;
    }

    public void unsetColumnFilter() {
      this.columnFilter = null;
    }

    /** Returns true if field columnFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnFilter() {
      return this.columnFilter != null;
    }

    public void setColumnFilterIsSet(boolean value) {
      if (!value) {
        this.columnFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY_PREFIX:
        if (value == null) {
          unsetRowkeyPrefix();
        } else {
          setRowkeyPrefix((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER:
        if (value == null) {
          unsetColumnValueFilter();
        } else {
          setColumnValueFilter((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      case COLUMN_FILTER:
        if (value == null) {
          unsetColumnFilter();
        } else {
          setColumnFilter((Map<String,List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY_PREFIX:
        return getRowkeyPrefix();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER:
        return getColumnValueFilter();

      case PARAM:
        return getParam();

      case COLUMN_FILTER:
        return getColumnFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY_PREFIX:
        return isSetRowkeyPrefix();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER:
        return isSetColumnValueFilter();
      case PARAM:
        return isSetParam();
      case COLUMN_FILTER:
        return isSetColumnFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyPrefixSec_args)
        return this.equals((queryByRowkeyPrefixSec_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyPrefixSec_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkeyPrefix = true && this.isSetRowkeyPrefix();
      boolean that_present_rowkeyPrefix = true && that.isSetRowkeyPrefix();
      if (this_present_rowkeyPrefix || that_present_rowkeyPrefix) {
        if (!(this_present_rowkeyPrefix && that_present_rowkeyPrefix))
          return false;
        if (!this.rowkeyPrefix.equals(that.rowkeyPrefix))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilter = true && this.isSetColumnValueFilter();
      boolean that_present_columnValueFilter = true && that.isSetColumnValueFilter();
      if (this_present_columnValueFilter || that_present_columnValueFilter) {
        if (!(this_present_columnValueFilter && that_present_columnValueFilter))
          return false;
        if (!this.columnValueFilter.equals(that.columnValueFilter))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      boolean this_present_columnFilter = true && this.isSetColumnFilter();
      boolean that_present_columnFilter = true && that.isSetColumnFilter();
      if (this_present_columnFilter || that_present_columnFilter) {
        if (!(this_present_columnFilter && that_present_columnFilter))
          return false;
        if (!this.columnFilter.equals(that.columnFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyPrefixSec_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkeyPrefix()).compareTo(other.isSetRowkeyPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkeyPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkeyPrefix, other.rowkeyPrefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilter()).compareTo(other.isSetColumnValueFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilter, other.columnValueFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnFilter()).compareTo(other.isSetColumnFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFilter, other.columnFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyPrefixSec_args(");
      boolean first = true;

      sb.append("rowkeyPrefix:");
      if (this.rowkeyPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkeyPrefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilter:");
      if (this.columnValueFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnFilter:");
      if (this.columnFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyPrefixSec_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixSec_argsStandardScheme getScheme() {
        return new queryByRowkeyPrefixSec_argsStandardScheme();
      }
    }

    private static class queryByRowkeyPrefixSec_argsStandardScheme extends StandardScheme<queryByRowkeyPrefixSec_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyPrefixSec_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkeyPrefix = iprot.readString();
                struct.setRowkeyPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list356 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list356.size);
                  for (int _i357 = 0; _i357 < _list356.size; ++_i357)
                  {
                    String _elem358;
                    _elem358 = iprot.readString();
                    struct.tableNames.add(_elem358);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.columnValueFilter = iprot.readString();
                struct.setColumnValueFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map359 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map359.size);
                  for (int _i360 = 0; _i360 < _map359.size; ++_i360)
                  {
                    String _key361;
                    String _val362;
                    _key361 = iprot.readString();
                    _val362 = iprot.readString();
                    struct.param.put(_key361, _val362);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COLUMN_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map363 = iprot.readMapBegin();
                  struct.columnFilter = new HashMap<String,List<String>>(2*_map363.size);
                  for (int _i364 = 0; _i364 < _map363.size; ++_i364)
                  {
                    String _key365;
                    List<String> _val366;
                    _key365 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list367 = iprot.readListBegin();
                      _val366 = new ArrayList<String>(_list367.size);
                      for (int _i368 = 0; _i368 < _list367.size; ++_i368)
                      {
                        String _elem369;
                        _elem369 = iprot.readString();
                        _val366.add(_elem369);
                      }
                      iprot.readListEnd();
                    }
                    struct.columnFilter.put(_key365, _val366);
                  }
                  iprot.readMapEnd();
                }
                struct.setColumnFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyPrefixSec_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkeyPrefix != null) {
          oprot.writeFieldBegin(ROWKEY_PREFIX_FIELD_DESC);
          oprot.writeString(struct.rowkeyPrefix);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter370 : struct.tableNames)
            {
              oprot.writeString(_iter370);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilter != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_FIELD_DESC);
          oprot.writeString(struct.columnValueFilter);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter371 : struct.param.entrySet())
            {
              oprot.writeString(_iter371.getKey());
              oprot.writeString(_iter371.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnFilter != null) {
          oprot.writeFieldBegin(COLUMN_FILTER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.columnFilter.size()));
            for (Map.Entry<String, List<String>> _iter372 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter372.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter372.getValue().size()));
                for (String _iter373 : _iter372.getValue())
                {
                  oprot.writeString(_iter373);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyPrefixSec_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixSec_argsTupleScheme getScheme() {
        return new queryByRowkeyPrefixSec_argsTupleScheme();
      }
    }

    private static class queryByRowkeyPrefixSec_argsTupleScheme extends TupleScheme<queryByRowkeyPrefixSec_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixSec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkeyPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilter()) {
          optionals.set(2);
        }
        if (struct.isSetParam()) {
          optionals.set(3);
        }
        if (struct.isSetColumnFilter()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRowkeyPrefix()) {
          oprot.writeString(struct.rowkeyPrefix);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter374 : struct.tableNames)
            {
              oprot.writeString(_iter374);
            }
          }
        }
        if (struct.isSetColumnValueFilter()) {
          oprot.writeString(struct.columnValueFilter);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter375 : struct.param.entrySet())
            {
              oprot.writeString(_iter375.getKey());
              oprot.writeString(_iter375.getValue());
            }
          }
        }
        if (struct.isSetColumnFilter()) {
          {
            oprot.writeI32(struct.columnFilter.size());
            for (Map.Entry<String, List<String>> _iter376 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter376.getKey());
              {
                oprot.writeI32(_iter376.getValue().size());
                for (String _iter377 : _iter376.getValue())
                {
                  oprot.writeString(_iter377);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixSec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.rowkeyPrefix = iprot.readString();
          struct.setRowkeyPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list378 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list378.size);
            for (int _i379 = 0; _i379 < _list378.size; ++_i379)
            {
              String _elem380;
              _elem380 = iprot.readString();
              struct.tableNames.add(_elem380);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.columnValueFilter = iprot.readString();
          struct.setColumnValueFilterIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map381 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map381.size);
            for (int _i382 = 0; _i382 < _map381.size; ++_i382)
            {
              String _key383;
              String _val384;
              _key383 = iprot.readString();
              _val384 = iprot.readString();
              struct.param.put(_key383, _val384);
            }
          }
          struct.setParamIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map385 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.columnFilter = new HashMap<String,List<String>>(2*_map385.size);
            for (int _i386 = 0; _i386 < _map385.size; ++_i386)
            {
              String _key387;
              List<String> _val388;
              _key387 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list389 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val388 = new ArrayList<String>(_list389.size);
                for (int _i390 = 0; _i390 < _list389.size; ++_i390)
                {
                  String _elem391;
                  _elem391 = iprot.readString();
                  _val388.add(_elem391);
                }
              }
              struct.columnFilter.put(_key387, _val388);
            }
          }
          struct.setColumnFilterIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyPrefixSec_result implements org.apache.thrift.TBase<queryByRowkeyPrefixSec_result, queryByRowkeyPrefixSec_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyPrefixSec_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyPrefixSec_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyPrefixSec_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyPrefixSec_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyPrefixSec_result.class, metaDataMap);
    }

    public queryByRowkeyPrefixSec_result() {
    }

    public queryByRowkeyPrefixSec_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyPrefixSec_result(queryByRowkeyPrefixSec_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyPrefixSec_result deepCopy() {
      return new queryByRowkeyPrefixSec_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyPrefixSec_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyPrefixSec_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyPrefixSec_result)
        return this.equals((queryByRowkeyPrefixSec_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyPrefixSec_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyPrefixSec_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyPrefixSec_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyPrefixSec_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixSec_resultStandardScheme getScheme() {
        return new queryByRowkeyPrefixSec_resultStandardScheme();
      }
    }

    private static class queryByRowkeyPrefixSec_resultStandardScheme extends StandardScheme<queryByRowkeyPrefixSec_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyPrefixSec_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list392 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list392.size);
                  for (int _i393 = 0; _i393 < _list392.size; ++_i393)
                  {
                    List<String> _elem394;
                    {
                      org.apache.thrift.protocol.TList _list395 = iprot.readListBegin();
                      _elem394 = new ArrayList<String>(_list395.size);
                      for (int _i396 = 0; _i396 < _list395.size; ++_i396)
                      {
                        String _elem397;
                        _elem397 = iprot.readString();
                        _elem394.add(_elem397);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem394);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyPrefixSec_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter398 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter398.size()));
                for (String _iter399 : _iter398)
                {
                  oprot.writeString(_iter399);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyPrefixSec_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixSec_resultTupleScheme getScheme() {
        return new queryByRowkeyPrefixSec_resultTupleScheme();
      }
    }

    private static class queryByRowkeyPrefixSec_resultTupleScheme extends TupleScheme<queryByRowkeyPrefixSec_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixSec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter400 : struct.success)
            {
              {
                oprot.writeI32(_iter400.size());
                for (String _iter401 : _iter400)
                {
                  oprot.writeString(_iter401);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixSec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list402 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list402.size);
            for (int _i403 = 0; _i403 < _list402.size; ++_i403)
            {
              List<String> _elem404;
              {
                org.apache.thrift.protocol.TList _list405 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem404 = new ArrayList<String>(_list405.size);
                for (int _i406 = 0; _i406 < _list405.size; ++_i406)
                {
                  String _elem407;
                  _elem407 = iprot.readString();
                  _elem404.add(_elem407);
                }
              }
              struct.success.add(_elem404);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyPrefixSecCrList_args implements org.apache.thrift.TBase<queryByRowkeyPrefixSecCrList_args, queryByRowkeyPrefixSecCrList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyPrefixSecCrList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyPrefixSecCrList_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkeyPrefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilterList", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField LOGICAL_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("logicalOpt", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)5);
    private static final org.apache.thrift.protocol.TField COLUMN_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnFilter", org.apache.thrift.protocol.TType.MAP, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyPrefixSecCrList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyPrefixSecCrList_argsTupleSchemeFactory());
    }

    public String rowkeyPrefix; // required
    public List<String> tableNames; // required
    public List<String> columnValueFilterList; // required
    public String logicalOpt; // required
    public Map<String,String> param; // required
    public Map<String,List<String>> columnFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY_PREFIX((short)1, "rowkeyPrefix"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER_LIST((short)3, "columnValueFilterList"),
      LOGICAL_OPT((short)4, "logicalOpt"),
      PARAM((short)5, "param"),
      COLUMN_FILTER((short)6, "columnFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY_PREFIX
            return ROWKEY_PREFIX;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER_LIST
            return COLUMN_VALUE_FILTER_LIST;
          case 4: // LOGICAL_OPT
            return LOGICAL_OPT;
          case 5: // PARAM
            return PARAM;
          case 6: // COLUMN_FILTER
            return COLUMN_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("rowkeyPrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOGICAL_OPT, new org.apache.thrift.meta_data.FieldMetaData("logicalOpt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyPrefixSecCrList_args.class, metaDataMap);
    }

    public queryByRowkeyPrefixSecCrList_args() {
    }

    public queryByRowkeyPrefixSecCrList_args(
      String rowkeyPrefix,
      List<String> tableNames,
      List<String> columnValueFilterList,
      String logicalOpt,
      Map<String,String> param,
      Map<String,List<String>> columnFilter)
    {
      this();
      this.rowkeyPrefix = rowkeyPrefix;
      this.tableNames = tableNames;
      this.columnValueFilterList = columnValueFilterList;
      this.logicalOpt = logicalOpt;
      this.param = param;
      this.columnFilter = columnFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyPrefixSecCrList_args(queryByRowkeyPrefixSecCrList_args other) {
      if (other.isSetRowkeyPrefix()) {
        this.rowkeyPrefix = other.rowkeyPrefix;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilterList()) {
        List<String> __this__columnValueFilterList = new ArrayList<String>(other.columnValueFilterList);
        this.columnValueFilterList = __this__columnValueFilterList;
      }
      if (other.isSetLogicalOpt()) {
        this.logicalOpt = other.logicalOpt;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
      if (other.isSetColumnFilter()) {
        Map<String,List<String>> __this__columnFilter = new HashMap<String,List<String>>(other.columnFilter.size());
        for (Map.Entry<String, List<String>> other_element : other.columnFilter.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__columnFilter_copy_key = other_element_key;

          List<String> __this__columnFilter_copy_value = new ArrayList<String>(other_element_value);

          __this__columnFilter.put(__this__columnFilter_copy_key, __this__columnFilter_copy_value);
        }
        this.columnFilter = __this__columnFilter;
      }
    }

    public queryByRowkeyPrefixSecCrList_args deepCopy() {
      return new queryByRowkeyPrefixSecCrList_args(this);
    }

    @Override
    public void clear() {
      this.rowkeyPrefix = null;
      this.tableNames = null;
      this.columnValueFilterList = null;
      this.logicalOpt = null;
      this.param = null;
      this.columnFilter = null;
    }

    public String getRowkeyPrefix() {
      return this.rowkeyPrefix;
    }

    public queryByRowkeyPrefixSecCrList_args setRowkeyPrefix(String rowkeyPrefix) {
      this.rowkeyPrefix = rowkeyPrefix;
      return this;
    }

    public void unsetRowkeyPrefix() {
      this.rowkeyPrefix = null;
    }

    /** Returns true if field rowkeyPrefix is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkeyPrefix() {
      return this.rowkeyPrefix != null;
    }

    public void setRowkeyPrefixIsSet(boolean value) {
      if (!value) {
        this.rowkeyPrefix = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyPrefixSecCrList_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public int getColumnValueFilterListSize() {
      return (this.columnValueFilterList == null) ? 0 : this.columnValueFilterList.size();
    }

    public java.util.Iterator<String> getColumnValueFilterListIterator() {
      return (this.columnValueFilterList == null) ? null : this.columnValueFilterList.iterator();
    }

    public void addToColumnValueFilterList(String elem) {
      if (this.columnValueFilterList == null) {
        this.columnValueFilterList = new ArrayList<String>();
      }
      this.columnValueFilterList.add(elem);
    }

    public List<String> getColumnValueFilterList() {
      return this.columnValueFilterList;
    }

    public queryByRowkeyPrefixSecCrList_args setColumnValueFilterList(List<String> columnValueFilterList) {
      this.columnValueFilterList = columnValueFilterList;
      return this;
    }

    public void unsetColumnValueFilterList() {
      this.columnValueFilterList = null;
    }

    /** Returns true if field columnValueFilterList is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilterList() {
      return this.columnValueFilterList != null;
    }

    public void setColumnValueFilterListIsSet(boolean value) {
      if (!value) {
        this.columnValueFilterList = null;
      }
    }

    public String getLogicalOpt() {
      return this.logicalOpt;
    }

    public queryByRowkeyPrefixSecCrList_args setLogicalOpt(String logicalOpt) {
      this.logicalOpt = logicalOpt;
      return this;
    }

    public void unsetLogicalOpt() {
      this.logicalOpt = null;
    }

    /** Returns true if field logicalOpt is set (has been assigned a value) and false otherwise */
    public boolean isSetLogicalOpt() {
      return this.logicalOpt != null;
    }

    public void setLogicalOptIsSet(boolean value) {
      if (!value) {
        this.logicalOpt = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyPrefixSecCrList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public int getColumnFilterSize() {
      return (this.columnFilter == null) ? 0 : this.columnFilter.size();
    }

    public void putToColumnFilter(String key, List<String> val) {
      if (this.columnFilter == null) {
        this.columnFilter = new HashMap<String,List<String>>();
      }
      this.columnFilter.put(key, val);
    }

    public Map<String,List<String>> getColumnFilter() {
      return this.columnFilter;
    }

    public queryByRowkeyPrefixSecCrList_args setColumnFilter(Map<String,List<String>> columnFilter) {
      this.columnFilter = columnFilter;
      return this;
    }

    public void unsetColumnFilter() {
      this.columnFilter = null;
    }

    /** Returns true if field columnFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnFilter() {
      return this.columnFilter != null;
    }

    public void setColumnFilterIsSet(boolean value) {
      if (!value) {
        this.columnFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY_PREFIX:
        if (value == null) {
          unsetRowkeyPrefix();
        } else {
          setRowkeyPrefix((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER_LIST:
        if (value == null) {
          unsetColumnValueFilterList();
        } else {
          setColumnValueFilterList((List<String>)value);
        }
        break;

      case LOGICAL_OPT:
        if (value == null) {
          unsetLogicalOpt();
        } else {
          setLogicalOpt((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      case COLUMN_FILTER:
        if (value == null) {
          unsetColumnFilter();
        } else {
          setColumnFilter((Map<String,List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY_PREFIX:
        return getRowkeyPrefix();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER_LIST:
        return getColumnValueFilterList();

      case LOGICAL_OPT:
        return getLogicalOpt();

      case PARAM:
        return getParam();

      case COLUMN_FILTER:
        return getColumnFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY_PREFIX:
        return isSetRowkeyPrefix();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER_LIST:
        return isSetColumnValueFilterList();
      case LOGICAL_OPT:
        return isSetLogicalOpt();
      case PARAM:
        return isSetParam();
      case COLUMN_FILTER:
        return isSetColumnFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyPrefixSecCrList_args)
        return this.equals((queryByRowkeyPrefixSecCrList_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyPrefixSecCrList_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkeyPrefix = true && this.isSetRowkeyPrefix();
      boolean that_present_rowkeyPrefix = true && that.isSetRowkeyPrefix();
      if (this_present_rowkeyPrefix || that_present_rowkeyPrefix) {
        if (!(this_present_rowkeyPrefix && that_present_rowkeyPrefix))
          return false;
        if (!this.rowkeyPrefix.equals(that.rowkeyPrefix))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilterList = true && this.isSetColumnValueFilterList();
      boolean that_present_columnValueFilterList = true && that.isSetColumnValueFilterList();
      if (this_present_columnValueFilterList || that_present_columnValueFilterList) {
        if (!(this_present_columnValueFilterList && that_present_columnValueFilterList))
          return false;
        if (!this.columnValueFilterList.equals(that.columnValueFilterList))
          return false;
      }

      boolean this_present_logicalOpt = true && this.isSetLogicalOpt();
      boolean that_present_logicalOpt = true && that.isSetLogicalOpt();
      if (this_present_logicalOpt || that_present_logicalOpt) {
        if (!(this_present_logicalOpt && that_present_logicalOpt))
          return false;
        if (!this.logicalOpt.equals(that.logicalOpt))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      boolean this_present_columnFilter = true && this.isSetColumnFilter();
      boolean that_present_columnFilter = true && that.isSetColumnFilter();
      if (this_present_columnFilter || that_present_columnFilter) {
        if (!(this_present_columnFilter && that_present_columnFilter))
          return false;
        if (!this.columnFilter.equals(that.columnFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyPrefixSecCrList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkeyPrefix()).compareTo(other.isSetRowkeyPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkeyPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkeyPrefix, other.rowkeyPrefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilterList()).compareTo(other.isSetColumnValueFilterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilterList, other.columnValueFilterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogicalOpt()).compareTo(other.isSetLogicalOpt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogicalOpt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicalOpt, other.logicalOpt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnFilter()).compareTo(other.isSetColumnFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFilter, other.columnFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyPrefixSecCrList_args(");
      boolean first = true;

      sb.append("rowkeyPrefix:");
      if (this.rowkeyPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkeyPrefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilterList:");
      if (this.columnValueFilterList == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logicalOpt:");
      if (this.logicalOpt == null) {
        sb.append("null");
      } else {
        sb.append(this.logicalOpt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnFilter:");
      if (this.columnFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyPrefixSecCrList_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixSecCrList_argsStandardScheme getScheme() {
        return new queryByRowkeyPrefixSecCrList_argsStandardScheme();
      }
    }

    private static class queryByRowkeyPrefixSecCrList_argsStandardScheme extends StandardScheme<queryByRowkeyPrefixSecCrList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyPrefixSecCrList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkeyPrefix = iprot.readString();
                struct.setRowkeyPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list408 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list408.size);
                  for (int _i409 = 0; _i409 < _list408.size; ++_i409)
                  {
                    String _elem410;
                    _elem410 = iprot.readString();
                    struct.tableNames.add(_elem410);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list411 = iprot.readListBegin();
                  struct.columnValueFilterList = new ArrayList<String>(_list411.size);
                  for (int _i412 = 0; _i412 < _list411.size; ++_i412)
                  {
                    String _elem413;
                    _elem413 = iprot.readString();
                    struct.columnValueFilterList.add(_elem413);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnValueFilterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOGICAL_OPT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logicalOpt = iprot.readString();
                struct.setLogicalOptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map414 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map414.size);
                  for (int _i415 = 0; _i415 < _map414.size; ++_i415)
                  {
                    String _key416;
                    String _val417;
                    _key416 = iprot.readString();
                    _val417 = iprot.readString();
                    struct.param.put(_key416, _val417);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COLUMN_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map418 = iprot.readMapBegin();
                  struct.columnFilter = new HashMap<String,List<String>>(2*_map418.size);
                  for (int _i419 = 0; _i419 < _map418.size; ++_i419)
                  {
                    String _key420;
                    List<String> _val421;
                    _key420 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list422 = iprot.readListBegin();
                      _val421 = new ArrayList<String>(_list422.size);
                      for (int _i423 = 0; _i423 < _list422.size; ++_i423)
                      {
                        String _elem424;
                        _elem424 = iprot.readString();
                        _val421.add(_elem424);
                      }
                      iprot.readListEnd();
                    }
                    struct.columnFilter.put(_key420, _val421);
                  }
                  iprot.readMapEnd();
                }
                struct.setColumnFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyPrefixSecCrList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkeyPrefix != null) {
          oprot.writeFieldBegin(ROWKEY_PREFIX_FIELD_DESC);
          oprot.writeString(struct.rowkeyPrefix);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter425 : struct.tableNames)
            {
              oprot.writeString(_iter425);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilterList != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnValueFilterList.size()));
            for (String _iter426 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter426);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.logicalOpt != null) {
          oprot.writeFieldBegin(LOGICAL_OPT_FIELD_DESC);
          oprot.writeString(struct.logicalOpt);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter427 : struct.param.entrySet())
            {
              oprot.writeString(_iter427.getKey());
              oprot.writeString(_iter427.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnFilter != null) {
          oprot.writeFieldBegin(COLUMN_FILTER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.columnFilter.size()));
            for (Map.Entry<String, List<String>> _iter428 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter428.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter428.getValue().size()));
                for (String _iter429 : _iter428.getValue())
                {
                  oprot.writeString(_iter429);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyPrefixSecCrList_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixSecCrList_argsTupleScheme getScheme() {
        return new queryByRowkeyPrefixSecCrList_argsTupleScheme();
      }
    }

    private static class queryByRowkeyPrefixSecCrList_argsTupleScheme extends TupleScheme<queryByRowkeyPrefixSecCrList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixSecCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkeyPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilterList()) {
          optionals.set(2);
        }
        if (struct.isSetLogicalOpt()) {
          optionals.set(3);
        }
        if (struct.isSetParam()) {
          optionals.set(4);
        }
        if (struct.isSetColumnFilter()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRowkeyPrefix()) {
          oprot.writeString(struct.rowkeyPrefix);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter430 : struct.tableNames)
            {
              oprot.writeString(_iter430);
            }
          }
        }
        if (struct.isSetColumnValueFilterList()) {
          {
            oprot.writeI32(struct.columnValueFilterList.size());
            for (String _iter431 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter431);
            }
          }
        }
        if (struct.isSetLogicalOpt()) {
          oprot.writeString(struct.logicalOpt);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter432 : struct.param.entrySet())
            {
              oprot.writeString(_iter432.getKey());
              oprot.writeString(_iter432.getValue());
            }
          }
        }
        if (struct.isSetColumnFilter()) {
          {
            oprot.writeI32(struct.columnFilter.size());
            for (Map.Entry<String, List<String>> _iter433 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter433.getKey());
              {
                oprot.writeI32(_iter433.getValue().size());
                for (String _iter434 : _iter433.getValue())
                {
                  oprot.writeString(_iter434);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixSecCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.rowkeyPrefix = iprot.readString();
          struct.setRowkeyPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list435 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list435.size);
            for (int _i436 = 0; _i436 < _list435.size; ++_i436)
            {
              String _elem437;
              _elem437 = iprot.readString();
              struct.tableNames.add(_elem437);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list438 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columnValueFilterList = new ArrayList<String>(_list438.size);
            for (int _i439 = 0; _i439 < _list438.size; ++_i439)
            {
              String _elem440;
              _elem440 = iprot.readString();
              struct.columnValueFilterList.add(_elem440);
            }
          }
          struct.setColumnValueFilterListIsSet(true);
        }
        if (incoming.get(3)) {
          struct.logicalOpt = iprot.readString();
          struct.setLogicalOptIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map441 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map441.size);
            for (int _i442 = 0; _i442 < _map441.size; ++_i442)
            {
              String _key443;
              String _val444;
              _key443 = iprot.readString();
              _val444 = iprot.readString();
              struct.param.put(_key443, _val444);
            }
          }
          struct.setParamIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map445 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.columnFilter = new HashMap<String,List<String>>(2*_map445.size);
            for (int _i446 = 0; _i446 < _map445.size; ++_i446)
            {
              String _key447;
              List<String> _val448;
              _key447 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list449 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val448 = new ArrayList<String>(_list449.size);
                for (int _i450 = 0; _i450 < _list449.size; ++_i450)
                {
                  String _elem451;
                  _elem451 = iprot.readString();
                  _val448.add(_elem451);
                }
              }
              struct.columnFilter.put(_key447, _val448);
            }
          }
          struct.setColumnFilterIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyPrefixSecCrList_result implements org.apache.thrift.TBase<queryByRowkeyPrefixSecCrList_result, queryByRowkeyPrefixSecCrList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyPrefixSecCrList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyPrefixSecCrList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyPrefixSecCrList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyPrefixSecCrList_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyPrefixSecCrList_result.class, metaDataMap);
    }

    public queryByRowkeyPrefixSecCrList_result() {
    }

    public queryByRowkeyPrefixSecCrList_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyPrefixSecCrList_result(queryByRowkeyPrefixSecCrList_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyPrefixSecCrList_result deepCopy() {
      return new queryByRowkeyPrefixSecCrList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyPrefixSecCrList_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyPrefixSecCrList_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyPrefixSecCrList_result)
        return this.equals((queryByRowkeyPrefixSecCrList_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyPrefixSecCrList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyPrefixSecCrList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyPrefixSecCrList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyPrefixSecCrList_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixSecCrList_resultStandardScheme getScheme() {
        return new queryByRowkeyPrefixSecCrList_resultStandardScheme();
      }
    }

    private static class queryByRowkeyPrefixSecCrList_resultStandardScheme extends StandardScheme<queryByRowkeyPrefixSecCrList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyPrefixSecCrList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list452 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list452.size);
                  for (int _i453 = 0; _i453 < _list452.size; ++_i453)
                  {
                    List<String> _elem454;
                    {
                      org.apache.thrift.protocol.TList _list455 = iprot.readListBegin();
                      _elem454 = new ArrayList<String>(_list455.size);
                      for (int _i456 = 0; _i456 < _list455.size; ++_i456)
                      {
                        String _elem457;
                        _elem457 = iprot.readString();
                        _elem454.add(_elem457);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem454);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyPrefixSecCrList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter458 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter458.size()));
                for (String _iter459 : _iter458)
                {
                  oprot.writeString(_iter459);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyPrefixSecCrList_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyPrefixSecCrList_resultTupleScheme getScheme() {
        return new queryByRowkeyPrefixSecCrList_resultTupleScheme();
      }
    }

    private static class queryByRowkeyPrefixSecCrList_resultTupleScheme extends TupleScheme<queryByRowkeyPrefixSecCrList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixSecCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter460 : struct.success)
            {
              {
                oprot.writeI32(_iter460.size());
                for (String _iter461 : _iter460)
                {
                  oprot.writeString(_iter461);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyPrefixSecCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list462 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list462.size);
            for (int _i463 = 0; _i463 < _list462.size; ++_i463)
            {
              List<String> _elem464;
              {
                org.apache.thrift.protocol.TList _list465 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem464 = new ArrayList<String>(_list465.size);
                for (int _i466 = 0; _i466 < _list465.size; ++_i466)
                {
                  String _elem467;
                  _elem467 = iprot.readString();
                  _elem464.add(_elem467);
                }
              }
              struct.success.add(_elem464);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFou_args implements org.apache.thrift.TBase<queryByRowkeyFou_args, queryByRowkeyFou_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFou_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFou_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilter", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField COLUMN_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnFilter", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFou_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFou_argsTupleSchemeFactory());
    }

    public List<String> rowkey; // required
    public List<String> tableNames; // required
    public String columnValueFilter; // required
    public Map<String,String> param; // required
    public Map<String,List<String>> columnFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER((short)3, "columnValueFilter"),
      PARAM((short)4, "param"),
      COLUMN_FILTER((short)5, "columnFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER
            return COLUMN_VALUE_FILTER;
          case 4: // PARAM
            return PARAM;
          case 5: // COLUMN_FILTER
            return COLUMN_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFou_args.class, metaDataMap);
    }

    public queryByRowkeyFou_args() {
    }

    public queryByRowkeyFou_args(
      List<String> rowkey,
      List<String> tableNames,
      String columnValueFilter,
      Map<String,String> param,
      Map<String,List<String>> columnFilter)
    {
      this();
      this.rowkey = rowkey;
      this.tableNames = tableNames;
      this.columnValueFilter = columnValueFilter;
      this.param = param;
      this.columnFilter = columnFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFou_args(queryByRowkeyFou_args other) {
      if (other.isSetRowkey()) {
        List<String> __this__rowkey = new ArrayList<String>(other.rowkey);
        this.rowkey = __this__rowkey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilter()) {
        this.columnValueFilter = other.columnValueFilter;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
      if (other.isSetColumnFilter()) {
        Map<String,List<String>> __this__columnFilter = new HashMap<String,List<String>>(other.columnFilter.size());
        for (Map.Entry<String, List<String>> other_element : other.columnFilter.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__columnFilter_copy_key = other_element_key;

          List<String> __this__columnFilter_copy_value = new ArrayList<String>(other_element_value);

          __this__columnFilter.put(__this__columnFilter_copy_key, __this__columnFilter_copy_value);
        }
        this.columnFilter = __this__columnFilter;
      }
    }

    public queryByRowkeyFou_args deepCopy() {
      return new queryByRowkeyFou_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
      this.tableNames = null;
      this.columnValueFilter = null;
      this.param = null;
      this.columnFilter = null;
    }

    public int getRowkeySize() {
      return (this.rowkey == null) ? 0 : this.rowkey.size();
    }

    public java.util.Iterator<String> getRowkeyIterator() {
      return (this.rowkey == null) ? null : this.rowkey.iterator();
    }

    public void addToRowkey(String elem) {
      if (this.rowkey == null) {
        this.rowkey = new ArrayList<String>();
      }
      this.rowkey.add(elem);
    }

    public List<String> getRowkey() {
      return this.rowkey;
    }

    public queryByRowkeyFou_args setRowkey(List<String> rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyFou_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public String getColumnValueFilter() {
      return this.columnValueFilter;
    }

    public queryByRowkeyFou_args setColumnValueFilter(String columnValueFilter) {
      this.columnValueFilter = columnValueFilter;
      return this;
    }

    public void unsetColumnValueFilter() {
      this.columnValueFilter = null;
    }

    /** Returns true if field columnValueFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilter() {
      return this.columnValueFilter != null;
    }

    public void setColumnValueFilterIsSet(boolean value) {
      if (!value) {
        this.columnValueFilter = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyFou_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public int getColumnFilterSize() {
      return (this.columnFilter == null) ? 0 : this.columnFilter.size();
    }

    public void putToColumnFilter(String key, List<String> val) {
      if (this.columnFilter == null) {
        this.columnFilter = new HashMap<String,List<String>>();
      }
      this.columnFilter.put(key, val);
    }

    public Map<String,List<String>> getColumnFilter() {
      return this.columnFilter;
    }

    public queryByRowkeyFou_args setColumnFilter(Map<String,List<String>> columnFilter) {
      this.columnFilter = columnFilter;
      return this;
    }

    public void unsetColumnFilter() {
      this.columnFilter = null;
    }

    /** Returns true if field columnFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnFilter() {
      return this.columnFilter != null;
    }

    public void setColumnFilterIsSet(boolean value) {
      if (!value) {
        this.columnFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((List<String>)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER:
        if (value == null) {
          unsetColumnValueFilter();
        } else {
          setColumnValueFilter((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      case COLUMN_FILTER:
        if (value == null) {
          unsetColumnFilter();
        } else {
          setColumnFilter((Map<String,List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER:
        return getColumnValueFilter();

      case PARAM:
        return getParam();

      case COLUMN_FILTER:
        return getColumnFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER:
        return isSetColumnValueFilter();
      case PARAM:
        return isSetParam();
      case COLUMN_FILTER:
        return isSetColumnFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFou_args)
        return this.equals((queryByRowkeyFou_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyFou_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilter = true && this.isSetColumnValueFilter();
      boolean that_present_columnValueFilter = true && that.isSetColumnValueFilter();
      if (this_present_columnValueFilter || that_present_columnValueFilter) {
        if (!(this_present_columnValueFilter && that_present_columnValueFilter))
          return false;
        if (!this.columnValueFilter.equals(that.columnValueFilter))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      boolean this_present_columnFilter = true && this.isSetColumnFilter();
      boolean that_present_columnFilter = true && that.isSetColumnFilter();
      if (this_present_columnFilter || that_present_columnFilter) {
        if (!(this_present_columnFilter && that_present_columnFilter))
          return false;
        if (!this.columnFilter.equals(that.columnFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFou_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(other.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, other.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilter()).compareTo(other.isSetColumnValueFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilter, other.columnValueFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnFilter()).compareTo(other.isSetColumnFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFilter, other.columnFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFou_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilter:");
      if (this.columnValueFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnFilter:");
      if (this.columnFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFou_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFou_argsStandardScheme getScheme() {
        return new queryByRowkeyFou_argsStandardScheme();
      }
    }

    private static class queryByRowkeyFou_argsStandardScheme extends StandardScheme<queryByRowkeyFou_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFou_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list468 = iprot.readListBegin();
                  struct.rowkey = new ArrayList<String>(_list468.size);
                  for (int _i469 = 0; _i469 < _list468.size; ++_i469)
                  {
                    String _elem470;
                    _elem470 = iprot.readString();
                    struct.rowkey.add(_elem470);
                  }
                  iprot.readListEnd();
                }
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list471 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list471.size);
                  for (int _i472 = 0; _i472 < _list471.size; ++_i472)
                  {
                    String _elem473;
                    _elem473 = iprot.readString();
                    struct.tableNames.add(_elem473);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.columnValueFilter = iprot.readString();
                struct.setColumnValueFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map474 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map474.size);
                  for (int _i475 = 0; _i475 < _map474.size; ++_i475)
                  {
                    String _key476;
                    String _val477;
                    _key476 = iprot.readString();
                    _val477 = iprot.readString();
                    struct.param.put(_key476, _val477);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COLUMN_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map478 = iprot.readMapBegin();
                  struct.columnFilter = new HashMap<String,List<String>>(2*_map478.size);
                  for (int _i479 = 0; _i479 < _map478.size; ++_i479)
                  {
                    String _key480;
                    List<String> _val481;
                    _key480 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list482 = iprot.readListBegin();
                      _val481 = new ArrayList<String>(_list482.size);
                      for (int _i483 = 0; _i483 < _list482.size; ++_i483)
                      {
                        String _elem484;
                        _elem484 = iprot.readString();
                        _val481.add(_elem484);
                      }
                      iprot.readListEnd();
                    }
                    struct.columnFilter.put(_key480, _val481);
                  }
                  iprot.readMapEnd();
                }
                struct.setColumnFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFou_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.rowkey.size()));
            for (String _iter485 : struct.rowkey)
            {
              oprot.writeString(_iter485);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter486 : struct.tableNames)
            {
              oprot.writeString(_iter486);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilter != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_FIELD_DESC);
          oprot.writeString(struct.columnValueFilter);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter487 : struct.param.entrySet())
            {
              oprot.writeString(_iter487.getKey());
              oprot.writeString(_iter487.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnFilter != null) {
          oprot.writeFieldBegin(COLUMN_FILTER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.columnFilter.size()));
            for (Map.Entry<String, List<String>> _iter488 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter488.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter488.getValue().size()));
                for (String _iter489 : _iter488.getValue())
                {
                  oprot.writeString(_iter489);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFou_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFou_argsTupleScheme getScheme() {
        return new queryByRowkeyFou_argsTupleScheme();
      }
    }

    private static class queryByRowkeyFou_argsTupleScheme extends TupleScheme<queryByRowkeyFou_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFou_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilter()) {
          optionals.set(2);
        }
        if (struct.isSetParam()) {
          optionals.set(3);
        }
        if (struct.isSetColumnFilter()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRowkey()) {
          {
            oprot.writeI32(struct.rowkey.size());
            for (String _iter490 : struct.rowkey)
            {
              oprot.writeString(_iter490);
            }
          }
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter491 : struct.tableNames)
            {
              oprot.writeString(_iter491);
            }
          }
        }
        if (struct.isSetColumnValueFilter()) {
          oprot.writeString(struct.columnValueFilter);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter492 : struct.param.entrySet())
            {
              oprot.writeString(_iter492.getKey());
              oprot.writeString(_iter492.getValue());
            }
          }
        }
        if (struct.isSetColumnFilter()) {
          {
            oprot.writeI32(struct.columnFilter.size());
            for (Map.Entry<String, List<String>> _iter493 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter493.getKey());
              {
                oprot.writeI32(_iter493.getValue().size());
                for (String _iter494 : _iter493.getValue())
                {
                  oprot.writeString(_iter494);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFou_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list495 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.rowkey = new ArrayList<String>(_list495.size);
            for (int _i496 = 0; _i496 < _list495.size; ++_i496)
            {
              String _elem497;
              _elem497 = iprot.readString();
              struct.rowkey.add(_elem497);
            }
          }
          struct.setRowkeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list498 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list498.size);
            for (int _i499 = 0; _i499 < _list498.size; ++_i499)
            {
              String _elem500;
              _elem500 = iprot.readString();
              struct.tableNames.add(_elem500);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.columnValueFilter = iprot.readString();
          struct.setColumnValueFilterIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map501 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map501.size);
            for (int _i502 = 0; _i502 < _map501.size; ++_i502)
            {
              String _key503;
              String _val504;
              _key503 = iprot.readString();
              _val504 = iprot.readString();
              struct.param.put(_key503, _val504);
            }
          }
          struct.setParamIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map505 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.columnFilter = new HashMap<String,List<String>>(2*_map505.size);
            for (int _i506 = 0; _i506 < _map505.size; ++_i506)
            {
              String _key507;
              List<String> _val508;
              _key507 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list509 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val508 = new ArrayList<String>(_list509.size);
                for (int _i510 = 0; _i510 < _list509.size; ++_i510)
                {
                  String _elem511;
                  _elem511 = iprot.readString();
                  _val508.add(_elem511);
                }
              }
              struct.columnFilter.put(_key507, _val508);
            }
          }
          struct.setColumnFilterIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFou_result implements org.apache.thrift.TBase<queryByRowkeyFou_result, queryByRowkeyFou_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFou_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFou_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFou_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFou_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFou_result.class, metaDataMap);
    }

    public queryByRowkeyFou_result() {
    }

    public queryByRowkeyFou_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFou_result(queryByRowkeyFou_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyFou_result deepCopy() {
      return new queryByRowkeyFou_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyFou_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyFou_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFou_result)
        return this.equals((queryByRowkeyFou_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyFou_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFou_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFou_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFou_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFou_resultStandardScheme getScheme() {
        return new queryByRowkeyFou_resultStandardScheme();
      }
    }

    private static class queryByRowkeyFou_resultStandardScheme extends StandardScheme<queryByRowkeyFou_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFou_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list512 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list512.size);
                  for (int _i513 = 0; _i513 < _list512.size; ++_i513)
                  {
                    List<String> _elem514;
                    {
                      org.apache.thrift.protocol.TList _list515 = iprot.readListBegin();
                      _elem514 = new ArrayList<String>(_list515.size);
                      for (int _i516 = 0; _i516 < _list515.size; ++_i516)
                      {
                        String _elem517;
                        _elem517 = iprot.readString();
                        _elem514.add(_elem517);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem514);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFou_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter518 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter518.size()));
                for (String _iter519 : _iter518)
                {
                  oprot.writeString(_iter519);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFou_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFou_resultTupleScheme getScheme() {
        return new queryByRowkeyFou_resultTupleScheme();
      }
    }

    private static class queryByRowkeyFou_resultTupleScheme extends TupleScheme<queryByRowkeyFou_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFou_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter520 : struct.success)
            {
              {
                oprot.writeI32(_iter520.size());
                for (String _iter521 : _iter520)
                {
                  oprot.writeString(_iter521);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFou_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list522 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list522.size);
            for (int _i523 = 0; _i523 < _list522.size; ++_i523)
            {
              List<String> _elem524;
              {
                org.apache.thrift.protocol.TList _list525 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem524 = new ArrayList<String>(_list525.size);
                for (int _i526 = 0; _i526 < _list525.size; ++_i526)
                {
                  String _elem527;
                  _elem527 = iprot.readString();
                  _elem524.add(_elem527);
                }
              }
              struct.success.add(_elem524);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFouCrList_args implements org.apache.thrift.TBase<queryByRowkeyFouCrList_args, queryByRowkeyFouCrList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFouCrList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFouCrList_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilterList", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField LOGICAL_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("logicalOpt", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)5);
    private static final org.apache.thrift.protocol.TField COLUMN_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnFilter", org.apache.thrift.protocol.TType.MAP, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFouCrList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFouCrList_argsTupleSchemeFactory());
    }

    public List<String> rowkey; // required
    public List<String> tableNames; // required
    public List<String> columnValueFilterList; // required
    public String logicalOpt; // required
    public Map<String,String> param; // required
    public Map<String,List<String>> columnFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey"),
      TABLE_NAMES((short)2, "tableNames"),
      COLUMN_VALUE_FILTER_LIST((short)3, "columnValueFilterList"),
      LOGICAL_OPT((short)4, "logicalOpt"),
      PARAM((short)5, "param"),
      COLUMN_FILTER((short)6, "columnFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          case 2: // TABLE_NAMES
            return TABLE_NAMES;
          case 3: // COLUMN_VALUE_FILTER_LIST
            return COLUMN_VALUE_FILTER_LIST;
          case 4: // LOGICAL_OPT
            return LOGICAL_OPT;
          case 5: // PARAM
            return PARAM;
          case 6: // COLUMN_FILTER
            return COLUMN_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOGICAL_OPT, new org.apache.thrift.meta_data.FieldMetaData("logicalOpt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFouCrList_args.class, metaDataMap);
    }

    public queryByRowkeyFouCrList_args() {
    }

    public queryByRowkeyFouCrList_args(
      List<String> rowkey,
      List<String> tableNames,
      List<String> columnValueFilterList,
      String logicalOpt,
      Map<String,String> param,
      Map<String,List<String>> columnFilter)
    {
      this();
      this.rowkey = rowkey;
      this.tableNames = tableNames;
      this.columnValueFilterList = columnValueFilterList;
      this.logicalOpt = logicalOpt;
      this.param = param;
      this.columnFilter = columnFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFouCrList_args(queryByRowkeyFouCrList_args other) {
      if (other.isSetRowkey()) {
        List<String> __this__rowkey = new ArrayList<String>(other.rowkey);
        this.rowkey = __this__rowkey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilterList()) {
        List<String> __this__columnValueFilterList = new ArrayList<String>(other.columnValueFilterList);
        this.columnValueFilterList = __this__columnValueFilterList;
      }
      if (other.isSetLogicalOpt()) {
        this.logicalOpt = other.logicalOpt;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
      if (other.isSetColumnFilter()) {
        Map<String,List<String>> __this__columnFilter = new HashMap<String,List<String>>(other.columnFilter.size());
        for (Map.Entry<String, List<String>> other_element : other.columnFilter.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__columnFilter_copy_key = other_element_key;

          List<String> __this__columnFilter_copy_value = new ArrayList<String>(other_element_value);

          __this__columnFilter.put(__this__columnFilter_copy_key, __this__columnFilter_copy_value);
        }
        this.columnFilter = __this__columnFilter;
      }
    }

    public queryByRowkeyFouCrList_args deepCopy() {
      return new queryByRowkeyFouCrList_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
      this.tableNames = null;
      this.columnValueFilterList = null;
      this.logicalOpt = null;
      this.param = null;
      this.columnFilter = null;
    }

    public int getRowkeySize() {
      return (this.rowkey == null) ? 0 : this.rowkey.size();
    }

    public java.util.Iterator<String> getRowkeyIterator() {
      return (this.rowkey == null) ? null : this.rowkey.iterator();
    }

    public void addToRowkey(String elem) {
      if (this.rowkey == null) {
        this.rowkey = new ArrayList<String>();
      }
      this.rowkey.add(elem);
    }

    public List<String> getRowkey() {
      return this.rowkey;
    }

    public queryByRowkeyFouCrList_args setRowkey(List<String> rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyFouCrList_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public int getColumnValueFilterListSize() {
      return (this.columnValueFilterList == null) ? 0 : this.columnValueFilterList.size();
    }

    public java.util.Iterator<String> getColumnValueFilterListIterator() {
      return (this.columnValueFilterList == null) ? null : this.columnValueFilterList.iterator();
    }

    public void addToColumnValueFilterList(String elem) {
      if (this.columnValueFilterList == null) {
        this.columnValueFilterList = new ArrayList<String>();
      }
      this.columnValueFilterList.add(elem);
    }

    public List<String> getColumnValueFilterList() {
      return this.columnValueFilterList;
    }

    public queryByRowkeyFouCrList_args setColumnValueFilterList(List<String> columnValueFilterList) {
      this.columnValueFilterList = columnValueFilterList;
      return this;
    }

    public void unsetColumnValueFilterList() {
      this.columnValueFilterList = null;
    }

    /** Returns true if field columnValueFilterList is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilterList() {
      return this.columnValueFilterList != null;
    }

    public void setColumnValueFilterListIsSet(boolean value) {
      if (!value) {
        this.columnValueFilterList = null;
      }
    }

    public String getLogicalOpt() {
      return this.logicalOpt;
    }

    public queryByRowkeyFouCrList_args setLogicalOpt(String logicalOpt) {
      this.logicalOpt = logicalOpt;
      return this;
    }

    public void unsetLogicalOpt() {
      this.logicalOpt = null;
    }

    /** Returns true if field logicalOpt is set (has been assigned a value) and false otherwise */
    public boolean isSetLogicalOpt() {
      return this.logicalOpt != null;
    }

    public void setLogicalOptIsSet(boolean value) {
      if (!value) {
        this.logicalOpt = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyFouCrList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public int getColumnFilterSize() {
      return (this.columnFilter == null) ? 0 : this.columnFilter.size();
    }

    public void putToColumnFilter(String key, List<String> val) {
      if (this.columnFilter == null) {
        this.columnFilter = new HashMap<String,List<String>>();
      }
      this.columnFilter.put(key, val);
    }

    public Map<String,List<String>> getColumnFilter() {
      return this.columnFilter;
    }

    public queryByRowkeyFouCrList_args setColumnFilter(Map<String,List<String>> columnFilter) {
      this.columnFilter = columnFilter;
      return this;
    }

    public void unsetColumnFilter() {
      this.columnFilter = null;
    }

    /** Returns true if field columnFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnFilter() {
      return this.columnFilter != null;
    }

    public void setColumnFilterIsSet(boolean value) {
      if (!value) {
        this.columnFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((List<String>)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER_LIST:
        if (value == null) {
          unsetColumnValueFilterList();
        } else {
          setColumnValueFilterList((List<String>)value);
        }
        break;

      case LOGICAL_OPT:
        if (value == null) {
          unsetLogicalOpt();
        } else {
          setLogicalOpt((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      case COLUMN_FILTER:
        if (value == null) {
          unsetColumnFilter();
        } else {
          setColumnFilter((Map<String,List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER_LIST:
        return getColumnValueFilterList();

      case LOGICAL_OPT:
        return getLogicalOpt();

      case PARAM:
        return getParam();

      case COLUMN_FILTER:
        return getColumnFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER_LIST:
        return isSetColumnValueFilterList();
      case LOGICAL_OPT:
        return isSetLogicalOpt();
      case PARAM:
        return isSetParam();
      case COLUMN_FILTER:
        return isSetColumnFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFouCrList_args)
        return this.equals((queryByRowkeyFouCrList_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyFouCrList_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilterList = true && this.isSetColumnValueFilterList();
      boolean that_present_columnValueFilterList = true && that.isSetColumnValueFilterList();
      if (this_present_columnValueFilterList || that_present_columnValueFilterList) {
        if (!(this_present_columnValueFilterList && that_present_columnValueFilterList))
          return false;
        if (!this.columnValueFilterList.equals(that.columnValueFilterList))
          return false;
      }

      boolean this_present_logicalOpt = true && this.isSetLogicalOpt();
      boolean that_present_logicalOpt = true && that.isSetLogicalOpt();
      if (this_present_logicalOpt || that_present_logicalOpt) {
        if (!(this_present_logicalOpt && that_present_logicalOpt))
          return false;
        if (!this.logicalOpt.equals(that.logicalOpt))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      boolean this_present_columnFilter = true && this.isSetColumnFilter();
      boolean that_present_columnFilter = true && that.isSetColumnFilter();
      if (this_present_columnFilter || that_present_columnFilter) {
        if (!(this_present_columnFilter && that_present_columnFilter))
          return false;
        if (!this.columnFilter.equals(that.columnFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFouCrList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(other.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, other.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilterList()).compareTo(other.isSetColumnValueFilterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilterList, other.columnValueFilterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogicalOpt()).compareTo(other.isSetLogicalOpt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogicalOpt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicalOpt, other.logicalOpt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnFilter()).compareTo(other.isSetColumnFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFilter, other.columnFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFouCrList_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilterList:");
      if (this.columnValueFilterList == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logicalOpt:");
      if (this.logicalOpt == null) {
        sb.append("null");
      } else {
        sb.append(this.logicalOpt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnFilter:");
      if (this.columnFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFouCrList_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFouCrList_argsStandardScheme getScheme() {
        return new queryByRowkeyFouCrList_argsStandardScheme();
      }
    }

    private static class queryByRowkeyFouCrList_argsStandardScheme extends StandardScheme<queryByRowkeyFouCrList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFouCrList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list528 = iprot.readListBegin();
                  struct.rowkey = new ArrayList<String>(_list528.size);
                  for (int _i529 = 0; _i529 < _list528.size; ++_i529)
                  {
                    String _elem530;
                    _elem530 = iprot.readString();
                    struct.rowkey.add(_elem530);
                  }
                  iprot.readListEnd();
                }
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list531 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list531.size);
                  for (int _i532 = 0; _i532 < _list531.size; ++_i532)
                  {
                    String _elem533;
                    _elem533 = iprot.readString();
                    struct.tableNames.add(_elem533);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMN_VALUE_FILTER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list534 = iprot.readListBegin();
                  struct.columnValueFilterList = new ArrayList<String>(_list534.size);
                  for (int _i535 = 0; _i535 < _list534.size; ++_i535)
                  {
                    String _elem536;
                    _elem536 = iprot.readString();
                    struct.columnValueFilterList.add(_elem536);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnValueFilterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOGICAL_OPT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logicalOpt = iprot.readString();
                struct.setLogicalOptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map537 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map537.size);
                  for (int _i538 = 0; _i538 < _map537.size; ++_i538)
                  {
                    String _key539;
                    String _val540;
                    _key539 = iprot.readString();
                    _val540 = iprot.readString();
                    struct.param.put(_key539, _val540);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COLUMN_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map541 = iprot.readMapBegin();
                  struct.columnFilter = new HashMap<String,List<String>>(2*_map541.size);
                  for (int _i542 = 0; _i542 < _map541.size; ++_i542)
                  {
                    String _key543;
                    List<String> _val544;
                    _key543 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list545 = iprot.readListBegin();
                      _val544 = new ArrayList<String>(_list545.size);
                      for (int _i546 = 0; _i546 < _list545.size; ++_i546)
                      {
                        String _elem547;
                        _elem547 = iprot.readString();
                        _val544.add(_elem547);
                      }
                      iprot.readListEnd();
                    }
                    struct.columnFilter.put(_key543, _val544);
                  }
                  iprot.readMapEnd();
                }
                struct.setColumnFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFouCrList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.rowkey.size()));
            for (String _iter548 : struct.rowkey)
            {
              oprot.writeString(_iter548);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter549 : struct.tableNames)
            {
              oprot.writeString(_iter549);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilterList != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnValueFilterList.size()));
            for (String _iter550 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter550);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.logicalOpt != null) {
          oprot.writeFieldBegin(LOGICAL_OPT_FIELD_DESC);
          oprot.writeString(struct.logicalOpt);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter551 : struct.param.entrySet())
            {
              oprot.writeString(_iter551.getKey());
              oprot.writeString(_iter551.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnFilter != null) {
          oprot.writeFieldBegin(COLUMN_FILTER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.columnFilter.size()));
            for (Map.Entry<String, List<String>> _iter552 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter552.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter552.getValue().size()));
                for (String _iter553 : _iter552.getValue())
                {
                  oprot.writeString(_iter553);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFouCrList_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFouCrList_argsTupleScheme getScheme() {
        return new queryByRowkeyFouCrList_argsTupleScheme();
      }
    }

    private static class queryByRowkeyFouCrList_argsTupleScheme extends TupleScheme<queryByRowkeyFouCrList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFouCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        if (struct.isSetTableNames()) {
          optionals.set(1);
        }
        if (struct.isSetColumnValueFilterList()) {
          optionals.set(2);
        }
        if (struct.isSetLogicalOpt()) {
          optionals.set(3);
        }
        if (struct.isSetParam()) {
          optionals.set(4);
        }
        if (struct.isSetColumnFilter()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRowkey()) {
          {
            oprot.writeI32(struct.rowkey.size());
            for (String _iter554 : struct.rowkey)
            {
              oprot.writeString(_iter554);
            }
          }
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter555 : struct.tableNames)
            {
              oprot.writeString(_iter555);
            }
          }
        }
        if (struct.isSetColumnValueFilterList()) {
          {
            oprot.writeI32(struct.columnValueFilterList.size());
            for (String _iter556 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter556);
            }
          }
        }
        if (struct.isSetLogicalOpt()) {
          oprot.writeString(struct.logicalOpt);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter557 : struct.param.entrySet())
            {
              oprot.writeString(_iter557.getKey());
              oprot.writeString(_iter557.getValue());
            }
          }
        }
        if (struct.isSetColumnFilter()) {
          {
            oprot.writeI32(struct.columnFilter.size());
            for (Map.Entry<String, List<String>> _iter558 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter558.getKey());
              {
                oprot.writeI32(_iter558.getValue().size());
                for (String _iter559 : _iter558.getValue())
                {
                  oprot.writeString(_iter559);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFouCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list560 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.rowkey = new ArrayList<String>(_list560.size);
            for (int _i561 = 0; _i561 < _list560.size; ++_i561)
            {
              String _elem562;
              _elem562 = iprot.readString();
              struct.rowkey.add(_elem562);
            }
          }
          struct.setRowkeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list563 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list563.size);
            for (int _i564 = 0; _i564 < _list563.size; ++_i564)
            {
              String _elem565;
              _elem565 = iprot.readString();
              struct.tableNames.add(_elem565);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list566 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columnValueFilterList = new ArrayList<String>(_list566.size);
            for (int _i567 = 0; _i567 < _list566.size; ++_i567)
            {
              String _elem568;
              _elem568 = iprot.readString();
              struct.columnValueFilterList.add(_elem568);
            }
          }
          struct.setColumnValueFilterListIsSet(true);
        }
        if (incoming.get(3)) {
          struct.logicalOpt = iprot.readString();
          struct.setLogicalOptIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map569 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map569.size);
            for (int _i570 = 0; _i570 < _map569.size; ++_i570)
            {
              String _key571;
              String _val572;
              _key571 = iprot.readString();
              _val572 = iprot.readString();
              struct.param.put(_key571, _val572);
            }
          }
          struct.setParamIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map573 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.columnFilter = new HashMap<String,List<String>>(2*_map573.size);
            for (int _i574 = 0; _i574 < _map573.size; ++_i574)
            {
              String _key575;
              List<String> _val576;
              _key575 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list577 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val576 = new ArrayList<String>(_list577.size);
                for (int _i578 = 0; _i578 < _list577.size; ++_i578)
                {
                  String _elem579;
                  _elem579 = iprot.readString();
                  _val576.add(_elem579);
                }
              }
              struct.columnFilter.put(_key575, _val576);
            }
          }
          struct.setColumnFilterIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFouCrList_result implements org.apache.thrift.TBase<queryByRowkeyFouCrList_result, queryByRowkeyFouCrList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFouCrList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFouCrList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFouCrList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFouCrList_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFouCrList_result.class, metaDataMap);
    }

    public queryByRowkeyFouCrList_result() {
    }

    public queryByRowkeyFouCrList_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFouCrList_result(queryByRowkeyFouCrList_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyFouCrList_result deepCopy() {
      return new queryByRowkeyFouCrList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyFouCrList_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyFouCrList_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFouCrList_result)
        return this.equals((queryByRowkeyFouCrList_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyFouCrList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFouCrList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFouCrList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFouCrList_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFouCrList_resultStandardScheme getScheme() {
        return new queryByRowkeyFouCrList_resultStandardScheme();
      }
    }

    private static class queryByRowkeyFouCrList_resultStandardScheme extends StandardScheme<queryByRowkeyFouCrList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFouCrList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list580 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list580.size);
                  for (int _i581 = 0; _i581 < _list580.size; ++_i581)
                  {
                    List<String> _elem582;
                    {
                      org.apache.thrift.protocol.TList _list583 = iprot.readListBegin();
                      _elem582 = new ArrayList<String>(_list583.size);
                      for (int _i584 = 0; _i584 < _list583.size; ++_i584)
                      {
                        String _elem585;
                        _elem585 = iprot.readString();
                        _elem582.add(_elem585);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem582);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFouCrList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter586 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter586.size()));
                for (String _iter587 : _iter586)
                {
                  oprot.writeString(_iter587);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFouCrList_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFouCrList_resultTupleScheme getScheme() {
        return new queryByRowkeyFouCrList_resultTupleScheme();
      }
    }

    private static class queryByRowkeyFouCrList_resultTupleScheme extends TupleScheme<queryByRowkeyFouCrList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFouCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter588 : struct.success)
            {
              {
                oprot.writeI32(_iter588.size());
                for (String _iter589 : _iter588)
                {
                  oprot.writeString(_iter589);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFouCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list590 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list590.size);
            for (int _i591 = 0; _i591 < _list590.size; ++_i591)
            {
              List<String> _elem592;
              {
                org.apache.thrift.protocol.TList _list593 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem592 = new ArrayList<String>(_list593.size);
                for (int _i594 = 0; _i594 < _list593.size; ++_i594)
                {
                  String _elem595;
                  _elem595 = iprot.readString();
                  _elem592.add(_elem595);
                }
              }
              struct.success.add(_elem592);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFiv_args implements org.apache.thrift.TBase<queryByRowkeyFiv_args, queryByRowkeyFiv_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFiv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFiv_args");

    private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("startKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STOP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("stopKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilter", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFiv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFiv_argsTupleSchemeFactory());
    }

    public String startKey; // required
    public String stopKey; // required
    public List<String> tableNames; // required
    public String columnValueFilter; // required
    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_KEY((short)1, "startKey"),
      STOP_KEY((short)2, "stopKey"),
      TABLE_NAMES((short)3, "tableNames"),
      COLUMN_VALUE_FILTER((short)4, "columnValueFilter"),
      PARAM((short)5, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_KEY
            return START_KEY;
          case 2: // STOP_KEY
            return STOP_KEY;
          case 3: // TABLE_NAMES
            return TABLE_NAMES;
          case 4: // COLUMN_VALUE_FILTER
            return COLUMN_VALUE_FILTER;
          case 5: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("startKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STOP_KEY, new org.apache.thrift.meta_data.FieldMetaData("stopKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFiv_args.class, metaDataMap);
    }

    public queryByRowkeyFiv_args() {
    }

    public queryByRowkeyFiv_args(
      String startKey,
      String stopKey,
      List<String> tableNames,
      String columnValueFilter,
      Map<String,String> param)
    {
      this();
      this.startKey = startKey;
      this.stopKey = stopKey;
      this.tableNames = tableNames;
      this.columnValueFilter = columnValueFilter;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFiv_args(queryByRowkeyFiv_args other) {
      if (other.isSetStartKey()) {
        this.startKey = other.startKey;
      }
      if (other.isSetStopKey()) {
        this.stopKey = other.stopKey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilter()) {
        this.columnValueFilter = other.columnValueFilter;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public queryByRowkeyFiv_args deepCopy() {
      return new queryByRowkeyFiv_args(this);
    }

    @Override
    public void clear() {
      this.startKey = null;
      this.stopKey = null;
      this.tableNames = null;
      this.columnValueFilter = null;
      this.param = null;
    }

    public String getStartKey() {
      return this.startKey;
    }

    public queryByRowkeyFiv_args setStartKey(String startKey) {
      this.startKey = startKey;
      return this;
    }

    public void unsetStartKey() {
      this.startKey = null;
    }

    /** Returns true if field startKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStartKey() {
      return this.startKey != null;
    }

    public void setStartKeyIsSet(boolean value) {
      if (!value) {
        this.startKey = null;
      }
    }

    public String getStopKey() {
      return this.stopKey;
    }

    public queryByRowkeyFiv_args setStopKey(String stopKey) {
      this.stopKey = stopKey;
      return this;
    }

    public void unsetStopKey() {
      this.stopKey = null;
    }

    /** Returns true if field stopKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStopKey() {
      return this.stopKey != null;
    }

    public void setStopKeyIsSet(boolean value) {
      if (!value) {
        this.stopKey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyFiv_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public String getColumnValueFilter() {
      return this.columnValueFilter;
    }

    public queryByRowkeyFiv_args setColumnValueFilter(String columnValueFilter) {
      this.columnValueFilter = columnValueFilter;
      return this;
    }

    public void unsetColumnValueFilter() {
      this.columnValueFilter = null;
    }

    /** Returns true if field columnValueFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilter() {
      return this.columnValueFilter != null;
    }

    public void setColumnValueFilterIsSet(boolean value) {
      if (!value) {
        this.columnValueFilter = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyFiv_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_KEY:
        if (value == null) {
          unsetStartKey();
        } else {
          setStartKey((String)value);
        }
        break;

      case STOP_KEY:
        if (value == null) {
          unsetStopKey();
        } else {
          setStopKey((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER:
        if (value == null) {
          unsetColumnValueFilter();
        } else {
          setColumnValueFilter((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_KEY:
        return getStartKey();

      case STOP_KEY:
        return getStopKey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER:
        return getColumnValueFilter();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_KEY:
        return isSetStartKey();
      case STOP_KEY:
        return isSetStopKey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER:
        return isSetColumnValueFilter();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFiv_args)
        return this.equals((queryByRowkeyFiv_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyFiv_args that) {
      if (that == null)
        return false;

      boolean this_present_startKey = true && this.isSetStartKey();
      boolean that_present_startKey = true && that.isSetStartKey();
      if (this_present_startKey || that_present_startKey) {
        if (!(this_present_startKey && that_present_startKey))
          return false;
        if (!this.startKey.equals(that.startKey))
          return false;
      }

      boolean this_present_stopKey = true && this.isSetStopKey();
      boolean that_present_stopKey = true && that.isSetStopKey();
      if (this_present_stopKey || that_present_stopKey) {
        if (!(this_present_stopKey && that_present_stopKey))
          return false;
        if (!this.stopKey.equals(that.stopKey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilter = true && this.isSetColumnValueFilter();
      boolean that_present_columnValueFilter = true && that.isSetColumnValueFilter();
      if (this_present_columnValueFilter || that_present_columnValueFilter) {
        if (!(this_present_columnValueFilter && that_present_columnValueFilter))
          return false;
        if (!this.columnValueFilter.equals(that.columnValueFilter))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFiv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartKey()).compareTo(other.isSetStartKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, other.startKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStopKey()).compareTo(other.isSetStopKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStopKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopKey, other.stopKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilter()).compareTo(other.isSetColumnValueFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilter, other.columnValueFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFiv_args(");
      boolean first = true;

      sb.append("startKey:");
      if (this.startKey == null) {
        sb.append("null");
      } else {
        sb.append(this.startKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stopKey:");
      if (this.stopKey == null) {
        sb.append("null");
      } else {
        sb.append(this.stopKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilter:");
      if (this.columnValueFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFiv_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFiv_argsStandardScheme getScheme() {
        return new queryByRowkeyFiv_argsStandardScheme();
      }
    }

    private static class queryByRowkeyFiv_argsStandardScheme extends StandardScheme<queryByRowkeyFiv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFiv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startKey = iprot.readString();
                struct.setStartKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOP_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stopKey = iprot.readString();
                struct.setStopKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list596 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list596.size);
                  for (int _i597 = 0; _i597 < _list596.size; ++_i597)
                  {
                    String _elem598;
                    _elem598 = iprot.readString();
                    struct.tableNames.add(_elem598);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COLUMN_VALUE_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.columnValueFilter = iprot.readString();
                struct.setColumnValueFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map599 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map599.size);
                  for (int _i600 = 0; _i600 < _map599.size; ++_i600)
                  {
                    String _key601;
                    String _val602;
                    _key601 = iprot.readString();
                    _val602 = iprot.readString();
                    struct.param.put(_key601, _val602);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFiv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startKey != null) {
          oprot.writeFieldBegin(START_KEY_FIELD_DESC);
          oprot.writeString(struct.startKey);
          oprot.writeFieldEnd();
        }
        if (struct.stopKey != null) {
          oprot.writeFieldBegin(STOP_KEY_FIELD_DESC);
          oprot.writeString(struct.stopKey);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter603 : struct.tableNames)
            {
              oprot.writeString(_iter603);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilter != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_FIELD_DESC);
          oprot.writeString(struct.columnValueFilter);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter604 : struct.param.entrySet())
            {
              oprot.writeString(_iter604.getKey());
              oprot.writeString(_iter604.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFiv_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFiv_argsTupleScheme getScheme() {
        return new queryByRowkeyFiv_argsTupleScheme();
      }
    }

    private static class queryByRowkeyFiv_argsTupleScheme extends TupleScheme<queryByRowkeyFiv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFiv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartKey()) {
          optionals.set(0);
        }
        if (struct.isSetStopKey()) {
          optionals.set(1);
        }
        if (struct.isSetTableNames()) {
          optionals.set(2);
        }
        if (struct.isSetColumnValueFilter()) {
          optionals.set(3);
        }
        if (struct.isSetParam()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetStartKey()) {
          oprot.writeString(struct.startKey);
        }
        if (struct.isSetStopKey()) {
          oprot.writeString(struct.stopKey);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter605 : struct.tableNames)
            {
              oprot.writeString(_iter605);
            }
          }
        }
        if (struct.isSetColumnValueFilter()) {
          oprot.writeString(struct.columnValueFilter);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter606 : struct.param.entrySet())
            {
              oprot.writeString(_iter606.getKey());
              oprot.writeString(_iter606.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFiv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.startKey = iprot.readString();
          struct.setStartKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stopKey = iprot.readString();
          struct.setStopKeyIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list607 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list607.size);
            for (int _i608 = 0; _i608 < _list607.size; ++_i608)
            {
              String _elem609;
              _elem609 = iprot.readString();
              struct.tableNames.add(_elem609);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.columnValueFilter = iprot.readString();
          struct.setColumnValueFilterIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map610 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map610.size);
            for (int _i611 = 0; _i611 < _map610.size; ++_i611)
            {
              String _key612;
              String _val613;
              _key612 = iprot.readString();
              _val613 = iprot.readString();
              struct.param.put(_key612, _val613);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFiv_result implements org.apache.thrift.TBase<queryByRowkeyFiv_result, queryByRowkeyFiv_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFiv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFiv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFiv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFiv_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFiv_result.class, metaDataMap);
    }

    public queryByRowkeyFiv_result() {
    }

    public queryByRowkeyFiv_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFiv_result(queryByRowkeyFiv_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyFiv_result deepCopy() {
      return new queryByRowkeyFiv_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyFiv_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyFiv_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFiv_result)
        return this.equals((queryByRowkeyFiv_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyFiv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFiv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFiv_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFiv_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFiv_resultStandardScheme getScheme() {
        return new queryByRowkeyFiv_resultStandardScheme();
      }
    }

    private static class queryByRowkeyFiv_resultStandardScheme extends StandardScheme<queryByRowkeyFiv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFiv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list614 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list614.size);
                  for (int _i615 = 0; _i615 < _list614.size; ++_i615)
                  {
                    List<String> _elem616;
                    {
                      org.apache.thrift.protocol.TList _list617 = iprot.readListBegin();
                      _elem616 = new ArrayList<String>(_list617.size);
                      for (int _i618 = 0; _i618 < _list617.size; ++_i618)
                      {
                        String _elem619;
                        _elem619 = iprot.readString();
                        _elem616.add(_elem619);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem616);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFiv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter620 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter620.size()));
                for (String _iter621 : _iter620)
                {
                  oprot.writeString(_iter621);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFiv_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFiv_resultTupleScheme getScheme() {
        return new queryByRowkeyFiv_resultTupleScheme();
      }
    }

    private static class queryByRowkeyFiv_resultTupleScheme extends TupleScheme<queryByRowkeyFiv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFiv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter622 : struct.success)
            {
              {
                oprot.writeI32(_iter622.size());
                for (String _iter623 : _iter622)
                {
                  oprot.writeString(_iter623);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFiv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list624 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list624.size);
            for (int _i625 = 0; _i625 < _list624.size; ++_i625)
            {
              List<String> _elem626;
              {
                org.apache.thrift.protocol.TList _list627 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem626 = new ArrayList<String>(_list627.size);
                for (int _i628 = 0; _i628 < _list627.size; ++_i628)
                {
                  String _elem629;
                  _elem629 = iprot.readString();
                  _elem626.add(_elem629);
                }
              }
              struct.success.add(_elem626);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFivCrList_args implements org.apache.thrift.TBase<queryByRowkeyFivCrList_args, queryByRowkeyFivCrList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFivCrList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFivCrList_args");

    private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("startKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STOP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("stopKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilterList", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField LOGICAL_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("logicalOpt", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFivCrList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFivCrList_argsTupleSchemeFactory());
    }

    public String startKey; // required
    public String stopKey; // required
    public List<String> tableNames; // required
    public List<String> columnValueFilterList; // required
    public String logicalOpt; // required
    public Map<String,String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_KEY((short)1, "startKey"),
      STOP_KEY((short)2, "stopKey"),
      TABLE_NAMES((short)3, "tableNames"),
      COLUMN_VALUE_FILTER_LIST((short)4, "columnValueFilterList"),
      LOGICAL_OPT((short)5, "logicalOpt"),
      PARAM((short)6, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_KEY
            return START_KEY;
          case 2: // STOP_KEY
            return STOP_KEY;
          case 3: // TABLE_NAMES
            return TABLE_NAMES;
          case 4: // COLUMN_VALUE_FILTER_LIST
            return COLUMN_VALUE_FILTER_LIST;
          case 5: // LOGICAL_OPT
            return LOGICAL_OPT;
          case 6: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("startKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STOP_KEY, new org.apache.thrift.meta_data.FieldMetaData("stopKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOGICAL_OPT, new org.apache.thrift.meta_data.FieldMetaData("logicalOpt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFivCrList_args.class, metaDataMap);
    }

    public queryByRowkeyFivCrList_args() {
    }

    public queryByRowkeyFivCrList_args(
      String startKey,
      String stopKey,
      List<String> tableNames,
      List<String> columnValueFilterList,
      String logicalOpt,
      Map<String,String> param)
    {
      this();
      this.startKey = startKey;
      this.stopKey = stopKey;
      this.tableNames = tableNames;
      this.columnValueFilterList = columnValueFilterList;
      this.logicalOpt = logicalOpt;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFivCrList_args(queryByRowkeyFivCrList_args other) {
      if (other.isSetStartKey()) {
        this.startKey = other.startKey;
      }
      if (other.isSetStopKey()) {
        this.stopKey = other.stopKey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilterList()) {
        List<String> __this__columnValueFilterList = new ArrayList<String>(other.columnValueFilterList);
        this.columnValueFilterList = __this__columnValueFilterList;
      }
      if (other.isSetLogicalOpt()) {
        this.logicalOpt = other.logicalOpt;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
    }

    public queryByRowkeyFivCrList_args deepCopy() {
      return new queryByRowkeyFivCrList_args(this);
    }

    @Override
    public void clear() {
      this.startKey = null;
      this.stopKey = null;
      this.tableNames = null;
      this.columnValueFilterList = null;
      this.logicalOpt = null;
      this.param = null;
    }

    public String getStartKey() {
      return this.startKey;
    }

    public queryByRowkeyFivCrList_args setStartKey(String startKey) {
      this.startKey = startKey;
      return this;
    }

    public void unsetStartKey() {
      this.startKey = null;
    }

    /** Returns true if field startKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStartKey() {
      return this.startKey != null;
    }

    public void setStartKeyIsSet(boolean value) {
      if (!value) {
        this.startKey = null;
      }
    }

    public String getStopKey() {
      return this.stopKey;
    }

    public queryByRowkeyFivCrList_args setStopKey(String stopKey) {
      this.stopKey = stopKey;
      return this;
    }

    public void unsetStopKey() {
      this.stopKey = null;
    }

    /** Returns true if field stopKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStopKey() {
      return this.stopKey != null;
    }

    public void setStopKeyIsSet(boolean value) {
      if (!value) {
        this.stopKey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeyFivCrList_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public int getColumnValueFilterListSize() {
      return (this.columnValueFilterList == null) ? 0 : this.columnValueFilterList.size();
    }

    public java.util.Iterator<String> getColumnValueFilterListIterator() {
      return (this.columnValueFilterList == null) ? null : this.columnValueFilterList.iterator();
    }

    public void addToColumnValueFilterList(String elem) {
      if (this.columnValueFilterList == null) {
        this.columnValueFilterList = new ArrayList<String>();
      }
      this.columnValueFilterList.add(elem);
    }

    public List<String> getColumnValueFilterList() {
      return this.columnValueFilterList;
    }

    public queryByRowkeyFivCrList_args setColumnValueFilterList(List<String> columnValueFilterList) {
      this.columnValueFilterList = columnValueFilterList;
      return this;
    }

    public void unsetColumnValueFilterList() {
      this.columnValueFilterList = null;
    }

    /** Returns true if field columnValueFilterList is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilterList() {
      return this.columnValueFilterList != null;
    }

    public void setColumnValueFilterListIsSet(boolean value) {
      if (!value) {
        this.columnValueFilterList = null;
      }
    }

    public String getLogicalOpt() {
      return this.logicalOpt;
    }

    public queryByRowkeyFivCrList_args setLogicalOpt(String logicalOpt) {
      this.logicalOpt = logicalOpt;
      return this;
    }

    public void unsetLogicalOpt() {
      this.logicalOpt = null;
    }

    /** Returns true if field logicalOpt is set (has been assigned a value) and false otherwise */
    public boolean isSetLogicalOpt() {
      return this.logicalOpt != null;
    }

    public void setLogicalOptIsSet(boolean value) {
      if (!value) {
        this.logicalOpt = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeyFivCrList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_KEY:
        if (value == null) {
          unsetStartKey();
        } else {
          setStartKey((String)value);
        }
        break;

      case STOP_KEY:
        if (value == null) {
          unsetStopKey();
        } else {
          setStopKey((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER_LIST:
        if (value == null) {
          unsetColumnValueFilterList();
        } else {
          setColumnValueFilterList((List<String>)value);
        }
        break;

      case LOGICAL_OPT:
        if (value == null) {
          unsetLogicalOpt();
        } else {
          setLogicalOpt((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_KEY:
        return getStartKey();

      case STOP_KEY:
        return getStopKey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER_LIST:
        return getColumnValueFilterList();

      case LOGICAL_OPT:
        return getLogicalOpt();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_KEY:
        return isSetStartKey();
      case STOP_KEY:
        return isSetStopKey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER_LIST:
        return isSetColumnValueFilterList();
      case LOGICAL_OPT:
        return isSetLogicalOpt();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFivCrList_args)
        return this.equals((queryByRowkeyFivCrList_args)that);
      return false;
    }

    public boolean equals(queryByRowkeyFivCrList_args that) {
      if (that == null)
        return false;

      boolean this_present_startKey = true && this.isSetStartKey();
      boolean that_present_startKey = true && that.isSetStartKey();
      if (this_present_startKey || that_present_startKey) {
        if (!(this_present_startKey && that_present_startKey))
          return false;
        if (!this.startKey.equals(that.startKey))
          return false;
      }

      boolean this_present_stopKey = true && this.isSetStopKey();
      boolean that_present_stopKey = true && that.isSetStopKey();
      if (this_present_stopKey || that_present_stopKey) {
        if (!(this_present_stopKey && that_present_stopKey))
          return false;
        if (!this.stopKey.equals(that.stopKey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilterList = true && this.isSetColumnValueFilterList();
      boolean that_present_columnValueFilterList = true && that.isSetColumnValueFilterList();
      if (this_present_columnValueFilterList || that_present_columnValueFilterList) {
        if (!(this_present_columnValueFilterList && that_present_columnValueFilterList))
          return false;
        if (!this.columnValueFilterList.equals(that.columnValueFilterList))
          return false;
      }

      boolean this_present_logicalOpt = true && this.isSetLogicalOpt();
      boolean that_present_logicalOpt = true && that.isSetLogicalOpt();
      if (this_present_logicalOpt || that_present_logicalOpt) {
        if (!(this_present_logicalOpt && that_present_logicalOpt))
          return false;
        if (!this.logicalOpt.equals(that.logicalOpt))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFivCrList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartKey()).compareTo(other.isSetStartKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, other.startKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStopKey()).compareTo(other.isSetStopKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStopKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopKey, other.stopKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilterList()).compareTo(other.isSetColumnValueFilterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilterList, other.columnValueFilterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogicalOpt()).compareTo(other.isSetLogicalOpt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogicalOpt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicalOpt, other.logicalOpt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFivCrList_args(");
      boolean first = true;

      sb.append("startKey:");
      if (this.startKey == null) {
        sb.append("null");
      } else {
        sb.append(this.startKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stopKey:");
      if (this.stopKey == null) {
        sb.append("null");
      } else {
        sb.append(this.stopKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilterList:");
      if (this.columnValueFilterList == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logicalOpt:");
      if (this.logicalOpt == null) {
        sb.append("null");
      } else {
        sb.append(this.logicalOpt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFivCrList_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFivCrList_argsStandardScheme getScheme() {
        return new queryByRowkeyFivCrList_argsStandardScheme();
      }
    }

    private static class queryByRowkeyFivCrList_argsStandardScheme extends StandardScheme<queryByRowkeyFivCrList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFivCrList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startKey = iprot.readString();
                struct.setStartKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOP_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stopKey = iprot.readString();
                struct.setStopKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list630 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list630.size);
                  for (int _i631 = 0; _i631 < _list630.size; ++_i631)
                  {
                    String _elem632;
                    _elem632 = iprot.readString();
                    struct.tableNames.add(_elem632);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COLUMN_VALUE_FILTER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list633 = iprot.readListBegin();
                  struct.columnValueFilterList = new ArrayList<String>(_list633.size);
                  for (int _i634 = 0; _i634 < _list633.size; ++_i634)
                  {
                    String _elem635;
                    _elem635 = iprot.readString();
                    struct.columnValueFilterList.add(_elem635);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnValueFilterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOGICAL_OPT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logicalOpt = iprot.readString();
                struct.setLogicalOptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map636 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map636.size);
                  for (int _i637 = 0; _i637 < _map636.size; ++_i637)
                  {
                    String _key638;
                    String _val639;
                    _key638 = iprot.readString();
                    _val639 = iprot.readString();
                    struct.param.put(_key638, _val639);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFivCrList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startKey != null) {
          oprot.writeFieldBegin(START_KEY_FIELD_DESC);
          oprot.writeString(struct.startKey);
          oprot.writeFieldEnd();
        }
        if (struct.stopKey != null) {
          oprot.writeFieldBegin(STOP_KEY_FIELD_DESC);
          oprot.writeString(struct.stopKey);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter640 : struct.tableNames)
            {
              oprot.writeString(_iter640);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilterList != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnValueFilterList.size()));
            for (String _iter641 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter641);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.logicalOpt != null) {
          oprot.writeFieldBegin(LOGICAL_OPT_FIELD_DESC);
          oprot.writeString(struct.logicalOpt);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter642 : struct.param.entrySet())
            {
              oprot.writeString(_iter642.getKey());
              oprot.writeString(_iter642.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFivCrList_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFivCrList_argsTupleScheme getScheme() {
        return new queryByRowkeyFivCrList_argsTupleScheme();
      }
    }

    private static class queryByRowkeyFivCrList_argsTupleScheme extends TupleScheme<queryByRowkeyFivCrList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFivCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartKey()) {
          optionals.set(0);
        }
        if (struct.isSetStopKey()) {
          optionals.set(1);
        }
        if (struct.isSetTableNames()) {
          optionals.set(2);
        }
        if (struct.isSetColumnValueFilterList()) {
          optionals.set(3);
        }
        if (struct.isSetLogicalOpt()) {
          optionals.set(4);
        }
        if (struct.isSetParam()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetStartKey()) {
          oprot.writeString(struct.startKey);
        }
        if (struct.isSetStopKey()) {
          oprot.writeString(struct.stopKey);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter643 : struct.tableNames)
            {
              oprot.writeString(_iter643);
            }
          }
        }
        if (struct.isSetColumnValueFilterList()) {
          {
            oprot.writeI32(struct.columnValueFilterList.size());
            for (String _iter644 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter644);
            }
          }
        }
        if (struct.isSetLogicalOpt()) {
          oprot.writeString(struct.logicalOpt);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter645 : struct.param.entrySet())
            {
              oprot.writeString(_iter645.getKey());
              oprot.writeString(_iter645.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFivCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.startKey = iprot.readString();
          struct.setStartKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stopKey = iprot.readString();
          struct.setStopKeyIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list646 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list646.size);
            for (int _i647 = 0; _i647 < _list646.size; ++_i647)
            {
              String _elem648;
              _elem648 = iprot.readString();
              struct.tableNames.add(_elem648);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list649 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columnValueFilterList = new ArrayList<String>(_list649.size);
            for (int _i650 = 0; _i650 < _list649.size; ++_i650)
            {
              String _elem651;
              _elem651 = iprot.readString();
              struct.columnValueFilterList.add(_elem651);
            }
          }
          struct.setColumnValueFilterListIsSet(true);
        }
        if (incoming.get(4)) {
          struct.logicalOpt = iprot.readString();
          struct.setLogicalOptIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map652 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map652.size);
            for (int _i653 = 0; _i653 < _map652.size; ++_i653)
            {
              String _key654;
              String _val655;
              _key654 = iprot.readString();
              _val655 = iprot.readString();
              struct.param.put(_key654, _val655);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeyFivCrList_result implements org.apache.thrift.TBase<queryByRowkeyFivCrList_result, queryByRowkeyFivCrList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeyFivCrList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeyFivCrList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeyFivCrList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeyFivCrList_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeyFivCrList_result.class, metaDataMap);
    }

    public queryByRowkeyFivCrList_result() {
    }

    public queryByRowkeyFivCrList_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeyFivCrList_result(queryByRowkeyFivCrList_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeyFivCrList_result deepCopy() {
      return new queryByRowkeyFivCrList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeyFivCrList_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeyFivCrList_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeyFivCrList_result)
        return this.equals((queryByRowkeyFivCrList_result)that);
      return false;
    }

    public boolean equals(queryByRowkeyFivCrList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeyFivCrList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeyFivCrList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeyFivCrList_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeyFivCrList_resultStandardScheme getScheme() {
        return new queryByRowkeyFivCrList_resultStandardScheme();
      }
    }

    private static class queryByRowkeyFivCrList_resultStandardScheme extends StandardScheme<queryByRowkeyFivCrList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeyFivCrList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list656 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list656.size);
                  for (int _i657 = 0; _i657 < _list656.size; ++_i657)
                  {
                    List<String> _elem658;
                    {
                      org.apache.thrift.protocol.TList _list659 = iprot.readListBegin();
                      _elem658 = new ArrayList<String>(_list659.size);
                      for (int _i660 = 0; _i660 < _list659.size; ++_i660)
                      {
                        String _elem661;
                        _elem661 = iprot.readString();
                        _elem658.add(_elem661);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem658);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeyFivCrList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter662 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter662.size()));
                for (String _iter663 : _iter662)
                {
                  oprot.writeString(_iter663);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeyFivCrList_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeyFivCrList_resultTupleScheme getScheme() {
        return new queryByRowkeyFivCrList_resultTupleScheme();
      }
    }

    private static class queryByRowkeyFivCrList_resultTupleScheme extends TupleScheme<queryByRowkeyFivCrList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFivCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter664 : struct.success)
            {
              {
                oprot.writeI32(_iter664.size());
                for (String _iter665 : _iter664)
                {
                  oprot.writeString(_iter665);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeyFivCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list666 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list666.size);
            for (int _i667 = 0; _i667 < _list666.size; ++_i667)
            {
              List<String> _elem668;
              {
                org.apache.thrift.protocol.TList _list669 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem668 = new ArrayList<String>(_list669.size);
                for (int _i670 = 0; _i670 < _list669.size; ++_i670)
                {
                  String _elem671;
                  _elem671 = iprot.readString();
                  _elem668.add(_elem671);
                }
              }
              struct.success.add(_elem668);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeySix_args implements org.apache.thrift.TBase<queryByRowkeySix_args, queryByRowkeySix_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeySix_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeySix_args");

    private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("startKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STOP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("stopKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilter", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)5);
    private static final org.apache.thrift.protocol.TField COLUMN_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnFilter", org.apache.thrift.protocol.TType.MAP, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeySix_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeySix_argsTupleSchemeFactory());
    }

    public String startKey; // required
    public String stopKey; // required
    public List<String> tableNames; // required
    public String columnValueFilter; // required
    public Map<String,String> param; // required
    public Map<String,List<String>> columnFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_KEY((short)1, "startKey"),
      STOP_KEY((short)2, "stopKey"),
      TABLE_NAMES((short)3, "tableNames"),
      COLUMN_VALUE_FILTER((short)4, "columnValueFilter"),
      PARAM((short)5, "param"),
      COLUMN_FILTER((short)6, "columnFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_KEY
            return START_KEY;
          case 2: // STOP_KEY
            return STOP_KEY;
          case 3: // TABLE_NAMES
            return TABLE_NAMES;
          case 4: // COLUMN_VALUE_FILTER
            return COLUMN_VALUE_FILTER;
          case 5: // PARAM
            return PARAM;
          case 6: // COLUMN_FILTER
            return COLUMN_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("startKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STOP_KEY, new org.apache.thrift.meta_data.FieldMetaData("stopKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeySix_args.class, metaDataMap);
    }

    public queryByRowkeySix_args() {
    }

    public queryByRowkeySix_args(
      String startKey,
      String stopKey,
      List<String> tableNames,
      String columnValueFilter,
      Map<String,String> param,
      Map<String,List<String>> columnFilter)
    {
      this();
      this.startKey = startKey;
      this.stopKey = stopKey;
      this.tableNames = tableNames;
      this.columnValueFilter = columnValueFilter;
      this.param = param;
      this.columnFilter = columnFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeySix_args(queryByRowkeySix_args other) {
      if (other.isSetStartKey()) {
        this.startKey = other.startKey;
      }
      if (other.isSetStopKey()) {
        this.stopKey = other.stopKey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilter()) {
        this.columnValueFilter = other.columnValueFilter;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
      if (other.isSetColumnFilter()) {
        Map<String,List<String>> __this__columnFilter = new HashMap<String,List<String>>(other.columnFilter.size());
        for (Map.Entry<String, List<String>> other_element : other.columnFilter.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__columnFilter_copy_key = other_element_key;

          List<String> __this__columnFilter_copy_value = new ArrayList<String>(other_element_value);

          __this__columnFilter.put(__this__columnFilter_copy_key, __this__columnFilter_copy_value);
        }
        this.columnFilter = __this__columnFilter;
      }
    }

    public queryByRowkeySix_args deepCopy() {
      return new queryByRowkeySix_args(this);
    }

    @Override
    public void clear() {
      this.startKey = null;
      this.stopKey = null;
      this.tableNames = null;
      this.columnValueFilter = null;
      this.param = null;
      this.columnFilter = null;
    }

    public String getStartKey() {
      return this.startKey;
    }

    public queryByRowkeySix_args setStartKey(String startKey) {
      this.startKey = startKey;
      return this;
    }

    public void unsetStartKey() {
      this.startKey = null;
    }

    /** Returns true if field startKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStartKey() {
      return this.startKey != null;
    }

    public void setStartKeyIsSet(boolean value) {
      if (!value) {
        this.startKey = null;
      }
    }

    public String getStopKey() {
      return this.stopKey;
    }

    public queryByRowkeySix_args setStopKey(String stopKey) {
      this.stopKey = stopKey;
      return this;
    }

    public void unsetStopKey() {
      this.stopKey = null;
    }

    /** Returns true if field stopKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStopKey() {
      return this.stopKey != null;
    }

    public void setStopKeyIsSet(boolean value) {
      if (!value) {
        this.stopKey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeySix_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public String getColumnValueFilter() {
      return this.columnValueFilter;
    }

    public queryByRowkeySix_args setColumnValueFilter(String columnValueFilter) {
      this.columnValueFilter = columnValueFilter;
      return this;
    }

    public void unsetColumnValueFilter() {
      this.columnValueFilter = null;
    }

    /** Returns true if field columnValueFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilter() {
      return this.columnValueFilter != null;
    }

    public void setColumnValueFilterIsSet(boolean value) {
      if (!value) {
        this.columnValueFilter = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeySix_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public int getColumnFilterSize() {
      return (this.columnFilter == null) ? 0 : this.columnFilter.size();
    }

    public void putToColumnFilter(String key, List<String> val) {
      if (this.columnFilter == null) {
        this.columnFilter = new HashMap<String,List<String>>();
      }
      this.columnFilter.put(key, val);
    }

    public Map<String,List<String>> getColumnFilter() {
      return this.columnFilter;
    }

    public queryByRowkeySix_args setColumnFilter(Map<String,List<String>> columnFilter) {
      this.columnFilter = columnFilter;
      return this;
    }

    public void unsetColumnFilter() {
      this.columnFilter = null;
    }

    /** Returns true if field columnFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnFilter() {
      return this.columnFilter != null;
    }

    public void setColumnFilterIsSet(boolean value) {
      if (!value) {
        this.columnFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_KEY:
        if (value == null) {
          unsetStartKey();
        } else {
          setStartKey((String)value);
        }
        break;

      case STOP_KEY:
        if (value == null) {
          unsetStopKey();
        } else {
          setStopKey((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER:
        if (value == null) {
          unsetColumnValueFilter();
        } else {
          setColumnValueFilter((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      case COLUMN_FILTER:
        if (value == null) {
          unsetColumnFilter();
        } else {
          setColumnFilter((Map<String,List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_KEY:
        return getStartKey();

      case STOP_KEY:
        return getStopKey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER:
        return getColumnValueFilter();

      case PARAM:
        return getParam();

      case COLUMN_FILTER:
        return getColumnFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_KEY:
        return isSetStartKey();
      case STOP_KEY:
        return isSetStopKey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER:
        return isSetColumnValueFilter();
      case PARAM:
        return isSetParam();
      case COLUMN_FILTER:
        return isSetColumnFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeySix_args)
        return this.equals((queryByRowkeySix_args)that);
      return false;
    }

    public boolean equals(queryByRowkeySix_args that) {
      if (that == null)
        return false;

      boolean this_present_startKey = true && this.isSetStartKey();
      boolean that_present_startKey = true && that.isSetStartKey();
      if (this_present_startKey || that_present_startKey) {
        if (!(this_present_startKey && that_present_startKey))
          return false;
        if (!this.startKey.equals(that.startKey))
          return false;
      }

      boolean this_present_stopKey = true && this.isSetStopKey();
      boolean that_present_stopKey = true && that.isSetStopKey();
      if (this_present_stopKey || that_present_stopKey) {
        if (!(this_present_stopKey && that_present_stopKey))
          return false;
        if (!this.stopKey.equals(that.stopKey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilter = true && this.isSetColumnValueFilter();
      boolean that_present_columnValueFilter = true && that.isSetColumnValueFilter();
      if (this_present_columnValueFilter || that_present_columnValueFilter) {
        if (!(this_present_columnValueFilter && that_present_columnValueFilter))
          return false;
        if (!this.columnValueFilter.equals(that.columnValueFilter))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      boolean this_present_columnFilter = true && this.isSetColumnFilter();
      boolean that_present_columnFilter = true && that.isSetColumnFilter();
      if (this_present_columnFilter || that_present_columnFilter) {
        if (!(this_present_columnFilter && that_present_columnFilter))
          return false;
        if (!this.columnFilter.equals(that.columnFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeySix_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartKey()).compareTo(other.isSetStartKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, other.startKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStopKey()).compareTo(other.isSetStopKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStopKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopKey, other.stopKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilter()).compareTo(other.isSetColumnValueFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilter, other.columnValueFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnFilter()).compareTo(other.isSetColumnFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFilter, other.columnFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeySix_args(");
      boolean first = true;

      sb.append("startKey:");
      if (this.startKey == null) {
        sb.append("null");
      } else {
        sb.append(this.startKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stopKey:");
      if (this.stopKey == null) {
        sb.append("null");
      } else {
        sb.append(this.stopKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilter:");
      if (this.columnValueFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnFilter:");
      if (this.columnFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeySix_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeySix_argsStandardScheme getScheme() {
        return new queryByRowkeySix_argsStandardScheme();
      }
    }

    private static class queryByRowkeySix_argsStandardScheme extends StandardScheme<queryByRowkeySix_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeySix_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startKey = iprot.readString();
                struct.setStartKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOP_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stopKey = iprot.readString();
                struct.setStopKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list672 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list672.size);
                  for (int _i673 = 0; _i673 < _list672.size; ++_i673)
                  {
                    String _elem674;
                    _elem674 = iprot.readString();
                    struct.tableNames.add(_elem674);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COLUMN_VALUE_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.columnValueFilter = iprot.readString();
                struct.setColumnValueFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map675 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map675.size);
                  for (int _i676 = 0; _i676 < _map675.size; ++_i676)
                  {
                    String _key677;
                    String _val678;
                    _key677 = iprot.readString();
                    _val678 = iprot.readString();
                    struct.param.put(_key677, _val678);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COLUMN_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map679 = iprot.readMapBegin();
                  struct.columnFilter = new HashMap<String,List<String>>(2*_map679.size);
                  for (int _i680 = 0; _i680 < _map679.size; ++_i680)
                  {
                    String _key681;
                    List<String> _val682;
                    _key681 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list683 = iprot.readListBegin();
                      _val682 = new ArrayList<String>(_list683.size);
                      for (int _i684 = 0; _i684 < _list683.size; ++_i684)
                      {
                        String _elem685;
                        _elem685 = iprot.readString();
                        _val682.add(_elem685);
                      }
                      iprot.readListEnd();
                    }
                    struct.columnFilter.put(_key681, _val682);
                  }
                  iprot.readMapEnd();
                }
                struct.setColumnFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeySix_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startKey != null) {
          oprot.writeFieldBegin(START_KEY_FIELD_DESC);
          oprot.writeString(struct.startKey);
          oprot.writeFieldEnd();
        }
        if (struct.stopKey != null) {
          oprot.writeFieldBegin(STOP_KEY_FIELD_DESC);
          oprot.writeString(struct.stopKey);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter686 : struct.tableNames)
            {
              oprot.writeString(_iter686);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilter != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_FIELD_DESC);
          oprot.writeString(struct.columnValueFilter);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter687 : struct.param.entrySet())
            {
              oprot.writeString(_iter687.getKey());
              oprot.writeString(_iter687.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnFilter != null) {
          oprot.writeFieldBegin(COLUMN_FILTER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.columnFilter.size()));
            for (Map.Entry<String, List<String>> _iter688 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter688.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter688.getValue().size()));
                for (String _iter689 : _iter688.getValue())
                {
                  oprot.writeString(_iter689);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeySix_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeySix_argsTupleScheme getScheme() {
        return new queryByRowkeySix_argsTupleScheme();
      }
    }

    private static class queryByRowkeySix_argsTupleScheme extends TupleScheme<queryByRowkeySix_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySix_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartKey()) {
          optionals.set(0);
        }
        if (struct.isSetStopKey()) {
          optionals.set(1);
        }
        if (struct.isSetTableNames()) {
          optionals.set(2);
        }
        if (struct.isSetColumnValueFilter()) {
          optionals.set(3);
        }
        if (struct.isSetParam()) {
          optionals.set(4);
        }
        if (struct.isSetColumnFilter()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetStartKey()) {
          oprot.writeString(struct.startKey);
        }
        if (struct.isSetStopKey()) {
          oprot.writeString(struct.stopKey);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter690 : struct.tableNames)
            {
              oprot.writeString(_iter690);
            }
          }
        }
        if (struct.isSetColumnValueFilter()) {
          oprot.writeString(struct.columnValueFilter);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter691 : struct.param.entrySet())
            {
              oprot.writeString(_iter691.getKey());
              oprot.writeString(_iter691.getValue());
            }
          }
        }
        if (struct.isSetColumnFilter()) {
          {
            oprot.writeI32(struct.columnFilter.size());
            for (Map.Entry<String, List<String>> _iter692 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter692.getKey());
              {
                oprot.writeI32(_iter692.getValue().size());
                for (String _iter693 : _iter692.getValue())
                {
                  oprot.writeString(_iter693);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySix_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.startKey = iprot.readString();
          struct.setStartKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stopKey = iprot.readString();
          struct.setStopKeyIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list694 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list694.size);
            for (int _i695 = 0; _i695 < _list694.size; ++_i695)
            {
              String _elem696;
              _elem696 = iprot.readString();
              struct.tableNames.add(_elem696);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.columnValueFilter = iprot.readString();
          struct.setColumnValueFilterIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map697 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map697.size);
            for (int _i698 = 0; _i698 < _map697.size; ++_i698)
            {
              String _key699;
              String _val700;
              _key699 = iprot.readString();
              _val700 = iprot.readString();
              struct.param.put(_key699, _val700);
            }
          }
          struct.setParamIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map701 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.columnFilter = new HashMap<String,List<String>>(2*_map701.size);
            for (int _i702 = 0; _i702 < _map701.size; ++_i702)
            {
              String _key703;
              List<String> _val704;
              _key703 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list705 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val704 = new ArrayList<String>(_list705.size);
                for (int _i706 = 0; _i706 < _list705.size; ++_i706)
                {
                  String _elem707;
                  _elem707 = iprot.readString();
                  _val704.add(_elem707);
                }
              }
              struct.columnFilter.put(_key703, _val704);
            }
          }
          struct.setColumnFilterIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeySix_result implements org.apache.thrift.TBase<queryByRowkeySix_result, queryByRowkeySix_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeySix_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeySix_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeySix_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeySix_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeySix_result.class, metaDataMap);
    }

    public queryByRowkeySix_result() {
    }

    public queryByRowkeySix_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeySix_result(queryByRowkeySix_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeySix_result deepCopy() {
      return new queryByRowkeySix_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeySix_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeySix_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeySix_result)
        return this.equals((queryByRowkeySix_result)that);
      return false;
    }

    public boolean equals(queryByRowkeySix_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeySix_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeySix_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeySix_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeySix_resultStandardScheme getScheme() {
        return new queryByRowkeySix_resultStandardScheme();
      }
    }

    private static class queryByRowkeySix_resultStandardScheme extends StandardScheme<queryByRowkeySix_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeySix_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list708 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list708.size);
                  for (int _i709 = 0; _i709 < _list708.size; ++_i709)
                  {
                    List<String> _elem710;
                    {
                      org.apache.thrift.protocol.TList _list711 = iprot.readListBegin();
                      _elem710 = new ArrayList<String>(_list711.size);
                      for (int _i712 = 0; _i712 < _list711.size; ++_i712)
                      {
                        String _elem713;
                        _elem713 = iprot.readString();
                        _elem710.add(_elem713);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem710);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeySix_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter714 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter714.size()));
                for (String _iter715 : _iter714)
                {
                  oprot.writeString(_iter715);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeySix_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeySix_resultTupleScheme getScheme() {
        return new queryByRowkeySix_resultTupleScheme();
      }
    }

    private static class queryByRowkeySix_resultTupleScheme extends TupleScheme<queryByRowkeySix_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySix_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter716 : struct.success)
            {
              {
                oprot.writeI32(_iter716.size());
                for (String _iter717 : _iter716)
                {
                  oprot.writeString(_iter717);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySix_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list718 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list718.size);
            for (int _i719 = 0; _i719 < _list718.size; ++_i719)
            {
              List<String> _elem720;
              {
                org.apache.thrift.protocol.TList _list721 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem720 = new ArrayList<String>(_list721.size);
                for (int _i722 = 0; _i722 < _list721.size; ++_i722)
                {
                  String _elem723;
                  _elem723 = iprot.readString();
                  _elem720.add(_elem723);
                }
              }
              struct.success.add(_elem720);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeySixCrList_args implements org.apache.thrift.TBase<queryByRowkeySixCrList_args, queryByRowkeySixCrList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeySixCrList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeySixCrList_args");

    private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("startKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STOP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("stopKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField COLUMN_VALUE_FILTER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("columnValueFilterList", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField LOGICAL_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("logicalOpt", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)6);
    private static final org.apache.thrift.protocol.TField COLUMN_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnFilter", org.apache.thrift.protocol.TType.MAP, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeySixCrList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeySixCrList_argsTupleSchemeFactory());
    }

    public String startKey; // required
    public String stopKey; // required
    public List<String> tableNames; // required
    public List<String> columnValueFilterList; // required
    public String logicalOpt; // required
    public Map<String,String> param; // required
    public Map<String,List<String>> columnFilter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_KEY((short)1, "startKey"),
      STOP_KEY((short)2, "stopKey"),
      TABLE_NAMES((short)3, "tableNames"),
      COLUMN_VALUE_FILTER_LIST((short)4, "columnValueFilterList"),
      LOGICAL_OPT((short)5, "logicalOpt"),
      PARAM((short)6, "param"),
      COLUMN_FILTER((short)7, "columnFilter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_KEY
            return START_KEY;
          case 2: // STOP_KEY
            return STOP_KEY;
          case 3: // TABLE_NAMES
            return TABLE_NAMES;
          case 4: // COLUMN_VALUE_FILTER_LIST
            return COLUMN_VALUE_FILTER_LIST;
          case 5: // LOGICAL_OPT
            return LOGICAL_OPT;
          case 6: // PARAM
            return PARAM;
          case 7: // COLUMN_FILTER
            return COLUMN_FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("startKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STOP_KEY, new org.apache.thrift.meta_data.FieldMetaData("stopKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_VALUE_FILTER_LIST, new org.apache.thrift.meta_data.FieldMetaData("columnValueFilterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOGICAL_OPT, new org.apache.thrift.meta_data.FieldMetaData("logicalOpt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.COLUMN_FILTER, new org.apache.thrift.meta_data.FieldMetaData("columnFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeySixCrList_args.class, metaDataMap);
    }

    public queryByRowkeySixCrList_args() {
    }

    public queryByRowkeySixCrList_args(
      String startKey,
      String stopKey,
      List<String> tableNames,
      List<String> columnValueFilterList,
      String logicalOpt,
      Map<String,String> param,
      Map<String,List<String>> columnFilter)
    {
      this();
      this.startKey = startKey;
      this.stopKey = stopKey;
      this.tableNames = tableNames;
      this.columnValueFilterList = columnValueFilterList;
      this.logicalOpt = logicalOpt;
      this.param = param;
      this.columnFilter = columnFilter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeySixCrList_args(queryByRowkeySixCrList_args other) {
      if (other.isSetStartKey()) {
        this.startKey = other.startKey;
      }
      if (other.isSetStopKey()) {
        this.stopKey = other.stopKey;
      }
      if (other.isSetTableNames()) {
        List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
        this.tableNames = __this__tableNames;
      }
      if (other.isSetColumnValueFilterList()) {
        List<String> __this__columnValueFilterList = new ArrayList<String>(other.columnValueFilterList);
        this.columnValueFilterList = __this__columnValueFilterList;
      }
      if (other.isSetLogicalOpt()) {
        this.logicalOpt = other.logicalOpt;
      }
      if (other.isSetParam()) {
        Map<String,String> __this__param = new HashMap<String,String>(other.param);
        this.param = __this__param;
      }
      if (other.isSetColumnFilter()) {
        Map<String,List<String>> __this__columnFilter = new HashMap<String,List<String>>(other.columnFilter.size());
        for (Map.Entry<String, List<String>> other_element : other.columnFilter.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__columnFilter_copy_key = other_element_key;

          List<String> __this__columnFilter_copy_value = new ArrayList<String>(other_element_value);

          __this__columnFilter.put(__this__columnFilter_copy_key, __this__columnFilter_copy_value);
        }
        this.columnFilter = __this__columnFilter;
      }
    }

    public queryByRowkeySixCrList_args deepCopy() {
      return new queryByRowkeySixCrList_args(this);
    }

    @Override
    public void clear() {
      this.startKey = null;
      this.stopKey = null;
      this.tableNames = null;
      this.columnValueFilterList = null;
      this.logicalOpt = null;
      this.param = null;
      this.columnFilter = null;
    }

    public String getStartKey() {
      return this.startKey;
    }

    public queryByRowkeySixCrList_args setStartKey(String startKey) {
      this.startKey = startKey;
      return this;
    }

    public void unsetStartKey() {
      this.startKey = null;
    }

    /** Returns true if field startKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStartKey() {
      return this.startKey != null;
    }

    public void setStartKeyIsSet(boolean value) {
      if (!value) {
        this.startKey = null;
      }
    }

    public String getStopKey() {
      return this.stopKey;
    }

    public queryByRowkeySixCrList_args setStopKey(String stopKey) {
      this.stopKey = stopKey;
      return this;
    }

    public void unsetStopKey() {
      this.stopKey = null;
    }

    /** Returns true if field stopKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStopKey() {
      return this.stopKey != null;
    }

    public void setStopKeyIsSet(boolean value) {
      if (!value) {
        this.stopKey = null;
      }
    }

    public int getTableNamesSize() {
      return (this.tableNames == null) ? 0 : this.tableNames.size();
    }

    public java.util.Iterator<String> getTableNamesIterator() {
      return (this.tableNames == null) ? null : this.tableNames.iterator();
    }

    public void addToTableNames(String elem) {
      if (this.tableNames == null) {
        this.tableNames = new ArrayList<String>();
      }
      this.tableNames.add(elem);
    }

    public List<String> getTableNames() {
      return this.tableNames;
    }

    public queryByRowkeySixCrList_args setTableNames(List<String> tableNames) {
      this.tableNames = tableNames;
      return this;
    }

    public void unsetTableNames() {
      this.tableNames = null;
    }

    /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTableNames() {
      return this.tableNames != null;
    }

    public void setTableNamesIsSet(boolean value) {
      if (!value) {
        this.tableNames = null;
      }
    }

    public int getColumnValueFilterListSize() {
      return (this.columnValueFilterList == null) ? 0 : this.columnValueFilterList.size();
    }

    public java.util.Iterator<String> getColumnValueFilterListIterator() {
      return (this.columnValueFilterList == null) ? null : this.columnValueFilterList.iterator();
    }

    public void addToColumnValueFilterList(String elem) {
      if (this.columnValueFilterList == null) {
        this.columnValueFilterList = new ArrayList<String>();
      }
      this.columnValueFilterList.add(elem);
    }

    public List<String> getColumnValueFilterList() {
      return this.columnValueFilterList;
    }

    public queryByRowkeySixCrList_args setColumnValueFilterList(List<String> columnValueFilterList) {
      this.columnValueFilterList = columnValueFilterList;
      return this;
    }

    public void unsetColumnValueFilterList() {
      this.columnValueFilterList = null;
    }

    /** Returns true if field columnValueFilterList is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnValueFilterList() {
      return this.columnValueFilterList != null;
    }

    public void setColumnValueFilterListIsSet(boolean value) {
      if (!value) {
        this.columnValueFilterList = null;
      }
    }

    public String getLogicalOpt() {
      return this.logicalOpt;
    }

    public queryByRowkeySixCrList_args setLogicalOpt(String logicalOpt) {
      this.logicalOpt = logicalOpt;
      return this;
    }

    public void unsetLogicalOpt() {
      this.logicalOpt = null;
    }

    /** Returns true if field logicalOpt is set (has been assigned a value) and false otherwise */
    public boolean isSetLogicalOpt() {
      return this.logicalOpt != null;
    }

    public void setLogicalOptIsSet(boolean value) {
      if (!value) {
        this.logicalOpt = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public void putToParam(String key, String val) {
      if (this.param == null) {
        this.param = new HashMap<String,String>();
      }
      this.param.put(key, val);
    }

    public Map<String,String> getParam() {
      return this.param;
    }

    public queryByRowkeySixCrList_args setParam(Map<String,String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public int getColumnFilterSize() {
      return (this.columnFilter == null) ? 0 : this.columnFilter.size();
    }

    public void putToColumnFilter(String key, List<String> val) {
      if (this.columnFilter == null) {
        this.columnFilter = new HashMap<String,List<String>>();
      }
      this.columnFilter.put(key, val);
    }

    public Map<String,List<String>> getColumnFilter() {
      return this.columnFilter;
    }

    public queryByRowkeySixCrList_args setColumnFilter(Map<String,List<String>> columnFilter) {
      this.columnFilter = columnFilter;
      return this;
    }

    public void unsetColumnFilter() {
      this.columnFilter = null;
    }

    /** Returns true if field columnFilter is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnFilter() {
      return this.columnFilter != null;
    }

    public void setColumnFilterIsSet(boolean value) {
      if (!value) {
        this.columnFilter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_KEY:
        if (value == null) {
          unsetStartKey();
        } else {
          setStartKey((String)value);
        }
        break;

      case STOP_KEY:
        if (value == null) {
          unsetStopKey();
        } else {
          setStopKey((String)value);
        }
        break;

      case TABLE_NAMES:
        if (value == null) {
          unsetTableNames();
        } else {
          setTableNames((List<String>)value);
        }
        break;

      case COLUMN_VALUE_FILTER_LIST:
        if (value == null) {
          unsetColumnValueFilterList();
        } else {
          setColumnValueFilterList((List<String>)value);
        }
        break;

      case LOGICAL_OPT:
        if (value == null) {
          unsetLogicalOpt();
        } else {
          setLogicalOpt((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((Map<String,String>)value);
        }
        break;

      case COLUMN_FILTER:
        if (value == null) {
          unsetColumnFilter();
        } else {
          setColumnFilter((Map<String,List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_KEY:
        return getStartKey();

      case STOP_KEY:
        return getStopKey();

      case TABLE_NAMES:
        return getTableNames();

      case COLUMN_VALUE_FILTER_LIST:
        return getColumnValueFilterList();

      case LOGICAL_OPT:
        return getLogicalOpt();

      case PARAM:
        return getParam();

      case COLUMN_FILTER:
        return getColumnFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_KEY:
        return isSetStartKey();
      case STOP_KEY:
        return isSetStopKey();
      case TABLE_NAMES:
        return isSetTableNames();
      case COLUMN_VALUE_FILTER_LIST:
        return isSetColumnValueFilterList();
      case LOGICAL_OPT:
        return isSetLogicalOpt();
      case PARAM:
        return isSetParam();
      case COLUMN_FILTER:
        return isSetColumnFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeySixCrList_args)
        return this.equals((queryByRowkeySixCrList_args)that);
      return false;
    }

    public boolean equals(queryByRowkeySixCrList_args that) {
      if (that == null)
        return false;

      boolean this_present_startKey = true && this.isSetStartKey();
      boolean that_present_startKey = true && that.isSetStartKey();
      if (this_present_startKey || that_present_startKey) {
        if (!(this_present_startKey && that_present_startKey))
          return false;
        if (!this.startKey.equals(that.startKey))
          return false;
      }

      boolean this_present_stopKey = true && this.isSetStopKey();
      boolean that_present_stopKey = true && that.isSetStopKey();
      if (this_present_stopKey || that_present_stopKey) {
        if (!(this_present_stopKey && that_present_stopKey))
          return false;
        if (!this.stopKey.equals(that.stopKey))
          return false;
      }

      boolean this_present_tableNames = true && this.isSetTableNames();
      boolean that_present_tableNames = true && that.isSetTableNames();
      if (this_present_tableNames || that_present_tableNames) {
        if (!(this_present_tableNames && that_present_tableNames))
          return false;
        if (!this.tableNames.equals(that.tableNames))
          return false;
      }

      boolean this_present_columnValueFilterList = true && this.isSetColumnValueFilterList();
      boolean that_present_columnValueFilterList = true && that.isSetColumnValueFilterList();
      if (this_present_columnValueFilterList || that_present_columnValueFilterList) {
        if (!(this_present_columnValueFilterList && that_present_columnValueFilterList))
          return false;
        if (!this.columnValueFilterList.equals(that.columnValueFilterList))
          return false;
      }

      boolean this_present_logicalOpt = true && this.isSetLogicalOpt();
      boolean that_present_logicalOpt = true && that.isSetLogicalOpt();
      if (this_present_logicalOpt || that_present_logicalOpt) {
        if (!(this_present_logicalOpt && that_present_logicalOpt))
          return false;
        if (!this.logicalOpt.equals(that.logicalOpt))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      boolean this_present_columnFilter = true && this.isSetColumnFilter();
      boolean that_present_columnFilter = true && that.isSetColumnFilter();
      if (this_present_columnFilter || that_present_columnFilter) {
        if (!(this_present_columnFilter && that_present_columnFilter))
          return false;
        if (!this.columnFilter.equals(that.columnFilter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeySixCrList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartKey()).compareTo(other.isSetStartKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, other.startKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStopKey()).compareTo(other.isSetStopKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStopKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopKey, other.stopKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnValueFilterList()).compareTo(other.isSetColumnValueFilterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnValueFilterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnValueFilterList, other.columnValueFilterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogicalOpt()).compareTo(other.isSetLogicalOpt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogicalOpt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicalOpt, other.logicalOpt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnFilter()).compareTo(other.isSetColumnFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFilter, other.columnFilter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeySixCrList_args(");
      boolean first = true;

      sb.append("startKey:");
      if (this.startKey == null) {
        sb.append("null");
      } else {
        sb.append(this.startKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stopKey:");
      if (this.stopKey == null) {
        sb.append("null");
      } else {
        sb.append(this.stopKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableNames:");
      if (this.tableNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tableNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnValueFilterList:");
      if (this.columnValueFilterList == null) {
        sb.append("null");
      } else {
        sb.append(this.columnValueFilterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logicalOpt:");
      if (this.logicalOpt == null) {
        sb.append("null");
      } else {
        sb.append(this.logicalOpt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnFilter:");
      if (this.columnFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.columnFilter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeySixCrList_argsStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeySixCrList_argsStandardScheme getScheme() {
        return new queryByRowkeySixCrList_argsStandardScheme();
      }
    }

    private static class queryByRowkeySixCrList_argsStandardScheme extends StandardScheme<queryByRowkeySixCrList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeySixCrList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startKey = iprot.readString();
                struct.setStartKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOP_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stopKey = iprot.readString();
                struct.setStopKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list724 = iprot.readListBegin();
                  struct.tableNames = new ArrayList<String>(_list724.size);
                  for (int _i725 = 0; _i725 < _list724.size; ++_i725)
                  {
                    String _elem726;
                    _elem726 = iprot.readString();
                    struct.tableNames.add(_elem726);
                  }
                  iprot.readListEnd();
                }
                struct.setTableNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COLUMN_VALUE_FILTER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list727 = iprot.readListBegin();
                  struct.columnValueFilterList = new ArrayList<String>(_list727.size);
                  for (int _i728 = 0; _i728 < _list727.size; ++_i728)
                  {
                    String _elem729;
                    _elem729 = iprot.readString();
                    struct.columnValueFilterList.add(_elem729);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnValueFilterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOGICAL_OPT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logicalOpt = iprot.readString();
                struct.setLogicalOptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map730 = iprot.readMapBegin();
                  struct.param = new HashMap<String,String>(2*_map730.size);
                  for (int _i731 = 0; _i731 < _map730.size; ++_i731)
                  {
                    String _key732;
                    String _val733;
                    _key732 = iprot.readString();
                    _val733 = iprot.readString();
                    struct.param.put(_key732, _val733);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // COLUMN_FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map734 = iprot.readMapBegin();
                  struct.columnFilter = new HashMap<String,List<String>>(2*_map734.size);
                  for (int _i735 = 0; _i735 < _map734.size; ++_i735)
                  {
                    String _key736;
                    List<String> _val737;
                    _key736 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list738 = iprot.readListBegin();
                      _val737 = new ArrayList<String>(_list738.size);
                      for (int _i739 = 0; _i739 < _list738.size; ++_i739)
                      {
                        String _elem740;
                        _elem740 = iprot.readString();
                        _val737.add(_elem740);
                      }
                      iprot.readListEnd();
                    }
                    struct.columnFilter.put(_key736, _val737);
                  }
                  iprot.readMapEnd();
                }
                struct.setColumnFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeySixCrList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startKey != null) {
          oprot.writeFieldBegin(START_KEY_FIELD_DESC);
          oprot.writeString(struct.startKey);
          oprot.writeFieldEnd();
        }
        if (struct.stopKey != null) {
          oprot.writeFieldBegin(STOP_KEY_FIELD_DESC);
          oprot.writeString(struct.stopKey);
          oprot.writeFieldEnd();
        }
        if (struct.tableNames != null) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
            for (String _iter741 : struct.tableNames)
            {
              oprot.writeString(_iter741);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnValueFilterList != null) {
          oprot.writeFieldBegin(COLUMN_VALUE_FILTER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnValueFilterList.size()));
            for (String _iter742 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter742);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.logicalOpt != null) {
          oprot.writeFieldBegin(LOGICAL_OPT_FIELD_DESC);
          oprot.writeString(struct.logicalOpt);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (Map.Entry<String, String> _iter743 : struct.param.entrySet())
            {
              oprot.writeString(_iter743.getKey());
              oprot.writeString(_iter743.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.columnFilter != null) {
          oprot.writeFieldBegin(COLUMN_FILTER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.columnFilter.size()));
            for (Map.Entry<String, List<String>> _iter744 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter744.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter744.getValue().size()));
                for (String _iter745 : _iter744.getValue())
                {
                  oprot.writeString(_iter745);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeySixCrList_argsTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeySixCrList_argsTupleScheme getScheme() {
        return new queryByRowkeySixCrList_argsTupleScheme();
      }
    }

    private static class queryByRowkeySixCrList_argsTupleScheme extends TupleScheme<queryByRowkeySixCrList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySixCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartKey()) {
          optionals.set(0);
        }
        if (struct.isSetStopKey()) {
          optionals.set(1);
        }
        if (struct.isSetTableNames()) {
          optionals.set(2);
        }
        if (struct.isSetColumnValueFilterList()) {
          optionals.set(3);
        }
        if (struct.isSetLogicalOpt()) {
          optionals.set(4);
        }
        if (struct.isSetParam()) {
          optionals.set(5);
        }
        if (struct.isSetColumnFilter()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetStartKey()) {
          oprot.writeString(struct.startKey);
        }
        if (struct.isSetStopKey()) {
          oprot.writeString(struct.stopKey);
        }
        if (struct.isSetTableNames()) {
          {
            oprot.writeI32(struct.tableNames.size());
            for (String _iter746 : struct.tableNames)
            {
              oprot.writeString(_iter746);
            }
          }
        }
        if (struct.isSetColumnValueFilterList()) {
          {
            oprot.writeI32(struct.columnValueFilterList.size());
            for (String _iter747 : struct.columnValueFilterList)
            {
              oprot.writeString(_iter747);
            }
          }
        }
        if (struct.isSetLogicalOpt()) {
          oprot.writeString(struct.logicalOpt);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (Map.Entry<String, String> _iter748 : struct.param.entrySet())
            {
              oprot.writeString(_iter748.getKey());
              oprot.writeString(_iter748.getValue());
            }
          }
        }
        if (struct.isSetColumnFilter()) {
          {
            oprot.writeI32(struct.columnFilter.size());
            for (Map.Entry<String, List<String>> _iter749 : struct.columnFilter.entrySet())
            {
              oprot.writeString(_iter749.getKey());
              {
                oprot.writeI32(_iter749.getValue().size());
                for (String _iter750 : _iter749.getValue())
                {
                  oprot.writeString(_iter750);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySixCrList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.startKey = iprot.readString();
          struct.setStartKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stopKey = iprot.readString();
          struct.setStopKeyIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list751 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tableNames = new ArrayList<String>(_list751.size);
            for (int _i752 = 0; _i752 < _list751.size; ++_i752)
            {
              String _elem753;
              _elem753 = iprot.readString();
              struct.tableNames.add(_elem753);
            }
          }
          struct.setTableNamesIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list754 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columnValueFilterList = new ArrayList<String>(_list754.size);
            for (int _i755 = 0; _i755 < _list754.size; ++_i755)
            {
              String _elem756;
              _elem756 = iprot.readString();
              struct.columnValueFilterList.add(_elem756);
            }
          }
          struct.setColumnValueFilterListIsSet(true);
        }
        if (incoming.get(4)) {
          struct.logicalOpt = iprot.readString();
          struct.setLogicalOptIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map757 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new HashMap<String,String>(2*_map757.size);
            for (int _i758 = 0; _i758 < _map757.size; ++_i758)
            {
              String _key759;
              String _val760;
              _key759 = iprot.readString();
              _val760 = iprot.readString();
              struct.param.put(_key759, _val760);
            }
          }
          struct.setParamIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TMap _map761 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.columnFilter = new HashMap<String,List<String>>(2*_map761.size);
            for (int _i762 = 0; _i762 < _map761.size; ++_i762)
            {
              String _key763;
              List<String> _val764;
              _key763 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list765 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val764 = new ArrayList<String>(_list765.size);
                for (int _i766 = 0; _i766 < _list765.size; ++_i766)
                {
                  String _elem767;
                  _elem767 = iprot.readString();
                  _val764.add(_elem767);
                }
              }
              struct.columnFilter.put(_key763, _val764);
            }
          }
          struct.setColumnFilterIsSet(true);
        }
      }
    }

  }

  public static class queryByRowkeySixCrList_result implements org.apache.thrift.TBase<queryByRowkeySixCrList_result, queryByRowkeySixCrList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByRowkeySixCrList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByRowkeySixCrList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByRowkeySixCrList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByRowkeySixCrList_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXP((short)1, "clientExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXP
            return CLIENT_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CLIENT_EXP, new org.apache.thrift.meta_data.FieldMetaData("clientExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByRowkeySixCrList_result.class, metaDataMap);
    }

    public queryByRowkeySixCrList_result() {
    }

    public queryByRowkeySixCrList_result(
      List<List<String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp)
    {
      this();
      this.success = success;
      this.clientExp = clientExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByRowkeySixCrList_result(queryByRowkeySixCrList_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetClientExp()) {
        this.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException(other.clientExp);
      }
    }

    public queryByRowkeySixCrList_result deepCopy() {
      return new queryByRowkeySixCrList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public queryByRowkeySixCrList_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException getClientExp() {
      return this.clientExp;
    }

    public queryByRowkeySixCrList_result setClientExp(com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException clientExp) {
      this.clientExp = clientExp;
      return this;
    }

    public void unsetClientExp() {
      this.clientExp = null;
    }

    /** Returns true if field clientExp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientExp() {
      return this.clientExp != null;
    }

    public void setClientExpIsSet(boolean value) {
      if (!value) {
        this.clientExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case CLIENT_EXP:
        if (value == null) {
          unsetClientExp();
        } else {
          setClientExp((com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXP:
        return getClientExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXP:
        return isSetClientExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByRowkeySixCrList_result)
        return this.equals((queryByRowkeySixCrList_result)that);
      return false;
    }

    public boolean equals(queryByRowkeySixCrList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientExp = true && this.isSetClientExp();
      boolean that_present_clientExp = true && that.isSetClientExp();
      if (this_present_clientExp || that_present_clientExp) {
        if (!(this_present_clientExp && that_present_clientExp))
          return false;
        if (!this.clientExp.equals(that.clientExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryByRowkeySixCrList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientExp()).compareTo(other.isSetClientExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientExp, other.clientExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByRowkeySixCrList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientExp:");
      if (this.clientExp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByRowkeySixCrList_resultStandardSchemeFactory implements SchemeFactory {
      public queryByRowkeySixCrList_resultStandardScheme getScheme() {
        return new queryByRowkeySixCrList_resultStandardScheme();
      }
    }

    private static class queryByRowkeySixCrList_resultStandardScheme extends StandardScheme<queryByRowkeySixCrList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByRowkeySixCrList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list768 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list768.size);
                  for (int _i769 = 0; _i769 < _list768.size; ++_i769)
                  {
                    List<String> _elem770;
                    {
                      org.apache.thrift.protocol.TList _list771 = iprot.readListBegin();
                      _elem770 = new ArrayList<String>(_list771.size);
                      for (int _i772 = 0; _i772 < _list771.size; ++_i772)
                      {
                        String _elem773;
                        _elem773 = iprot.readString();
                        _elem770.add(_elem773);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem770);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
                struct.clientExp.read(iprot);
                struct.setClientExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByRowkeySixCrList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter774 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter774.size()));
                for (String _iter775 : _iter774)
                {
                  oprot.writeString(_iter775);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.clientExp != null) {
          oprot.writeFieldBegin(CLIENT_EXP_FIELD_DESC);
          struct.clientExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByRowkeySixCrList_resultTupleSchemeFactory implements SchemeFactory {
      public queryByRowkeySixCrList_resultTupleScheme getScheme() {
        return new queryByRowkeySixCrList_resultTupleScheme();
      }
    }

    private static class queryByRowkeySixCrList_resultTupleScheme extends TupleScheme<queryByRowkeySixCrList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySixCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter776 : struct.success)
            {
              {
                oprot.writeI32(_iter776.size());
                for (String _iter777 : _iter776)
                {
                  oprot.writeString(_iter777);
                }
              }
            }
          }
        }
        if (struct.isSetClientExp()) {
          struct.clientExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByRowkeySixCrList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list778 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list778.size);
            for (int _i779 = 0; _i779 < _list778.size; ++_i779)
            {
              List<String> _elem780;
              {
                org.apache.thrift.protocol.TList _list781 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem780 = new ArrayList<String>(_list781.size);
                for (int _i782 = 0; _i782 < _list781.size; ++_i782)
                {
                  String _elem783;
                  _elem783 = iprot.readString();
                  _elem780.add(_elem783);
                }
              }
              struct.success.add(_elem780);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientExp = new com.ailk.oci.ocnosql.client.thrift.exception.ClientRuntimeException();
          struct.clientExp.read(iprot);
          struct.setClientExpIsSet(true);
        }
      }
    }

  }

}
