/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.oci.ocnosql.client.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SQLService {

  public interface Iface {

    public int excuteNonQueryFir(String sql) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public int excuteNonQuerySec(String sql, List<String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public void excuteNonQueryThr(List<String> sql, int batchSize) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public void excuteNonQueryFou(List<String> sql, List<List<String>> param, int batchSize) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public List<Map<String,String>> executeQueryRawFir(String sql) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public List<Map<String,String>> executeQueryRawSec(String sql, List<String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public List<Map<String,String>> executeQueryFir(String sql) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public List<Map<String,String>> executeQuerySec(String sql, List<String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public void beginTransaction() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public void commitTransaction() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public void rollbackTransaction() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

    public void close() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void excuteNonQueryFir(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void excuteNonQuerySec(String sql, List<String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void excuteNonQueryThr(List<String> sql, int batchSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void excuteNonQueryFou(List<String> sql, List<List<String>> param, int batchSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void executeQueryRawFir(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void executeQueryRawSec(String sql, List<String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void executeQueryFir(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void executeQuerySec(String sql, List<String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void beginTransaction(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void commitTransaction(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rollbackTransaction(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void close(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int excuteNonQueryFir(String sql) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_excuteNonQueryFir(sql);
      return recv_excuteNonQueryFir();
    }

    public void send_excuteNonQueryFir(String sql) throws org.apache.thrift.TException
    {
      excuteNonQueryFir_args args = new excuteNonQueryFir_args();
      args.setSql(sql);
      sendBase("excuteNonQueryFir", args);
    }

    public int recv_excuteNonQueryFir() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      excuteNonQueryFir_result result = new excuteNonQueryFir_result();
      receiveBase(result, "excuteNonQueryFir");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "excuteNonQueryFir failed: unknown result");
    }

    public int excuteNonQuerySec(String sql, List<String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_excuteNonQuerySec(sql, param);
      return recv_excuteNonQuerySec();
    }

    public void send_excuteNonQuerySec(String sql, List<String> param) throws org.apache.thrift.TException
    {
      excuteNonQuerySec_args args = new excuteNonQuerySec_args();
      args.setSql(sql);
      args.setParam(param);
      sendBase("excuteNonQuerySec", args);
    }

    public int recv_excuteNonQuerySec() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      excuteNonQuerySec_result result = new excuteNonQuerySec_result();
      receiveBase(result, "excuteNonQuerySec");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "excuteNonQuerySec failed: unknown result");
    }

    public void excuteNonQueryThr(List<String> sql, int batchSize) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_excuteNonQueryThr(sql, batchSize);
      recv_excuteNonQueryThr();
    }

    public void send_excuteNonQueryThr(List<String> sql, int batchSize) throws org.apache.thrift.TException
    {
      excuteNonQueryThr_args args = new excuteNonQueryThr_args();
      args.setSql(sql);
      args.setBatchSize(batchSize);
      sendBase("excuteNonQueryThr", args);
    }

    public void recv_excuteNonQueryThr() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      excuteNonQueryThr_result result = new excuteNonQueryThr_result();
      receiveBase(result, "excuteNonQueryThr");
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      return;
    }

    public void excuteNonQueryFou(List<String> sql, List<List<String>> param, int batchSize) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_excuteNonQueryFou(sql, param, batchSize);
      recv_excuteNonQueryFou();
    }

    public void send_excuteNonQueryFou(List<String> sql, List<List<String>> param, int batchSize) throws org.apache.thrift.TException
    {
      excuteNonQueryFou_args args = new excuteNonQueryFou_args();
      args.setSql(sql);
      args.setParam(param);
      args.setBatchSize(batchSize);
      sendBase("excuteNonQueryFou", args);
    }

    public void recv_excuteNonQueryFou() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      excuteNonQueryFou_result result = new excuteNonQueryFou_result();
      receiveBase(result, "excuteNonQueryFou");
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      return;
    }

    public List<Map<String,String>> executeQueryRawFir(String sql) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_executeQueryRawFir(sql);
      return recv_executeQueryRawFir();
    }

    public void send_executeQueryRawFir(String sql) throws org.apache.thrift.TException
    {
      executeQueryRawFir_args args = new executeQueryRawFir_args();
      args.setSql(sql);
      sendBase("executeQueryRawFir", args);
    }

    public List<Map<String,String>> recv_executeQueryRawFir() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      executeQueryRawFir_result result = new executeQueryRawFir_result();
      receiveBase(result, "executeQueryRawFir");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeQueryRawFir failed: unknown result");
    }

    public List<Map<String,String>> executeQueryRawSec(String sql, List<String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_executeQueryRawSec(sql, param);
      return recv_executeQueryRawSec();
    }

    public void send_executeQueryRawSec(String sql, List<String> param) throws org.apache.thrift.TException
    {
      executeQueryRawSec_args args = new executeQueryRawSec_args();
      args.setSql(sql);
      args.setParam(param);
      sendBase("executeQueryRawSec", args);
    }

    public List<Map<String,String>> recv_executeQueryRawSec() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      executeQueryRawSec_result result = new executeQueryRawSec_result();
      receiveBase(result, "executeQueryRawSec");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeQueryRawSec failed: unknown result");
    }

    public List<Map<String,String>> executeQueryFir(String sql) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_executeQueryFir(sql);
      return recv_executeQueryFir();
    }

    public void send_executeQueryFir(String sql) throws org.apache.thrift.TException
    {
      executeQueryFir_args args = new executeQueryFir_args();
      args.setSql(sql);
      sendBase("executeQueryFir", args);
    }

    public List<Map<String,String>> recv_executeQueryFir() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      executeQueryFir_result result = new executeQueryFir_result();
      receiveBase(result, "executeQueryFir");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeQueryFir failed: unknown result");
    }

    public List<Map<String,String>> executeQuerySec(String sql, List<String> param) throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_executeQuerySec(sql, param);
      return recv_executeQuerySec();
    }

    public void send_executeQuerySec(String sql, List<String> param) throws org.apache.thrift.TException
    {
      executeQuerySec_args args = new executeQuerySec_args();
      args.setSql(sql);
      args.setParam(param);
      sendBase("executeQuerySec", args);
    }

    public List<Map<String,String>> recv_executeQuerySec() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      executeQuerySec_result result = new executeQuerySec_result();
      receiveBase(result, "executeQuerySec");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeQuerySec failed: unknown result");
    }

    public void beginTransaction() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_beginTransaction();
      recv_beginTransaction();
    }

    public void send_beginTransaction() throws org.apache.thrift.TException
    {
      beginTransaction_args args = new beginTransaction_args();
      sendBase("beginTransaction", args);
    }

    public void recv_beginTransaction() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      beginTransaction_result result = new beginTransaction_result();
      receiveBase(result, "beginTransaction");
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      return;
    }

    public void commitTransaction() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_commitTransaction();
      recv_commitTransaction();
    }

    public void send_commitTransaction() throws org.apache.thrift.TException
    {
      commitTransaction_args args = new commitTransaction_args();
      sendBase("commitTransaction", args);
    }

    public void recv_commitTransaction() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      commitTransaction_result result = new commitTransaction_result();
      receiveBase(result, "commitTransaction");
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      return;
    }

    public void rollbackTransaction() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_rollbackTransaction();
      recv_rollbackTransaction();
    }

    public void send_rollbackTransaction() throws org.apache.thrift.TException
    {
      rollbackTransaction_args args = new rollbackTransaction_args();
      sendBase("rollbackTransaction", args);
    }

    public void recv_rollbackTransaction() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      rollbackTransaction_result result = new rollbackTransaction_result();
      receiveBase(result, "rollbackTransaction");
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      return;
    }

    public void close() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      send_close();
      recv_close();
    }

    public void send_close() throws org.apache.thrift.TException
    {
      close_args args = new close_args();
      sendBase("close", args);
    }

    public void recv_close() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException
    {
      close_result result = new close_result();
      receiveBase(result, "close");
      if (result.sqlException != null) {
        throw result.sqlException;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void excuteNonQueryFir(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      excuteNonQueryFir_call method_call = new excuteNonQueryFir_call(sql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class excuteNonQueryFir_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sql;
      public excuteNonQueryFir_call(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("excuteNonQueryFir", org.apache.thrift.protocol.TMessageType.CALL, 0));
        excuteNonQueryFir_args args = new excuteNonQueryFir_args();
        args.setSql(sql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_excuteNonQueryFir();
      }
    }

    public void excuteNonQuerySec(String sql, List<String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      excuteNonQuerySec_call method_call = new excuteNonQuerySec_call(sql, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class excuteNonQuerySec_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sql;
      private List<String> param;
      public excuteNonQuerySec_call(String sql, List<String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("excuteNonQuerySec", org.apache.thrift.protocol.TMessageType.CALL, 0));
        excuteNonQuerySec_args args = new excuteNonQuerySec_args();
        args.setSql(sql);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_excuteNonQuerySec();
      }
    }

    public void excuteNonQueryThr(List<String> sql, int batchSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      excuteNonQueryThr_call method_call = new excuteNonQueryThr_call(sql, batchSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class excuteNonQueryThr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> sql;
      private int batchSize;
      public excuteNonQueryThr_call(List<String> sql, int batchSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
        this.batchSize = batchSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("excuteNonQueryThr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        excuteNonQueryThr_args args = new excuteNonQueryThr_args();
        args.setSql(sql);
        args.setBatchSize(batchSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_excuteNonQueryThr();
      }
    }

    public void excuteNonQueryFou(List<String> sql, List<List<String>> param, int batchSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      excuteNonQueryFou_call method_call = new excuteNonQueryFou_call(sql, param, batchSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class excuteNonQueryFou_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> sql;
      private List<List<String>> param;
      private int batchSize;
      public excuteNonQueryFou_call(List<String> sql, List<List<String>> param, int batchSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
        this.param = param;
        this.batchSize = batchSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("excuteNonQueryFou", org.apache.thrift.protocol.TMessageType.CALL, 0));
        excuteNonQueryFou_args args = new excuteNonQueryFou_args();
        args.setSql(sql);
        args.setParam(param);
        args.setBatchSize(batchSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_excuteNonQueryFou();
      }
    }

    public void executeQueryRawFir(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeQueryRawFir_call method_call = new executeQueryRawFir_call(sql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeQueryRawFir_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sql;
      public executeQueryRawFir_call(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeQueryRawFir", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeQueryRawFir_args args = new executeQueryRawFir_args();
        args.setSql(sql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeQueryRawFir();
      }
    }

    public void executeQueryRawSec(String sql, List<String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeQueryRawSec_call method_call = new executeQueryRawSec_call(sql, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeQueryRawSec_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sql;
      private List<String> param;
      public executeQueryRawSec_call(String sql, List<String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeQueryRawSec", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeQueryRawSec_args args = new executeQueryRawSec_args();
        args.setSql(sql);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeQueryRawSec();
      }
    }

    public void executeQueryFir(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeQueryFir_call method_call = new executeQueryFir_call(sql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeQueryFir_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sql;
      public executeQueryFir_call(String sql, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeQueryFir", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeQueryFir_args args = new executeQueryFir_args();
        args.setSql(sql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeQueryFir();
      }
    }

    public void executeQuerySec(String sql, List<String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeQuerySec_call method_call = new executeQuerySec_call(sql, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeQuerySec_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sql;
      private List<String> param;
      public executeQuerySec_call(String sql, List<String> param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeQuerySec", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeQuerySec_args args = new executeQuerySec_args();
        args.setSql(sql);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeQuerySec();
      }
    }

    public void beginTransaction(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      beginTransaction_call method_call = new beginTransaction_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class beginTransaction_call extends org.apache.thrift.async.TAsyncMethodCall {
      public beginTransaction_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("beginTransaction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        beginTransaction_args args = new beginTransaction_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_beginTransaction();
      }
    }

    public void commitTransaction(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      commitTransaction_call method_call = new commitTransaction_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class commitTransaction_call extends org.apache.thrift.async.TAsyncMethodCall {
      public commitTransaction_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commitTransaction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commitTransaction_args args = new commitTransaction_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_commitTransaction();
      }
    }

    public void rollbackTransaction(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rollbackTransaction_call method_call = new rollbackTransaction_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rollbackTransaction_call extends org.apache.thrift.async.TAsyncMethodCall {
      public rollbackTransaction_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rollbackTransaction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rollbackTransaction_args args = new rollbackTransaction_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_rollbackTransaction();
      }
    }

    public void close(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      close_call method_call = new close_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class close_call extends org.apache.thrift.async.TAsyncMethodCall {
      public close_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close", org.apache.thrift.protocol.TMessageType.CALL, 0));
        close_args args = new close_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.ailk.oci.ocnosql.client.thrift.exception.SQLException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_close();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("excuteNonQueryFir", new excuteNonQueryFir());
      processMap.put("excuteNonQuerySec", new excuteNonQuerySec());
      processMap.put("excuteNonQueryThr", new excuteNonQueryThr());
      processMap.put("excuteNonQueryFou", new excuteNonQueryFou());
      processMap.put("executeQueryRawFir", new executeQueryRawFir());
      processMap.put("executeQueryRawSec", new executeQueryRawSec());
      processMap.put("executeQueryFir", new executeQueryFir());
      processMap.put("executeQuerySec", new executeQuerySec());
      processMap.put("beginTransaction", new beginTransaction());
      processMap.put("commitTransaction", new commitTransaction());
      processMap.put("rollbackTransaction", new rollbackTransaction());
      processMap.put("close", new close());
      return processMap;
    }

    public static class excuteNonQueryFir<I extends Iface> extends org.apache.thrift.ProcessFunction<I, excuteNonQueryFir_args> {
      public excuteNonQueryFir() {
        super("excuteNonQueryFir");
      }

      public excuteNonQueryFir_args getEmptyArgsInstance() {
        return new excuteNonQueryFir_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public excuteNonQueryFir_result getResult(I iface, excuteNonQueryFir_args args) throws org.apache.thrift.TException {
        excuteNonQueryFir_result result = new excuteNonQueryFir_result();
        try {
          result.success = iface.excuteNonQueryFir(args.sql);
          result.setSuccessIsSet(true);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class excuteNonQuerySec<I extends Iface> extends org.apache.thrift.ProcessFunction<I, excuteNonQuerySec_args> {
      public excuteNonQuerySec() {
        super("excuteNonQuerySec");
      }

      public excuteNonQuerySec_args getEmptyArgsInstance() {
        return new excuteNonQuerySec_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public excuteNonQuerySec_result getResult(I iface, excuteNonQuerySec_args args) throws org.apache.thrift.TException {
        excuteNonQuerySec_result result = new excuteNonQuerySec_result();
        try {
          result.success = iface.excuteNonQuerySec(args.sql, args.param);
          result.setSuccessIsSet(true);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class excuteNonQueryThr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, excuteNonQueryThr_args> {
      public excuteNonQueryThr() {
        super("excuteNonQueryThr");
      }

      public excuteNonQueryThr_args getEmptyArgsInstance() {
        return new excuteNonQueryThr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public excuteNonQueryThr_result getResult(I iface, excuteNonQueryThr_args args) throws org.apache.thrift.TException {
        excuteNonQueryThr_result result = new excuteNonQueryThr_result();
        try {
          iface.excuteNonQueryThr(args.sql, args.batchSize);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class excuteNonQueryFou<I extends Iface> extends org.apache.thrift.ProcessFunction<I, excuteNonQueryFou_args> {
      public excuteNonQueryFou() {
        super("excuteNonQueryFou");
      }

      public excuteNonQueryFou_args getEmptyArgsInstance() {
        return new excuteNonQueryFou_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public excuteNonQueryFou_result getResult(I iface, excuteNonQueryFou_args args) throws org.apache.thrift.TException {
        excuteNonQueryFou_result result = new excuteNonQueryFou_result();
        try {
          iface.excuteNonQueryFou(args.sql, args.param, args.batchSize);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class executeQueryRawFir<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeQueryRawFir_args> {
      public executeQueryRawFir() {
        super("executeQueryRawFir");
      }

      public executeQueryRawFir_args getEmptyArgsInstance() {
        return new executeQueryRawFir_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public executeQueryRawFir_result getResult(I iface, executeQueryRawFir_args args) throws org.apache.thrift.TException {
        executeQueryRawFir_result result = new executeQueryRawFir_result();
        try {
          result.success = iface.executeQueryRawFir(args.sql);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class executeQueryRawSec<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeQueryRawSec_args> {
      public executeQueryRawSec() {
        super("executeQueryRawSec");
      }

      public executeQueryRawSec_args getEmptyArgsInstance() {
        return new executeQueryRawSec_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public executeQueryRawSec_result getResult(I iface, executeQueryRawSec_args args) throws org.apache.thrift.TException {
        executeQueryRawSec_result result = new executeQueryRawSec_result();
        try {
          result.success = iface.executeQueryRawSec(args.sql, args.param);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class executeQueryFir<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeQueryFir_args> {
      public executeQueryFir() {
        super("executeQueryFir");
      }

      public executeQueryFir_args getEmptyArgsInstance() {
        return new executeQueryFir_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public executeQueryFir_result getResult(I iface, executeQueryFir_args args) throws org.apache.thrift.TException {
        executeQueryFir_result result = new executeQueryFir_result();
        try {
          result.success = iface.executeQueryFir(args.sql);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class executeQuerySec<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeQuerySec_args> {
      public executeQuerySec() {
        super("executeQuerySec");
      }

      public executeQuerySec_args getEmptyArgsInstance() {
        return new executeQuerySec_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public executeQuerySec_result getResult(I iface, executeQuerySec_args args) throws org.apache.thrift.TException {
        executeQuerySec_result result = new executeQuerySec_result();
        try {
          result.success = iface.executeQuerySec(args.sql, args.param);
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class beginTransaction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginTransaction_args> {
      public beginTransaction() {
        super("beginTransaction");
      }

      public beginTransaction_args getEmptyArgsInstance() {
        return new beginTransaction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public beginTransaction_result getResult(I iface, beginTransaction_args args) throws org.apache.thrift.TException {
        beginTransaction_result result = new beginTransaction_result();
        try {
          iface.beginTransaction();
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class commitTransaction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commitTransaction_args> {
      public commitTransaction() {
        super("commitTransaction");
      }

      public commitTransaction_args getEmptyArgsInstance() {
        return new commitTransaction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public commitTransaction_result getResult(I iface, commitTransaction_args args) throws org.apache.thrift.TException {
        commitTransaction_result result = new commitTransaction_result();
        try {
          iface.commitTransaction();
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class rollbackTransaction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rollbackTransaction_args> {
      public rollbackTransaction() {
        super("rollbackTransaction");
      }

      public rollbackTransaction_args getEmptyArgsInstance() {
        return new rollbackTransaction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rollbackTransaction_result getResult(I iface, rollbackTransaction_args args) throws org.apache.thrift.TException {
        rollbackTransaction_result result = new rollbackTransaction_result();
        try {
          iface.rollbackTransaction();
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

    public static class close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_args> {
      public close() {
        super("close");
      }

      public close_args getEmptyArgsInstance() {
        return new close_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public close_result getResult(I iface, close_args args) throws org.apache.thrift.TException {
        close_result result = new close_result();
        try {
          iface.close();
        } catch (com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
          result.sqlException = sqlException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("excuteNonQueryFir", new excuteNonQueryFir());
      processMap.put("excuteNonQuerySec", new excuteNonQuerySec());
      processMap.put("excuteNonQueryThr", new excuteNonQueryThr());
      processMap.put("excuteNonQueryFou", new excuteNonQueryFou());
      processMap.put("executeQueryRawFir", new executeQueryRawFir());
      processMap.put("executeQueryRawSec", new executeQueryRawSec());
      processMap.put("executeQueryFir", new executeQueryFir());
      processMap.put("executeQuerySec", new executeQuerySec());
      processMap.put("beginTransaction", new beginTransaction());
      processMap.put("commitTransaction", new commitTransaction());
      processMap.put("rollbackTransaction", new rollbackTransaction());
      processMap.put("close", new close());
      return processMap;
    }

    public static class excuteNonQueryFir<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, excuteNonQueryFir_args, Integer> {
      public excuteNonQueryFir() {
        super("excuteNonQueryFir");
      }

      public excuteNonQueryFir_args getEmptyArgsInstance() {
        return new excuteNonQueryFir_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            excuteNonQueryFir_result result = new excuteNonQueryFir_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            excuteNonQueryFir_result result = new excuteNonQueryFir_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, excuteNonQueryFir_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.excuteNonQueryFir(args.sql,resultHandler);
      }
    }

    public static class excuteNonQuerySec<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, excuteNonQuerySec_args, Integer> {
      public excuteNonQuerySec() {
        super("excuteNonQuerySec");
      }

      public excuteNonQuerySec_args getEmptyArgsInstance() {
        return new excuteNonQuerySec_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            excuteNonQuerySec_result result = new excuteNonQuerySec_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            excuteNonQuerySec_result result = new excuteNonQuerySec_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, excuteNonQuerySec_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.excuteNonQuerySec(args.sql, args.param,resultHandler);
      }
    }

    public static class excuteNonQueryThr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, excuteNonQueryThr_args, Void> {
      public excuteNonQueryThr() {
        super("excuteNonQueryThr");
      }

      public excuteNonQueryThr_args getEmptyArgsInstance() {
        return new excuteNonQueryThr_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            excuteNonQueryThr_result result = new excuteNonQueryThr_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            excuteNonQueryThr_result result = new excuteNonQueryThr_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, excuteNonQueryThr_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.excuteNonQueryThr(args.sql, args.batchSize,resultHandler);
      }
    }

    public static class excuteNonQueryFou<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, excuteNonQueryFou_args, Void> {
      public excuteNonQueryFou() {
        super("excuteNonQueryFou");
      }

      public excuteNonQueryFou_args getEmptyArgsInstance() {
        return new excuteNonQueryFou_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            excuteNonQueryFou_result result = new excuteNonQueryFou_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            excuteNonQueryFou_result result = new excuteNonQueryFou_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, excuteNonQueryFou_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.excuteNonQueryFou(args.sql, args.param, args.batchSize,resultHandler);
      }
    }

    public static class executeQueryRawFir<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeQueryRawFir_args, List<Map<String,String>>> {
      public executeQueryRawFir() {
        super("executeQueryRawFir");
      }

      public executeQueryRawFir_args getEmptyArgsInstance() {
        return new executeQueryRawFir_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            executeQueryRawFir_result result = new executeQueryRawFir_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            executeQueryRawFir_result result = new executeQueryRawFir_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executeQueryRawFir_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.executeQueryRawFir(args.sql,resultHandler);
      }
    }

    public static class executeQueryRawSec<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeQueryRawSec_args, List<Map<String,String>>> {
      public executeQueryRawSec() {
        super("executeQueryRawSec");
      }

      public executeQueryRawSec_args getEmptyArgsInstance() {
        return new executeQueryRawSec_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            executeQueryRawSec_result result = new executeQueryRawSec_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            executeQueryRawSec_result result = new executeQueryRawSec_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executeQueryRawSec_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.executeQueryRawSec(args.sql, args.param,resultHandler);
      }
    }

    public static class executeQueryFir<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeQueryFir_args, List<Map<String,String>>> {
      public executeQueryFir() {
        super("executeQueryFir");
      }

      public executeQueryFir_args getEmptyArgsInstance() {
        return new executeQueryFir_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            executeQueryFir_result result = new executeQueryFir_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            executeQueryFir_result result = new executeQueryFir_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executeQueryFir_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.executeQueryFir(args.sql,resultHandler);
      }
    }

    public static class executeQuerySec<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeQuerySec_args, List<Map<String,String>>> {
      public executeQuerySec() {
        super("executeQuerySec");
      }

      public executeQuerySec_args getEmptyArgsInstance() {
        return new executeQuerySec_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            executeQuerySec_result result = new executeQuerySec_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            executeQuerySec_result result = new executeQuerySec_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executeQuerySec_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.executeQuerySec(args.sql, args.param,resultHandler);
      }
    }

    public static class beginTransaction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, beginTransaction_args, Void> {
      public beginTransaction() {
        super("beginTransaction");
      }

      public beginTransaction_args getEmptyArgsInstance() {
        return new beginTransaction_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            beginTransaction_result result = new beginTransaction_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            beginTransaction_result result = new beginTransaction_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, beginTransaction_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.beginTransaction(resultHandler);
      }
    }

    public static class commitTransaction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, commitTransaction_args, Void> {
      public commitTransaction() {
        super("commitTransaction");
      }

      public commitTransaction_args getEmptyArgsInstance() {
        return new commitTransaction_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            commitTransaction_result result = new commitTransaction_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            commitTransaction_result result = new commitTransaction_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, commitTransaction_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.commitTransaction(resultHandler);
      }
    }

    public static class rollbackTransaction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rollbackTransaction_args, Void> {
      public rollbackTransaction() {
        super("rollbackTransaction");
      }

      public rollbackTransaction_args getEmptyArgsInstance() {
        return new rollbackTransaction_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            rollbackTransaction_result result = new rollbackTransaction_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rollbackTransaction_result result = new rollbackTransaction_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rollbackTransaction_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.rollbackTransaction(resultHandler);
      }
    }

    public static class close<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, close_args, Void> {
      public close() {
        super("close");
      }

      public close_args getEmptyArgsInstance() {
        return new close_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            close_result result = new close_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            close_result result = new close_result();
            if (e instanceof com.ailk.oci.ocnosql.client.thrift.exception.SQLException) {
                        result.sqlException = (com.ailk.oci.ocnosql.client.thrift.exception.SQLException) e;
                        result.setSqlExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, close_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.close(resultHandler);
      }
    }

  }

  public static class excuteNonQueryFir_args implements org.apache.thrift.TBase<excuteNonQueryFir_args, excuteNonQueryFir_args._Fields>, java.io.Serializable, Cloneable, Comparable<excuteNonQueryFir_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteNonQueryFir_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new excuteNonQueryFir_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new excuteNonQueryFir_argsTupleSchemeFactory());
    }

    public String sql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteNonQueryFir_args.class, metaDataMap);
    }

    public excuteNonQueryFir_args() {
    }

    public excuteNonQueryFir_args(
      String sql)
    {
      this();
      this.sql = sql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteNonQueryFir_args(excuteNonQueryFir_args other) {
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
    }

    public excuteNonQueryFir_args deepCopy() {
      return new excuteNonQueryFir_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
    }

    public String getSql() {
      return this.sql;
    }

    public excuteNonQueryFir_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteNonQueryFir_args)
        return this.equals((excuteNonQueryFir_args)that);
      return false;
    }

    public boolean equals(excuteNonQueryFir_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(excuteNonQueryFir_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("excuteNonQueryFir_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteNonQueryFir_argsStandardSchemeFactory implements SchemeFactory {
      public excuteNonQueryFir_argsStandardScheme getScheme() {
        return new excuteNonQueryFir_argsStandardScheme();
      }
    }

    private static class excuteNonQueryFir_argsStandardScheme extends StandardScheme<excuteNonQueryFir_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteNonQueryFir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteNonQueryFir_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteNonQueryFir_argsTupleSchemeFactory implements SchemeFactory {
      public excuteNonQueryFir_argsTupleScheme getScheme() {
        return new excuteNonQueryFir_argsTupleScheme();
      }
    }

    private static class excuteNonQueryFir_argsTupleScheme extends TupleScheme<excuteNonQueryFir_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryFir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryFir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
      }
    }

  }

  public static class excuteNonQueryFir_result implements org.apache.thrift.TBase<excuteNonQueryFir_result, excuteNonQueryFir_result._Fields>, java.io.Serializable, Cloneable, Comparable<excuteNonQueryFir_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteNonQueryFir_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new excuteNonQueryFir_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new excuteNonQueryFir_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteNonQueryFir_result.class, metaDataMap);
    }

    public excuteNonQueryFir_result() {
    }

    public excuteNonQueryFir_result(
      int success,
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteNonQueryFir_result(excuteNonQueryFir_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public excuteNonQueryFir_result deepCopy() {
      return new excuteNonQueryFir_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.sqlException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public excuteNonQueryFir_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public excuteNonQueryFir_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteNonQueryFir_result)
        return this.equals((excuteNonQueryFir_result)that);
      return false;
    }

    public boolean equals(excuteNonQueryFir_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(excuteNonQueryFir_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("excuteNonQueryFir_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteNonQueryFir_resultStandardSchemeFactory implements SchemeFactory {
      public excuteNonQueryFir_resultStandardScheme getScheme() {
        return new excuteNonQueryFir_resultStandardScheme();
      }
    }

    private static class excuteNonQueryFir_resultStandardScheme extends StandardScheme<excuteNonQueryFir_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteNonQueryFir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteNonQueryFir_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteNonQueryFir_resultTupleSchemeFactory implements SchemeFactory {
      public excuteNonQueryFir_resultTupleScheme getScheme() {
        return new excuteNonQueryFir_resultTupleScheme();
      }
    }

    private static class excuteNonQueryFir_resultTupleScheme extends TupleScheme<excuteNonQueryFir_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryFir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSqlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryFir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class excuteNonQuerySec_args implements org.apache.thrift.TBase<excuteNonQuerySec_args, excuteNonQuerySec_args._Fields>, java.io.Serializable, Cloneable, Comparable<excuteNonQuerySec_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteNonQuerySec_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new excuteNonQuerySec_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new excuteNonQuerySec_argsTupleSchemeFactory());
    }

    public String sql; // required
    public List<String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql"),
      PARAM((short)2, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          case 2: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteNonQuerySec_args.class, metaDataMap);
    }

    public excuteNonQuerySec_args() {
    }

    public excuteNonQuerySec_args(
      String sql,
      List<String> param)
    {
      this();
      this.sql = sql;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteNonQuerySec_args(excuteNonQuerySec_args other) {
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetParam()) {
        List<String> __this__param = new ArrayList<String>(other.param);
        this.param = __this__param;
      }
    }

    public excuteNonQuerySec_args deepCopy() {
      return new excuteNonQuerySec_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
      this.param = null;
    }

    public String getSql() {
      return this.sql;
    }

    public excuteNonQuerySec_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public java.util.Iterator<String> getParamIterator() {
      return (this.param == null) ? null : this.param.iterator();
    }

    public void addToParam(String elem) {
      if (this.param == null) {
        this.param = new ArrayList<String>();
      }
      this.param.add(elem);
    }

    public List<String> getParam() {
      return this.param;
    }

    public excuteNonQuerySec_args setParam(List<String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteNonQuerySec_args)
        return this.equals((excuteNonQuerySec_args)that);
      return false;
    }

    public boolean equals(excuteNonQuerySec_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(excuteNonQuerySec_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("excuteNonQuerySec_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteNonQuerySec_argsStandardSchemeFactory implements SchemeFactory {
      public excuteNonQuerySec_argsStandardScheme getScheme() {
        return new excuteNonQuerySec_argsStandardScheme();
      }
    }

    private static class excuteNonQuerySec_argsStandardScheme extends StandardScheme<excuteNonQuerySec_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteNonQuerySec_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list784 = iprot.readListBegin();
                  struct.param = new ArrayList<String>(_list784.size);
                  for (int _i785 = 0; _i785 < _list784.size; ++_i785)
                  {
                    String _elem786;
                    _elem786 = iprot.readString();
                    struct.param.add(_elem786);
                  }
                  iprot.readListEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteNonQuerySec_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (String _iter787 : struct.param)
            {
              oprot.writeString(_iter787);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteNonQuerySec_argsTupleSchemeFactory implements SchemeFactory {
      public excuteNonQuerySec_argsTupleScheme getScheme() {
        return new excuteNonQuerySec_argsTupleScheme();
      }
    }

    private static class excuteNonQuerySec_argsTupleScheme extends TupleScheme<excuteNonQuerySec_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteNonQuerySec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        if (struct.isSetParam()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (String _iter788 : struct.param)
            {
              oprot.writeString(_iter788);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteNonQuerySec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list789 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new ArrayList<String>(_list789.size);
            for (int _i790 = 0; _i790 < _list789.size; ++_i790)
            {
              String _elem791;
              _elem791 = iprot.readString();
              struct.param.add(_elem791);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class excuteNonQuerySec_result implements org.apache.thrift.TBase<excuteNonQuerySec_result, excuteNonQuerySec_result._Fields>, java.io.Serializable, Cloneable, Comparable<excuteNonQuerySec_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteNonQuerySec_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new excuteNonQuerySec_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new excuteNonQuerySec_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteNonQuerySec_result.class, metaDataMap);
    }

    public excuteNonQuerySec_result() {
    }

    public excuteNonQuerySec_result(
      int success,
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteNonQuerySec_result(excuteNonQuerySec_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public excuteNonQuerySec_result deepCopy() {
      return new excuteNonQuerySec_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.sqlException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public excuteNonQuerySec_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public excuteNonQuerySec_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteNonQuerySec_result)
        return this.equals((excuteNonQuerySec_result)that);
      return false;
    }

    public boolean equals(excuteNonQuerySec_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(excuteNonQuerySec_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("excuteNonQuerySec_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteNonQuerySec_resultStandardSchemeFactory implements SchemeFactory {
      public excuteNonQuerySec_resultStandardScheme getScheme() {
        return new excuteNonQuerySec_resultStandardScheme();
      }
    }

    private static class excuteNonQuerySec_resultStandardScheme extends StandardScheme<excuteNonQuerySec_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteNonQuerySec_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteNonQuerySec_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteNonQuerySec_resultTupleSchemeFactory implements SchemeFactory {
      public excuteNonQuerySec_resultTupleScheme getScheme() {
        return new excuteNonQuerySec_resultTupleScheme();
      }
    }

    private static class excuteNonQuerySec_resultTupleScheme extends TupleScheme<excuteNonQuerySec_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteNonQuerySec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSqlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteNonQuerySec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class excuteNonQueryThr_args implements org.apache.thrift.TBase<excuteNonQueryThr_args, excuteNonQueryThr_args._Fields>, java.io.Serializable, Cloneable, Comparable<excuteNonQueryThr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteNonQueryThr_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batchSize", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new excuteNonQueryThr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new excuteNonQueryThr_argsTupleSchemeFactory());
    }

    public List<String> sql; // required
    public int batchSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql"),
      BATCH_SIZE((short)2, "batchSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          case 2: // BATCH_SIZE
            return BATCH_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BATCHSIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batchSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteNonQueryThr_args.class, metaDataMap);
    }

    public excuteNonQueryThr_args() {
    }

    public excuteNonQueryThr_args(
      List<String> sql,
      int batchSize)
    {
      this();
      this.sql = sql;
      this.batchSize = batchSize;
      setBatchSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteNonQueryThr_args(excuteNonQueryThr_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSql()) {
        List<String> __this__sql = new ArrayList<String>(other.sql);
        this.sql = __this__sql;
      }
      this.batchSize = other.batchSize;
    }

    public excuteNonQueryThr_args deepCopy() {
      return new excuteNonQueryThr_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
      setBatchSizeIsSet(false);
      this.batchSize = 0;
    }

    public int getSqlSize() {
      return (this.sql == null) ? 0 : this.sql.size();
    }

    public java.util.Iterator<String> getSqlIterator() {
      return (this.sql == null) ? null : this.sql.iterator();
    }

    public void addToSql(String elem) {
      if (this.sql == null) {
        this.sql = new ArrayList<String>();
      }
      this.sql.add(elem);
    }

    public List<String> getSql() {
      return this.sql;
    }

    public excuteNonQueryThr_args setSql(List<String> sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getBatchSize() {
      return this.batchSize;
    }

    public excuteNonQueryThr_args setBatchSize(int batchSize) {
      this.batchSize = batchSize;
      setBatchSizeIsSet(true);
      return this;
    }

    public void unsetBatchSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCHSIZE_ISSET_ID);
    }

    /** Returns true if field batchSize is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchSize() {
      return EncodingUtils.testBit(__isset_bitfield, __BATCHSIZE_ISSET_ID);
    }

    public void setBatchSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCHSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((List<String>)value);
        }
        break;

      case BATCH_SIZE:
        if (value == null) {
          unsetBatchSize();
        } else {
          setBatchSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      case BATCH_SIZE:
        return Integer.valueOf(getBatchSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      case BATCH_SIZE:
        return isSetBatchSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteNonQueryThr_args)
        return this.equals((excuteNonQueryThr_args)that);
      return false;
    }

    public boolean equals(excuteNonQueryThr_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_batchSize = true;
      boolean that_present_batchSize = true;
      if (this_present_batchSize || that_present_batchSize) {
        if (!(this_present_batchSize && that_present_batchSize))
          return false;
        if (this.batchSize != that.batchSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(excuteNonQueryThr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBatchSize()).compareTo(other.isSetBatchSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSize, other.batchSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("excuteNonQueryThr_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("batchSize:");
      sb.append(this.batchSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteNonQueryThr_argsStandardSchemeFactory implements SchemeFactory {
      public excuteNonQueryThr_argsStandardScheme getScheme() {
        return new excuteNonQueryThr_argsStandardScheme();
      }
    }

    private static class excuteNonQueryThr_argsStandardScheme extends StandardScheme<excuteNonQueryThr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteNonQueryThr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list792 = iprot.readListBegin();
                  struct.sql = new ArrayList<String>(_list792.size);
                  for (int _i793 = 0; _i793 < _list792.size; ++_i793)
                  {
                    String _elem794;
                    _elem794 = iprot.readString();
                    struct.sql.add(_elem794);
                  }
                  iprot.readListEnd();
                }
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BATCH_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.batchSize = iprot.readI32();
                struct.setBatchSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteNonQueryThr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sql.size()));
            for (String _iter795 : struct.sql)
            {
              oprot.writeString(_iter795);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.batchSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteNonQueryThr_argsTupleSchemeFactory implements SchemeFactory {
      public excuteNonQueryThr_argsTupleScheme getScheme() {
        return new excuteNonQueryThr_argsTupleScheme();
      }
    }

    private static class excuteNonQueryThr_argsTupleScheme extends TupleScheme<excuteNonQueryThr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryThr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        if (struct.isSetBatchSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSql()) {
          {
            oprot.writeI32(struct.sql.size());
            for (String _iter796 : struct.sql)
            {
              oprot.writeString(_iter796);
            }
          }
        }
        if (struct.isSetBatchSize()) {
          oprot.writeI32(struct.batchSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryThr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list797 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.sql = new ArrayList<String>(_list797.size);
            for (int _i798 = 0; _i798 < _list797.size; ++_i798)
            {
              String _elem799;
              _elem799 = iprot.readString();
              struct.sql.add(_elem799);
            }
          }
          struct.setSqlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.batchSize = iprot.readI32();
          struct.setBatchSizeIsSet(true);
        }
      }
    }

  }

  public static class excuteNonQueryThr_result implements org.apache.thrift.TBase<excuteNonQueryThr_result, excuteNonQueryThr_result._Fields>, java.io.Serializable, Cloneable, Comparable<excuteNonQueryThr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteNonQueryThr_result");

    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new excuteNonQueryThr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new excuteNonQueryThr_resultTupleSchemeFactory());
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteNonQueryThr_result.class, metaDataMap);
    }

    public excuteNonQueryThr_result() {
    }

    public excuteNonQueryThr_result(
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteNonQueryThr_result(excuteNonQueryThr_result other) {
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public excuteNonQueryThr_result deepCopy() {
      return new excuteNonQueryThr_result(this);
    }

    @Override
    public void clear() {
      this.sqlException = null;
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public excuteNonQueryThr_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteNonQueryThr_result)
        return this.equals((excuteNonQueryThr_result)that);
      return false;
    }

    public boolean equals(excuteNonQueryThr_result that) {
      if (that == null)
        return false;

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(excuteNonQueryThr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("excuteNonQueryThr_result(");
      boolean first = true;

      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteNonQueryThr_resultStandardSchemeFactory implements SchemeFactory {
      public excuteNonQueryThr_resultStandardScheme getScheme() {
        return new excuteNonQueryThr_resultStandardScheme();
      }
    }

    private static class excuteNonQueryThr_resultStandardScheme extends StandardScheme<excuteNonQueryThr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteNonQueryThr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteNonQueryThr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteNonQueryThr_resultTupleSchemeFactory implements SchemeFactory {
      public excuteNonQueryThr_resultTupleScheme getScheme() {
        return new excuteNonQueryThr_resultTupleScheme();
      }
    }

    private static class excuteNonQueryThr_resultTupleScheme extends TupleScheme<excuteNonQueryThr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryThr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryThr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class excuteNonQueryFou_args implements org.apache.thrift.TBase<excuteNonQueryFou_args, excuteNonQueryFou_args._Fields>, java.io.Serializable, Cloneable, Comparable<excuteNonQueryFou_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteNonQueryFou_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batchSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new excuteNonQueryFou_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new excuteNonQueryFou_argsTupleSchemeFactory());
    }

    public List<String> sql; // required
    public List<List<String>> param; // required
    public int batchSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql"),
      PARAM((short)2, "param"),
      BATCH_SIZE((short)3, "batchSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          case 2: // PARAM
            return PARAM;
          case 3: // BATCH_SIZE
            return BATCH_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BATCHSIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batchSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteNonQueryFou_args.class, metaDataMap);
    }

    public excuteNonQueryFou_args() {
    }

    public excuteNonQueryFou_args(
      List<String> sql,
      List<List<String>> param,
      int batchSize)
    {
      this();
      this.sql = sql;
      this.param = param;
      this.batchSize = batchSize;
      setBatchSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteNonQueryFou_args(excuteNonQueryFou_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSql()) {
        List<String> __this__sql = new ArrayList<String>(other.sql);
        this.sql = __this__sql;
      }
      if (other.isSetParam()) {
        List<List<String>> __this__param = new ArrayList<List<String>>(other.param.size());
        for (List<String> other_element : other.param) {
          List<String> __this__param_copy = new ArrayList<String>(other_element);
          __this__param.add(__this__param_copy);
        }
        this.param = __this__param;
      }
      this.batchSize = other.batchSize;
    }

    public excuteNonQueryFou_args deepCopy() {
      return new excuteNonQueryFou_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
      this.param = null;
      setBatchSizeIsSet(false);
      this.batchSize = 0;
    }

    public int getSqlSize() {
      return (this.sql == null) ? 0 : this.sql.size();
    }

    public java.util.Iterator<String> getSqlIterator() {
      return (this.sql == null) ? null : this.sql.iterator();
    }

    public void addToSql(String elem) {
      if (this.sql == null) {
        this.sql = new ArrayList<String>();
      }
      this.sql.add(elem);
    }

    public List<String> getSql() {
      return this.sql;
    }

    public excuteNonQueryFou_args setSql(List<String> sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public java.util.Iterator<List<String>> getParamIterator() {
      return (this.param == null) ? null : this.param.iterator();
    }

    public void addToParam(List<String> elem) {
      if (this.param == null) {
        this.param = new ArrayList<List<String>>();
      }
      this.param.add(elem);
    }

    public List<List<String>> getParam() {
      return this.param;
    }

    public excuteNonQueryFou_args setParam(List<List<String>> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public int getBatchSize() {
      return this.batchSize;
    }

    public excuteNonQueryFou_args setBatchSize(int batchSize) {
      this.batchSize = batchSize;
      setBatchSizeIsSet(true);
      return this;
    }

    public void unsetBatchSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCHSIZE_ISSET_ID);
    }

    /** Returns true if field batchSize is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchSize() {
      return EncodingUtils.testBit(__isset_bitfield, __BATCHSIZE_ISSET_ID);
    }

    public void setBatchSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCHSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((List<String>)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((List<List<String>>)value);
        }
        break;

      case BATCH_SIZE:
        if (value == null) {
          unsetBatchSize();
        } else {
          setBatchSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      case PARAM:
        return getParam();

      case BATCH_SIZE:
        return Integer.valueOf(getBatchSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      case PARAM:
        return isSetParam();
      case BATCH_SIZE:
        return isSetBatchSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteNonQueryFou_args)
        return this.equals((excuteNonQueryFou_args)that);
      return false;
    }

    public boolean equals(excuteNonQueryFou_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      boolean this_present_batchSize = true;
      boolean that_present_batchSize = true;
      if (this_present_batchSize || that_present_batchSize) {
        if (!(this_present_batchSize && that_present_batchSize))
          return false;
        if (this.batchSize != that.batchSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(excuteNonQueryFou_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBatchSize()).compareTo(other.isSetBatchSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSize, other.batchSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("excuteNonQueryFou_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("batchSize:");
      sb.append(this.batchSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteNonQueryFou_argsStandardSchemeFactory implements SchemeFactory {
      public excuteNonQueryFou_argsStandardScheme getScheme() {
        return new excuteNonQueryFou_argsStandardScheme();
      }
    }

    private static class excuteNonQueryFou_argsStandardScheme extends StandardScheme<excuteNonQueryFou_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteNonQueryFou_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list800 = iprot.readListBegin();
                  struct.sql = new ArrayList<String>(_list800.size);
                  for (int _i801 = 0; _i801 < _list800.size; ++_i801)
                  {
                    String _elem802;
                    _elem802 = iprot.readString();
                    struct.sql.add(_elem802);
                  }
                  iprot.readListEnd();
                }
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list803 = iprot.readListBegin();
                  struct.param = new ArrayList<List<String>>(_list803.size);
                  for (int _i804 = 0; _i804 < _list803.size; ++_i804)
                  {
                    List<String> _elem805;
                    {
                      org.apache.thrift.protocol.TList _list806 = iprot.readListBegin();
                      _elem805 = new ArrayList<String>(_list806.size);
                      for (int _i807 = 0; _i807 < _list806.size; ++_i807)
                      {
                        String _elem808;
                        _elem808 = iprot.readString();
                        _elem805.add(_elem808);
                      }
                      iprot.readListEnd();
                    }
                    struct.param.add(_elem805);
                  }
                  iprot.readListEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BATCH_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.batchSize = iprot.readI32();
                struct.setBatchSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteNonQueryFou_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sql.size()));
            for (String _iter809 : struct.sql)
            {
              oprot.writeString(_iter809);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.param.size()));
            for (List<String> _iter810 : struct.param)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter810.size()));
                for (String _iter811 : _iter810)
                {
                  oprot.writeString(_iter811);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.batchSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteNonQueryFou_argsTupleSchemeFactory implements SchemeFactory {
      public excuteNonQueryFou_argsTupleScheme getScheme() {
        return new excuteNonQueryFou_argsTupleScheme();
      }
    }

    private static class excuteNonQueryFou_argsTupleScheme extends TupleScheme<excuteNonQueryFou_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryFou_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        if (struct.isSetParam()) {
          optionals.set(1);
        }
        if (struct.isSetBatchSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSql()) {
          {
            oprot.writeI32(struct.sql.size());
            for (String _iter812 : struct.sql)
            {
              oprot.writeString(_iter812);
            }
          }
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (List<String> _iter813 : struct.param)
            {
              {
                oprot.writeI32(_iter813.size());
                for (String _iter814 : _iter813)
                {
                  oprot.writeString(_iter814);
                }
              }
            }
          }
        }
        if (struct.isSetBatchSize()) {
          oprot.writeI32(struct.batchSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryFou_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list815 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.sql = new ArrayList<String>(_list815.size);
            for (int _i816 = 0; _i816 < _list815.size; ++_i816)
            {
              String _elem817;
              _elem817 = iprot.readString();
              struct.sql.add(_elem817);
            }
          }
          struct.setSqlIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list818 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.param = new ArrayList<List<String>>(_list818.size);
            for (int _i819 = 0; _i819 < _list818.size; ++_i819)
            {
              List<String> _elem820;
              {
                org.apache.thrift.protocol.TList _list821 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem820 = new ArrayList<String>(_list821.size);
                for (int _i822 = 0; _i822 < _list821.size; ++_i822)
                {
                  String _elem823;
                  _elem823 = iprot.readString();
                  _elem820.add(_elem823);
                }
              }
              struct.param.add(_elem820);
            }
          }
          struct.setParamIsSet(true);
        }
        if (incoming.get(2)) {
          struct.batchSize = iprot.readI32();
          struct.setBatchSizeIsSet(true);
        }
      }
    }

  }

  public static class excuteNonQueryFou_result implements org.apache.thrift.TBase<excuteNonQueryFou_result, excuteNonQueryFou_result._Fields>, java.io.Serializable, Cloneable, Comparable<excuteNonQueryFou_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteNonQueryFou_result");

    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new excuteNonQueryFou_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new excuteNonQueryFou_resultTupleSchemeFactory());
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteNonQueryFou_result.class, metaDataMap);
    }

    public excuteNonQueryFou_result() {
    }

    public excuteNonQueryFou_result(
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteNonQueryFou_result(excuteNonQueryFou_result other) {
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public excuteNonQueryFou_result deepCopy() {
      return new excuteNonQueryFou_result(this);
    }

    @Override
    public void clear() {
      this.sqlException = null;
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public excuteNonQueryFou_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteNonQueryFou_result)
        return this.equals((excuteNonQueryFou_result)that);
      return false;
    }

    public boolean equals(excuteNonQueryFou_result that) {
      if (that == null)
        return false;

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(excuteNonQueryFou_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("excuteNonQueryFou_result(");
      boolean first = true;

      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteNonQueryFou_resultStandardSchemeFactory implements SchemeFactory {
      public excuteNonQueryFou_resultStandardScheme getScheme() {
        return new excuteNonQueryFou_resultStandardScheme();
      }
    }

    private static class excuteNonQueryFou_resultStandardScheme extends StandardScheme<excuteNonQueryFou_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteNonQueryFou_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteNonQueryFou_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteNonQueryFou_resultTupleSchemeFactory implements SchemeFactory {
      public excuteNonQueryFou_resultTupleScheme getScheme() {
        return new excuteNonQueryFou_resultTupleScheme();
      }
    }

    private static class excuteNonQueryFou_resultTupleScheme extends TupleScheme<excuteNonQueryFou_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryFou_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteNonQueryFou_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class executeQueryRawFir_args implements org.apache.thrift.TBase<executeQueryRawFir_args, executeQueryRawFir_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeQueryRawFir_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeQueryRawFir_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executeQueryRawFir_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executeQueryRawFir_argsTupleSchemeFactory());
    }

    public String sql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeQueryRawFir_args.class, metaDataMap);
    }

    public executeQueryRawFir_args() {
    }

    public executeQueryRawFir_args(
      String sql)
    {
      this();
      this.sql = sql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeQueryRawFir_args(executeQueryRawFir_args other) {
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
    }

    public executeQueryRawFir_args deepCopy() {
      return new executeQueryRawFir_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
    }

    public String getSql() {
      return this.sql;
    }

    public executeQueryRawFir_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executeQueryRawFir_args)
        return this.equals((executeQueryRawFir_args)that);
      return false;
    }

    public boolean equals(executeQueryRawFir_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(executeQueryRawFir_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executeQueryRawFir_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeQueryRawFir_argsStandardSchemeFactory implements SchemeFactory {
      public executeQueryRawFir_argsStandardScheme getScheme() {
        return new executeQueryRawFir_argsStandardScheme();
      }
    }

    private static class executeQueryRawFir_argsStandardScheme extends StandardScheme<executeQueryRawFir_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeQueryRawFir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeQueryRawFir_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeQueryRawFir_argsTupleSchemeFactory implements SchemeFactory {
      public executeQueryRawFir_argsTupleScheme getScheme() {
        return new executeQueryRawFir_argsTupleScheme();
      }
    }

    private static class executeQueryRawFir_argsTupleScheme extends TupleScheme<executeQueryRawFir_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeQueryRawFir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeQueryRawFir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
      }
    }

  }

  public static class executeQueryRawFir_result implements org.apache.thrift.TBase<executeQueryRawFir_result, executeQueryRawFir_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeQueryRawFir_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeQueryRawFir_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executeQueryRawFir_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executeQueryRawFir_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeQueryRawFir_result.class, metaDataMap);
    }

    public executeQueryRawFir_result() {
    }

    public executeQueryRawFir_result(
      List<Map<String,String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.success = success;
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeQueryRawFir_result(executeQueryRawFir_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public executeQueryRawFir_result deepCopy() {
      return new executeQueryRawFir_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sqlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public executeQueryRawFir_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public executeQueryRawFir_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executeQueryRawFir_result)
        return this.equals((executeQueryRawFir_result)that);
      return false;
    }

    public boolean equals(executeQueryRawFir_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(executeQueryRawFir_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executeQueryRawFir_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeQueryRawFir_resultStandardSchemeFactory implements SchemeFactory {
      public executeQueryRawFir_resultStandardScheme getScheme() {
        return new executeQueryRawFir_resultStandardScheme();
      }
    }

    private static class executeQueryRawFir_resultStandardScheme extends StandardScheme<executeQueryRawFir_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeQueryRawFir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list824 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list824.size);
                  for (int _i825 = 0; _i825 < _list824.size; ++_i825)
                  {
                    Map<String,String> _elem826;
                    {
                      org.apache.thrift.protocol.TMap _map827 = iprot.readMapBegin();
                      _elem826 = new HashMap<String,String>(2*_map827.size);
                      for (int _i828 = 0; _i828 < _map827.size; ++_i828)
                      {
                        String _key829;
                        String _val830;
                        _key829 = iprot.readString();
                        _val830 = iprot.readString();
                        _elem826.put(_key829, _val830);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem826);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeQueryRawFir_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter831 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter831.size()));
                for (Map.Entry<String, String> _iter832 : _iter831.entrySet())
                {
                  oprot.writeString(_iter832.getKey());
                  oprot.writeString(_iter832.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeQueryRawFir_resultTupleSchemeFactory implements SchemeFactory {
      public executeQueryRawFir_resultTupleScheme getScheme() {
        return new executeQueryRawFir_resultTupleScheme();
      }
    }

    private static class executeQueryRawFir_resultTupleScheme extends TupleScheme<executeQueryRawFir_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeQueryRawFir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSqlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter833 : struct.success)
            {
              {
                oprot.writeI32(_iter833.size());
                for (Map.Entry<String, String> _iter834 : _iter833.entrySet())
                {
                  oprot.writeString(_iter834.getKey());
                  oprot.writeString(_iter834.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeQueryRawFir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list835 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list835.size);
            for (int _i836 = 0; _i836 < _list835.size; ++_i836)
            {
              Map<String,String> _elem837;
              {
                org.apache.thrift.protocol.TMap _map838 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem837 = new HashMap<String,String>(2*_map838.size);
                for (int _i839 = 0; _i839 < _map838.size; ++_i839)
                {
                  String _key840;
                  String _val841;
                  _key840 = iprot.readString();
                  _val841 = iprot.readString();
                  _elem837.put(_key840, _val841);
                }
              }
              struct.success.add(_elem837);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class executeQueryRawSec_args implements org.apache.thrift.TBase<executeQueryRawSec_args, executeQueryRawSec_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeQueryRawSec_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeQueryRawSec_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executeQueryRawSec_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executeQueryRawSec_argsTupleSchemeFactory());
    }

    public String sql; // required
    public List<String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql"),
      PARAM((short)2, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          case 2: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeQueryRawSec_args.class, metaDataMap);
    }

    public executeQueryRawSec_args() {
    }

    public executeQueryRawSec_args(
      String sql,
      List<String> param)
    {
      this();
      this.sql = sql;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeQueryRawSec_args(executeQueryRawSec_args other) {
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetParam()) {
        List<String> __this__param = new ArrayList<String>(other.param);
        this.param = __this__param;
      }
    }

    public executeQueryRawSec_args deepCopy() {
      return new executeQueryRawSec_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
      this.param = null;
    }

    public String getSql() {
      return this.sql;
    }

    public executeQueryRawSec_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public java.util.Iterator<String> getParamIterator() {
      return (this.param == null) ? null : this.param.iterator();
    }

    public void addToParam(String elem) {
      if (this.param == null) {
        this.param = new ArrayList<String>();
      }
      this.param.add(elem);
    }

    public List<String> getParam() {
      return this.param;
    }

    public executeQueryRawSec_args setParam(List<String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executeQueryRawSec_args)
        return this.equals((executeQueryRawSec_args)that);
      return false;
    }

    public boolean equals(executeQueryRawSec_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(executeQueryRawSec_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executeQueryRawSec_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeQueryRawSec_argsStandardSchemeFactory implements SchemeFactory {
      public executeQueryRawSec_argsStandardScheme getScheme() {
        return new executeQueryRawSec_argsStandardScheme();
      }
    }

    private static class executeQueryRawSec_argsStandardScheme extends StandardScheme<executeQueryRawSec_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeQueryRawSec_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list842 = iprot.readListBegin();
                  struct.param = new ArrayList<String>(_list842.size);
                  for (int _i843 = 0; _i843 < _list842.size; ++_i843)
                  {
                    String _elem844;
                    _elem844 = iprot.readString();
                    struct.param.add(_elem844);
                  }
                  iprot.readListEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeQueryRawSec_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (String _iter845 : struct.param)
            {
              oprot.writeString(_iter845);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeQueryRawSec_argsTupleSchemeFactory implements SchemeFactory {
      public executeQueryRawSec_argsTupleScheme getScheme() {
        return new executeQueryRawSec_argsTupleScheme();
      }
    }

    private static class executeQueryRawSec_argsTupleScheme extends TupleScheme<executeQueryRawSec_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeQueryRawSec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        if (struct.isSetParam()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (String _iter846 : struct.param)
            {
              oprot.writeString(_iter846);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeQueryRawSec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list847 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new ArrayList<String>(_list847.size);
            for (int _i848 = 0; _i848 < _list847.size; ++_i848)
            {
              String _elem849;
              _elem849 = iprot.readString();
              struct.param.add(_elem849);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class executeQueryRawSec_result implements org.apache.thrift.TBase<executeQueryRawSec_result, executeQueryRawSec_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeQueryRawSec_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeQueryRawSec_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executeQueryRawSec_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executeQueryRawSec_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeQueryRawSec_result.class, metaDataMap);
    }

    public executeQueryRawSec_result() {
    }

    public executeQueryRawSec_result(
      List<Map<String,String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.success = success;
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeQueryRawSec_result(executeQueryRawSec_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public executeQueryRawSec_result deepCopy() {
      return new executeQueryRawSec_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sqlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public executeQueryRawSec_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public executeQueryRawSec_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executeQueryRawSec_result)
        return this.equals((executeQueryRawSec_result)that);
      return false;
    }

    public boolean equals(executeQueryRawSec_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(executeQueryRawSec_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executeQueryRawSec_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeQueryRawSec_resultStandardSchemeFactory implements SchemeFactory {
      public executeQueryRawSec_resultStandardScheme getScheme() {
        return new executeQueryRawSec_resultStandardScheme();
      }
    }

    private static class executeQueryRawSec_resultStandardScheme extends StandardScheme<executeQueryRawSec_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeQueryRawSec_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list850 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list850.size);
                  for (int _i851 = 0; _i851 < _list850.size; ++_i851)
                  {
                    Map<String,String> _elem852;
                    {
                      org.apache.thrift.protocol.TMap _map853 = iprot.readMapBegin();
                      _elem852 = new HashMap<String,String>(2*_map853.size);
                      for (int _i854 = 0; _i854 < _map853.size; ++_i854)
                      {
                        String _key855;
                        String _val856;
                        _key855 = iprot.readString();
                        _val856 = iprot.readString();
                        _elem852.put(_key855, _val856);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem852);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeQueryRawSec_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter857 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter857.size()));
                for (Map.Entry<String, String> _iter858 : _iter857.entrySet())
                {
                  oprot.writeString(_iter858.getKey());
                  oprot.writeString(_iter858.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeQueryRawSec_resultTupleSchemeFactory implements SchemeFactory {
      public executeQueryRawSec_resultTupleScheme getScheme() {
        return new executeQueryRawSec_resultTupleScheme();
      }
    }

    private static class executeQueryRawSec_resultTupleScheme extends TupleScheme<executeQueryRawSec_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeQueryRawSec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSqlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter859 : struct.success)
            {
              {
                oprot.writeI32(_iter859.size());
                for (Map.Entry<String, String> _iter860 : _iter859.entrySet())
                {
                  oprot.writeString(_iter860.getKey());
                  oprot.writeString(_iter860.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeQueryRawSec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list861 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list861.size);
            for (int _i862 = 0; _i862 < _list861.size; ++_i862)
            {
              Map<String,String> _elem863;
              {
                org.apache.thrift.protocol.TMap _map864 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem863 = new HashMap<String,String>(2*_map864.size);
                for (int _i865 = 0; _i865 < _map864.size; ++_i865)
                {
                  String _key866;
                  String _val867;
                  _key866 = iprot.readString();
                  _val867 = iprot.readString();
                  _elem863.put(_key866, _val867);
                }
              }
              struct.success.add(_elem863);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class executeQueryFir_args implements org.apache.thrift.TBase<executeQueryFir_args, executeQueryFir_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeQueryFir_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeQueryFir_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executeQueryFir_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executeQueryFir_argsTupleSchemeFactory());
    }

    public String sql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeQueryFir_args.class, metaDataMap);
    }

    public executeQueryFir_args() {
    }

    public executeQueryFir_args(
      String sql)
    {
      this();
      this.sql = sql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeQueryFir_args(executeQueryFir_args other) {
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
    }

    public executeQueryFir_args deepCopy() {
      return new executeQueryFir_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
    }

    public String getSql() {
      return this.sql;
    }

    public executeQueryFir_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executeQueryFir_args)
        return this.equals((executeQueryFir_args)that);
      return false;
    }

    public boolean equals(executeQueryFir_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(executeQueryFir_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executeQueryFir_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeQueryFir_argsStandardSchemeFactory implements SchemeFactory {
      public executeQueryFir_argsStandardScheme getScheme() {
        return new executeQueryFir_argsStandardScheme();
      }
    }

    private static class executeQueryFir_argsStandardScheme extends StandardScheme<executeQueryFir_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeQueryFir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeQueryFir_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeQueryFir_argsTupleSchemeFactory implements SchemeFactory {
      public executeQueryFir_argsTupleScheme getScheme() {
        return new executeQueryFir_argsTupleScheme();
      }
    }

    private static class executeQueryFir_argsTupleScheme extends TupleScheme<executeQueryFir_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeQueryFir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeQueryFir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
      }
    }

  }

  public static class executeQueryFir_result implements org.apache.thrift.TBase<executeQueryFir_result, executeQueryFir_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeQueryFir_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeQueryFir_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executeQueryFir_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executeQueryFir_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeQueryFir_result.class, metaDataMap);
    }

    public executeQueryFir_result() {
    }

    public executeQueryFir_result(
      List<Map<String,String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.success = success;
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeQueryFir_result(executeQueryFir_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public executeQueryFir_result deepCopy() {
      return new executeQueryFir_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sqlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public executeQueryFir_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public executeQueryFir_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executeQueryFir_result)
        return this.equals((executeQueryFir_result)that);
      return false;
    }

    public boolean equals(executeQueryFir_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(executeQueryFir_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executeQueryFir_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeQueryFir_resultStandardSchemeFactory implements SchemeFactory {
      public executeQueryFir_resultStandardScheme getScheme() {
        return new executeQueryFir_resultStandardScheme();
      }
    }

    private static class executeQueryFir_resultStandardScheme extends StandardScheme<executeQueryFir_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeQueryFir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list868 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list868.size);
                  for (int _i869 = 0; _i869 < _list868.size; ++_i869)
                  {
                    Map<String,String> _elem870;
                    {
                      org.apache.thrift.protocol.TMap _map871 = iprot.readMapBegin();
                      _elem870 = new HashMap<String,String>(2*_map871.size);
                      for (int _i872 = 0; _i872 < _map871.size; ++_i872)
                      {
                        String _key873;
                        String _val874;
                        _key873 = iprot.readString();
                        _val874 = iprot.readString();
                        _elem870.put(_key873, _val874);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem870);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeQueryFir_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter875 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter875.size()));
                for (Map.Entry<String, String> _iter876 : _iter875.entrySet())
                {
                  oprot.writeString(_iter876.getKey());
                  oprot.writeString(_iter876.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeQueryFir_resultTupleSchemeFactory implements SchemeFactory {
      public executeQueryFir_resultTupleScheme getScheme() {
        return new executeQueryFir_resultTupleScheme();
      }
    }

    private static class executeQueryFir_resultTupleScheme extends TupleScheme<executeQueryFir_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeQueryFir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSqlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter877 : struct.success)
            {
              {
                oprot.writeI32(_iter877.size());
                for (Map.Entry<String, String> _iter878 : _iter877.entrySet())
                {
                  oprot.writeString(_iter878.getKey());
                  oprot.writeString(_iter878.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeQueryFir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list879 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list879.size);
            for (int _i880 = 0; _i880 < _list879.size; ++_i880)
            {
              Map<String,String> _elem881;
              {
                org.apache.thrift.protocol.TMap _map882 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem881 = new HashMap<String,String>(2*_map882.size);
                for (int _i883 = 0; _i883 < _map882.size; ++_i883)
                {
                  String _key884;
                  String _val885;
                  _key884 = iprot.readString();
                  _val885 = iprot.readString();
                  _elem881.put(_key884, _val885);
                }
              }
              struct.success.add(_elem881);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class executeQuerySec_args implements org.apache.thrift.TBase<executeQuerySec_args, executeQuerySec_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeQuerySec_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeQuerySec_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executeQuerySec_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executeQuerySec_argsTupleSchemeFactory());
    }

    public String sql; // required
    public List<String> param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql"),
      PARAM((short)2, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          case 2: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeQuerySec_args.class, metaDataMap);
    }

    public executeQuerySec_args() {
    }

    public executeQuerySec_args(
      String sql,
      List<String> param)
    {
      this();
      this.sql = sql;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeQuerySec_args(executeQuerySec_args other) {
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetParam()) {
        List<String> __this__param = new ArrayList<String>(other.param);
        this.param = __this__param;
      }
    }

    public executeQuerySec_args deepCopy() {
      return new executeQuerySec_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
      this.param = null;
    }

    public String getSql() {
      return this.sql;
    }

    public executeQuerySec_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getParamSize() {
      return (this.param == null) ? 0 : this.param.size();
    }

    public java.util.Iterator<String> getParamIterator() {
      return (this.param == null) ? null : this.param.iterator();
    }

    public void addToParam(String elem) {
      if (this.param == null) {
        this.param = new ArrayList<String>();
      }
      this.param.add(elem);
    }

    public List<String> getParam() {
      return this.param;
    }

    public executeQuerySec_args setParam(List<String> param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executeQuerySec_args)
        return this.equals((executeQuerySec_args)that);
      return false;
    }

    public boolean equals(executeQuerySec_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(executeQuerySec_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executeQuerySec_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeQuerySec_argsStandardSchemeFactory implements SchemeFactory {
      public executeQuerySec_argsStandardScheme getScheme() {
        return new executeQuerySec_argsStandardScheme();
      }
    }

    private static class executeQuerySec_argsStandardScheme extends StandardScheme<executeQuerySec_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeQuerySec_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list886 = iprot.readListBegin();
                  struct.param = new ArrayList<String>(_list886.size);
                  for (int _i887 = 0; _i887 < _list886.size; ++_i887)
                  {
                    String _elem888;
                    _elem888 = iprot.readString();
                    struct.param.add(_elem888);
                  }
                  iprot.readListEnd();
                }
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeQuerySec_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.param.size()));
            for (String _iter889 : struct.param)
            {
              oprot.writeString(_iter889);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeQuerySec_argsTupleSchemeFactory implements SchemeFactory {
      public executeQuerySec_argsTupleScheme getScheme() {
        return new executeQuerySec_argsTupleScheme();
      }
    }

    private static class executeQuerySec_argsTupleScheme extends TupleScheme<executeQuerySec_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeQuerySec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        if (struct.isSetParam()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetParam()) {
          {
            oprot.writeI32(struct.param.size());
            for (String _iter890 : struct.param)
            {
              oprot.writeString(_iter890);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeQuerySec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list891 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.param = new ArrayList<String>(_list891.size);
            for (int _i892 = 0; _i892 < _list891.size; ++_i892)
            {
              String _elem893;
              _elem893 = iprot.readString();
              struct.param.add(_elem893);
            }
          }
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class executeQuerySec_result implements org.apache.thrift.TBase<executeQuerySec_result, executeQuerySec_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeQuerySec_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeQuerySec_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executeQuerySec_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executeQuerySec_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required
    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeQuerySec_result.class, metaDataMap);
    }

    public executeQuerySec_result() {
    }

    public executeQuerySec_result(
      List<Map<String,String>> success,
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.success = success;
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeQuerySec_result(executeQuerySec_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public executeQuerySec_result deepCopy() {
      return new executeQuerySec_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sqlException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public executeQuerySec_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public executeQuerySec_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executeQuerySec_result)
        return this.equals((executeQuerySec_result)that);
      return false;
    }

    public boolean equals(executeQuerySec_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(executeQuerySec_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executeQuerySec_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeQuerySec_resultStandardSchemeFactory implements SchemeFactory {
      public executeQuerySec_resultStandardScheme getScheme() {
        return new executeQuerySec_resultStandardScheme();
      }
    }

    private static class executeQuerySec_resultStandardScheme extends StandardScheme<executeQuerySec_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeQuerySec_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list894 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list894.size);
                  for (int _i895 = 0; _i895 < _list894.size; ++_i895)
                  {
                    Map<String,String> _elem896;
                    {
                      org.apache.thrift.protocol.TMap _map897 = iprot.readMapBegin();
                      _elem896 = new HashMap<String,String>(2*_map897.size);
                      for (int _i898 = 0; _i898 < _map897.size; ++_i898)
                      {
                        String _key899;
                        String _val900;
                        _key899 = iprot.readString();
                        _val900 = iprot.readString();
                        _elem896.put(_key899, _val900);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem896);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeQuerySec_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter901 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter901.size()));
                for (Map.Entry<String, String> _iter902 : _iter901.entrySet())
                {
                  oprot.writeString(_iter902.getKey());
                  oprot.writeString(_iter902.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeQuerySec_resultTupleSchemeFactory implements SchemeFactory {
      public executeQuerySec_resultTupleScheme getScheme() {
        return new executeQuerySec_resultTupleScheme();
      }
    }

    private static class executeQuerySec_resultTupleScheme extends TupleScheme<executeQuerySec_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeQuerySec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSqlException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter903 : struct.success)
            {
              {
                oprot.writeI32(_iter903.size());
                for (Map.Entry<String, String> _iter904 : _iter903.entrySet())
                {
                  oprot.writeString(_iter904.getKey());
                  oprot.writeString(_iter904.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeQuerySec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list905 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list905.size);
            for (int _i906 = 0; _i906 < _list905.size; ++_i906)
            {
              Map<String,String> _elem907;
              {
                org.apache.thrift.protocol.TMap _map908 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem907 = new HashMap<String,String>(2*_map908.size);
                for (int _i909 = 0; _i909 < _map908.size; ++_i909)
                {
                  String _key910;
                  String _val911;
                  _key910 = iprot.readString();
                  _val911 = iprot.readString();
                  _elem907.put(_key910, _val911);
                }
              }
              struct.success.add(_elem907);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class beginTransaction_args implements org.apache.thrift.TBase<beginTransaction_args, beginTransaction_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginTransaction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginTransaction_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginTransaction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginTransaction_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginTransaction_args.class, metaDataMap);
    }

    public beginTransaction_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginTransaction_args(beginTransaction_args other) {
    }

    public beginTransaction_args deepCopy() {
      return new beginTransaction_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginTransaction_args)
        return this.equals((beginTransaction_args)that);
      return false;
    }

    public boolean equals(beginTransaction_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(beginTransaction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginTransaction_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginTransaction_argsStandardSchemeFactory implements SchemeFactory {
      public beginTransaction_argsStandardScheme getScheme() {
        return new beginTransaction_argsStandardScheme();
      }
    }

    private static class beginTransaction_argsStandardScheme extends StandardScheme<beginTransaction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginTransaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginTransaction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginTransaction_argsTupleSchemeFactory implements SchemeFactory {
      public beginTransaction_argsTupleScheme getScheme() {
        return new beginTransaction_argsTupleScheme();
      }
    }

    private static class beginTransaction_argsTupleScheme extends TupleScheme<beginTransaction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class beginTransaction_result implements org.apache.thrift.TBase<beginTransaction_result, beginTransaction_result._Fields>, java.io.Serializable, Cloneable, Comparable<beginTransaction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginTransaction_result");

    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginTransaction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginTransaction_resultTupleSchemeFactory());
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginTransaction_result.class, metaDataMap);
    }

    public beginTransaction_result() {
    }

    public beginTransaction_result(
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginTransaction_result(beginTransaction_result other) {
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public beginTransaction_result deepCopy() {
      return new beginTransaction_result(this);
    }

    @Override
    public void clear() {
      this.sqlException = null;
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public beginTransaction_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginTransaction_result)
        return this.equals((beginTransaction_result)that);
      return false;
    }

    public boolean equals(beginTransaction_result that) {
      if (that == null)
        return false;

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(beginTransaction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginTransaction_result(");
      boolean first = true;

      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginTransaction_resultStandardSchemeFactory implements SchemeFactory {
      public beginTransaction_resultStandardScheme getScheme() {
        return new beginTransaction_resultStandardScheme();
      }
    }

    private static class beginTransaction_resultStandardScheme extends StandardScheme<beginTransaction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginTransaction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginTransaction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginTransaction_resultTupleSchemeFactory implements SchemeFactory {
      public beginTransaction_resultTupleScheme getScheme() {
        return new beginTransaction_resultTupleScheme();
      }
    }

    private static class beginTransaction_resultTupleScheme extends TupleScheme<beginTransaction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class commitTransaction_args implements org.apache.thrift.TBase<commitTransaction_args, commitTransaction_args._Fields>, java.io.Serializable, Cloneable, Comparable<commitTransaction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commitTransaction_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commitTransaction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commitTransaction_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commitTransaction_args.class, metaDataMap);
    }

    public commitTransaction_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitTransaction_args(commitTransaction_args other) {
    }

    public commitTransaction_args deepCopy() {
      return new commitTransaction_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitTransaction_args)
        return this.equals((commitTransaction_args)that);
      return false;
    }

    public boolean equals(commitTransaction_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(commitTransaction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commitTransaction_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commitTransaction_argsStandardSchemeFactory implements SchemeFactory {
      public commitTransaction_argsStandardScheme getScheme() {
        return new commitTransaction_argsStandardScheme();
      }
    }

    private static class commitTransaction_argsStandardScheme extends StandardScheme<commitTransaction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commitTransaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commitTransaction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commitTransaction_argsTupleSchemeFactory implements SchemeFactory {
      public commitTransaction_argsTupleScheme getScheme() {
        return new commitTransaction_argsTupleScheme();
      }
    }

    private static class commitTransaction_argsTupleScheme extends TupleScheme<commitTransaction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commitTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commitTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class commitTransaction_result implements org.apache.thrift.TBase<commitTransaction_result, commitTransaction_result._Fields>, java.io.Serializable, Cloneable, Comparable<commitTransaction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commitTransaction_result");

    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commitTransaction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commitTransaction_resultTupleSchemeFactory());
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commitTransaction_result.class, metaDataMap);
    }

    public commitTransaction_result() {
    }

    public commitTransaction_result(
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitTransaction_result(commitTransaction_result other) {
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public commitTransaction_result deepCopy() {
      return new commitTransaction_result(this);
    }

    @Override
    public void clear() {
      this.sqlException = null;
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public commitTransaction_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitTransaction_result)
        return this.equals((commitTransaction_result)that);
      return false;
    }

    public boolean equals(commitTransaction_result that) {
      if (that == null)
        return false;

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(commitTransaction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commitTransaction_result(");
      boolean first = true;

      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commitTransaction_resultStandardSchemeFactory implements SchemeFactory {
      public commitTransaction_resultStandardScheme getScheme() {
        return new commitTransaction_resultStandardScheme();
      }
    }

    private static class commitTransaction_resultStandardScheme extends StandardScheme<commitTransaction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commitTransaction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commitTransaction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commitTransaction_resultTupleSchemeFactory implements SchemeFactory {
      public commitTransaction_resultTupleScheme getScheme() {
        return new commitTransaction_resultTupleScheme();
      }
    }

    private static class commitTransaction_resultTupleScheme extends TupleScheme<commitTransaction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commitTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commitTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class rollbackTransaction_args implements org.apache.thrift.TBase<rollbackTransaction_args, rollbackTransaction_args._Fields>, java.io.Serializable, Cloneable, Comparable<rollbackTransaction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rollbackTransaction_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rollbackTransaction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rollbackTransaction_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rollbackTransaction_args.class, metaDataMap);
    }

    public rollbackTransaction_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rollbackTransaction_args(rollbackTransaction_args other) {
    }

    public rollbackTransaction_args deepCopy() {
      return new rollbackTransaction_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rollbackTransaction_args)
        return this.equals((rollbackTransaction_args)that);
      return false;
    }

    public boolean equals(rollbackTransaction_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(rollbackTransaction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rollbackTransaction_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rollbackTransaction_argsStandardSchemeFactory implements SchemeFactory {
      public rollbackTransaction_argsStandardScheme getScheme() {
        return new rollbackTransaction_argsStandardScheme();
      }
    }

    private static class rollbackTransaction_argsStandardScheme extends StandardScheme<rollbackTransaction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rollbackTransaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rollbackTransaction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rollbackTransaction_argsTupleSchemeFactory implements SchemeFactory {
      public rollbackTransaction_argsTupleScheme getScheme() {
        return new rollbackTransaction_argsTupleScheme();
      }
    }

    private static class rollbackTransaction_argsTupleScheme extends TupleScheme<rollbackTransaction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rollbackTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rollbackTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class rollbackTransaction_result implements org.apache.thrift.TBase<rollbackTransaction_result, rollbackTransaction_result._Fields>, java.io.Serializable, Cloneable, Comparable<rollbackTransaction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rollbackTransaction_result");

    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rollbackTransaction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rollbackTransaction_resultTupleSchemeFactory());
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rollbackTransaction_result.class, metaDataMap);
    }

    public rollbackTransaction_result() {
    }

    public rollbackTransaction_result(
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rollbackTransaction_result(rollbackTransaction_result other) {
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public rollbackTransaction_result deepCopy() {
      return new rollbackTransaction_result(this);
    }

    @Override
    public void clear() {
      this.sqlException = null;
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public rollbackTransaction_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rollbackTransaction_result)
        return this.equals((rollbackTransaction_result)that);
      return false;
    }

    public boolean equals(rollbackTransaction_result that) {
      if (that == null)
        return false;

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(rollbackTransaction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rollbackTransaction_result(");
      boolean first = true;

      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rollbackTransaction_resultStandardSchemeFactory implements SchemeFactory {
      public rollbackTransaction_resultStandardScheme getScheme() {
        return new rollbackTransaction_resultStandardScheme();
      }
    }

    private static class rollbackTransaction_resultStandardScheme extends StandardScheme<rollbackTransaction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rollbackTransaction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rollbackTransaction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rollbackTransaction_resultTupleSchemeFactory implements SchemeFactory {
      public rollbackTransaction_resultTupleScheme getScheme() {
        return new rollbackTransaction_resultTupleScheme();
      }
    }

    private static class rollbackTransaction_resultTupleScheme extends TupleScheme<rollbackTransaction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rollbackTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rollbackTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

  public static class close_args implements org.apache.thrift.TBase<close_args, close_args._Fields>, java.io.Serializable, Cloneable, Comparable<close_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new close_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new close_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_args.class, metaDataMap);
    }

    public close_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_args(close_args other) {
    }

    public close_args deepCopy() {
      return new close_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_args)
        return this.equals((close_args)that);
      return false;
    }

    public boolean equals(close_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class close_argsStandardSchemeFactory implements SchemeFactory {
      public close_argsStandardScheme getScheme() {
        return new close_argsStandardScheme();
      }
    }

    private static class close_argsStandardScheme extends StandardScheme<close_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, close_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, close_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class close_argsTupleSchemeFactory implements SchemeFactory {
      public close_argsTupleScheme getScheme() {
        return new close_argsTupleScheme();
      }
    }

    private static class close_argsTupleScheme extends TupleScheme<close_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, close_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, close_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class close_result implements org.apache.thrift.TBase<close_result, close_result._Fields>, java.io.Serializable, Cloneable, Comparable<close_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_result");

    private static final org.apache.thrift.protocol.TField SQL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new close_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new close_resultTupleSchemeFactory());
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_EXCEPTION((short)1, "sqlException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_EXCEPTION
            return SQL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("sqlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_result.class, metaDataMap);
    }

    public close_result() {
    }

    public close_result(
      com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException)
    {
      this();
      this.sqlException = sqlException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_result(close_result other) {
      if (other.isSetSqlException()) {
        this.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException(other.sqlException);
      }
    }

    public close_result deepCopy() {
      return new close_result(this);
    }

    @Override
    public void clear() {
      this.sqlException = null;
    }

    public com.ailk.oci.ocnosql.client.thrift.exception.SQLException getSqlException() {
      return this.sqlException;
    }

    public close_result setSqlException(com.ailk.oci.ocnosql.client.thrift.exception.SQLException sqlException) {
      this.sqlException = sqlException;
      return this;
    }

    public void unsetSqlException() {
      this.sqlException = null;
    }

    /** Returns true if field sqlException is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlException() {
      return this.sqlException != null;
    }

    public void setSqlExceptionIsSet(boolean value) {
      if (!value) {
        this.sqlException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_EXCEPTION:
        if (value == null) {
          unsetSqlException();
        } else {
          setSqlException((com.ailk.oci.ocnosql.client.thrift.exception.SQLException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_EXCEPTION:
        return getSqlException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_EXCEPTION:
        return isSetSqlException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_result)
        return this.equals((close_result)that);
      return false;
    }

    public boolean equals(close_result that) {
      if (that == null)
        return false;

      boolean this_present_sqlException = true && this.isSetSqlException();
      boolean that_present_sqlException = true && that.isSetSqlException();
      if (this_present_sqlException || that_present_sqlException) {
        if (!(this_present_sqlException && that_present_sqlException))
          return false;
        if (!this.sqlException.equals(that.sqlException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(close_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlException()).compareTo(other.isSetSqlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlException, other.sqlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_result(");
      boolean first = true;

      sb.append("sqlException:");
      if (this.sqlException == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class close_resultStandardSchemeFactory implements SchemeFactory {
      public close_resultStandardScheme getScheme() {
        return new close_resultStandardScheme();
      }
    }

    private static class close_resultStandardScheme extends StandardScheme<close_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, close_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
                struct.sqlException.read(iprot);
                struct.setSqlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, close_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlException != null) {
          oprot.writeFieldBegin(SQL_EXCEPTION_FIELD_DESC);
          struct.sqlException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class close_resultTupleSchemeFactory implements SchemeFactory {
      public close_resultTupleScheme getScheme() {
        return new close_resultTupleScheme();
      }
    }

    private static class close_resultTupleScheme extends TupleScheme<close_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, close_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlException()) {
          struct.sqlException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, close_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlException = new com.ailk.oci.ocnosql.client.thrift.exception.SQLException();
          struct.sqlException.read(iprot);
          struct.setSqlExceptionIsSet(true);
        }
      }
    }

  }

}
